// Generated by CoffeeScript 1.10.0
(function() {
  var bcv_parser, bcv_passage, bcv_utils, root,
    hasProp = {}.hasOwnProperty;

  root = this;

  bcv_parser = (function() {
    bcv_parser.prototype.s = "";

    bcv_parser.prototype.entities = [];

    bcv_parser.prototype.passage = null;

    bcv_parser.prototype.regexps = {};

    bcv_parser.prototype.options = {
      consecutive_combination_strategy: "combine",
      osis_compaction_strategy: "b",
      book_sequence_strategy: "ignore",
      invalid_sequence_strategy: "ignore",
      sequence_combination_strategy: "combine",
      punctuation_strategy: "us",
      invalid_passage_strategy: "ignore",
      non_latin_digits_strategy: "ignore",
      passage_existence_strategy: "bcv",
      zero_chapter_strategy: "error",
      zero_verse_strategy: "error",
      single_chapter_1_strategy: "chapter",
      book_alone_strategy: "ignore",
      book_range_strategy: "ignore",
      captive_end_digits_strategy: "delete",
      end_range_digits_strategy: "verse",
      include_apocrypha: false,
      ps151_strategy: "c",
      versification_system: "default",
      case_sensitive: "none"
    };

    function bcv_parser() {
      var key, ref, val;
      this.options = {};
      ref = bcv_parser.prototype.options;
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        val = ref[key];
        this.options[key] = val;
      }
      this.versification_system(this.options.versification_system);
    }

    bcv_parser.prototype.parse = function(s) {
      var ref;
      this.reset();
      this.s = s;
      s = this.replace_control_characters(s);
      ref = this.match_books(s), s = ref[0], this.passage.books = ref[1];
      this.entities = this.match_passages(s)[0];
      return this;
    };

    bcv_parser.prototype.parse_with_context = function(s, context) {
      var entities, ref, ref1, ref2;
      this.reset();
      ref = this.match_books(this.replace_control_characters(context)), context = ref[0], this.passage.books = ref[1];
      ref1 = this.match_passages(context), entities = ref1[0], context = ref1[1];
      this.reset();
      this.s = s;
      s = this.replace_control_characters(s);
      ref2 = this.match_books(s), s = ref2[0], this.passage.books = ref2[1];
      this.passage.books.push({
        value: "",
        parsed: [],
        start_index: 0,
        type: "context",
        context: context
      });
      s = "\x1f" + (this.passage.books.length - 1) + "/9\x1f" + s;
      this.entities = this.match_passages(s)[0];
      return this;
    };

    bcv_parser.prototype.reset = function() {
      this.s = "";
      this.entities = [];
      if (this.passage) {
        this.passage.books = [];
        return this.passage.indices = {};
      } else {
        this.passage = new bcv_passage;
        this.passage.options = this.options;
        return this.passage.translations = this.translations;
      }
    };

    bcv_parser.prototype.set_options = function(options) {
      var key, val;
      for (key in options) {
        if (!hasProp.call(options, key)) continue;
        val = options[key];
        if (key === "include_apocrypha" || key === "versification_system" || key === "case_sensitive") {
          this[key](val);
        } else {
          this.options[key] = val;
        }
      }
      return this;
    };

    bcv_parser.prototype.include_apocrypha = function(arg) {
      var base, base1, ref, translation, verse_count;
      if (!((arg != null) && (arg === true || arg === false))) {
        return this;
      }
      this.options.include_apocrypha = arg;
      this.regexps.books = this.regexps.get_books(arg, this.options.case_sensitive);
      ref = this.translations;
      for (translation in ref) {
        if (!hasProp.call(ref, translation)) continue;
        if (translation === "aliases" || translation === "alternates") {
          continue;
        }
        if ((base = this.translations[translation]).chapters == null) {
          base.chapters = {};
        }
        if ((base1 = this.translations[translation].chapters)["Ps"] == null) {
          base1["Ps"] = bcv_utils.shallow_clone_array(this.translations["default"].chapters["Ps"]);
        }
        if (arg === true) {
          if (this.translations[translation].chapters["Ps151"] != null) {
            verse_count = this.translations[translation].chapters["Ps151"][0];
          } else {
            verse_count = this.translations["default"].chapters["Ps151"][0];
          }
          this.translations[translation].chapters["Ps"][150] = verse_count;
        } else {
          if (this.translations[translation].chapters["Ps"].length === 151) {
            this.translations[translation].chapters["Ps"].pop();
          }
        }
      }
      return this;
    };

    bcv_parser.prototype.versification_system = function(system) {
      var base, base1, base2, book, chapter_list, ref, ref1;
      if (!((system != null) && (this.translations[system] != null))) {
        return this;
      }
      if (this.translations.alternates["default"] != null) {
        if (system === "default") {
          if (this.translations.alternates["default"].order != null) {
            this.translations["default"].order = bcv_utils.shallow_clone(this.translations.alternates["default"].order);
          }
          ref = this.translations.alternates["default"].chapters;
          for (book in ref) {
            if (!hasProp.call(ref, book)) continue;
            chapter_list = ref[book];
            this.translations["default"].chapters[book] = bcv_utils.shallow_clone_array(chapter_list);
          }
        } else {
          this.versification_system("default");
        }
      }
      if ((base = this.translations.alternates)["default"] == null) {
        base["default"] = {
          order: null,
          chapters: {}
        };
      }
      if (system !== "default" && (this.translations[system].order != null)) {
        if ((base1 = this.translations.alternates["default"]).order == null) {
          base1.order = bcv_utils.shallow_clone(this.translations["default"].order);
        }
        this.translations["default"].order = bcv_utils.shallow_clone(this.translations[system].order);
      }
      if (system !== "default" && (this.translations[system].chapters != null)) {
        ref1 = this.translations[system].chapters;
        for (book in ref1) {
          if (!hasProp.call(ref1, book)) continue;
          chapter_list = ref1[book];
          if ((base2 = this.translations.alternates["default"].chapters)[book] == null) {
            base2[book] = bcv_utils.shallow_clone_array(this.translations["default"].chapters[book]);
          }
          this.translations["default"].chapters[book] = bcv_utils.shallow_clone_array(chapter_list);
        }
      }
      this.options.versification_system = system;
      this.include_apocrypha(this.options.include_apocrypha);
      return this;
    };

    bcv_parser.prototype.case_sensitive = function(arg) {
      if (!((arg != null) && (arg === "none" || arg === "books"))) {
        return this;
      }
      if (arg === this.options.case_sensitive) {
        return this;
      }
      this.options.case_sensitive = arg;
      this.regexps.books = this.regexps.get_books(this.options.include_apocrypha, arg);
      return this;
    };

    bcv_parser.prototype.translation_info = function(new_translation) {
      var book, chapter_list, id, old_translation, out, ref, ref1, ref2;
      if (new_translation == null) {
        new_translation = "default";
      }
      if ((new_translation != null) && (((ref = this.translations.aliases[new_translation]) != null ? ref.alias : void 0) != null)) {
        new_translation = this.translations.aliases[new_translation].alias;
      }
      if (!((new_translation != null) && (this.translations[new_translation] != null))) {
        new_translation = "default";
      }
      old_translation = this.options.versification_system;
      if (new_translation !== old_translation) {
        this.versification_system(new_translation);
      }
      out = {
        order: bcv_utils.shallow_clone(this.translations["default"].order),
        books: [],
        chapters: {}
      };
      ref1 = this.translations["default"].chapters;
      for (book in ref1) {
        if (!hasProp.call(ref1, book)) continue;
        chapter_list = ref1[book];
        out.chapters[book] = bcv_utils.shallow_clone_array(chapter_list);
      }
      ref2 = out.order;
      for (book in ref2) {
        if (!hasProp.call(ref2, book)) continue;
        id = ref2[book];
        out.books[id - 1] = book;
      }
      if (new_translation !== old_translation) {
        this.versification_system(old_translation);
      }
      return out;
    };

    bcv_parser.prototype.replace_control_characters = function(s) {
      s = s.replace(this.regexps.control, " ");
      if (this.options.non_latin_digits_strategy === "replace") {
        s = s.replace(/[٠۰߀०০੦૦୦0౦೦൦๐໐༠၀႐០᠐᥆᧐᪀᪐᭐᮰᱀᱐꘠꣐꤀꧐꩐꯰０]/g, "0");
        s = s.replace(/[١۱߁१১੧૧୧௧౧೧൧๑໑༡၁႑១᠑᥇᧑᪁᪑᭑᮱᱁᱑꘡꣑꤁꧑꩑꯱１]/g, "1");
        s = s.replace(/[٢۲߂२২੨૨୨௨౨೨൨๒໒༢၂႒២᠒᥈᧒᪂᪒᭒᮲᱂᱒꘢꣒꤂꧒꩒꯲２]/g, "2");
        s = s.replace(/[٣۳߃३৩੩૩୩௩౩೩൩๓໓༣၃႓៣᠓᥉᧓᪃᪓᭓᮳᱃᱓꘣꣓꤃꧓꩓꯳３]/g, "3");
        s = s.replace(/[٤۴߄४৪੪૪୪௪౪೪൪๔໔༤၄႔៤᠔᥊᧔᪄᪔᭔᮴᱄᱔꘤꣔꤄꧔꩔꯴４]/g, "4");
        s = s.replace(/[٥۵߅५৫੫૫୫௫౫೫൫๕໕༥၅႕៥᠕᥋᧕᪅᪕᭕᮵᱅᱕꘥꣕꤅꧕꩕꯵５]/g, "5");
        s = s.replace(/[٦۶߆६৬੬૬୬௬౬೬൬๖໖༦၆႖៦᠖᥌᧖᪆᪖᭖᮶᱆᱖꘦꣖꤆꧖꩖꯶６]/g, "6");
        s = s.replace(/[٧۷߇७৭੭૭୭௭౭೭൭๗໗༧၇႗៧᠗᥍᧗᪇᪗᭗᮷᱇᱗꘧꣗꤇꧗꩗꯷７]/g, "7");
        s = s.replace(/[٨۸߈८৮੮૮୮௮౮೮൮๘໘༨၈႘៨᠘᥎᧘᪈᪘᭘᮸᱈᱘꘨꣘꤈꧘꩘꯸８]/g, "8");
        s = s.replace(/[٩۹߉९৯੯૯୯௯౯೯൯๙໙༩၉႙៩᠙᥏᧙᪉᪙᭙᮹᱉᱙꘩꣙꤉꧙꩙꯹９]/g, "9");
      }
      return s;
    };

    bcv_parser.prototype.match_books = function(s) {
      var book, books, has_replacement, k, len, ref;
      books = [];
      ref = this.regexps.books;
      for (k = 0, len = ref.length; k < len; k++) {
        book = ref[k];
        has_replacement = false;
        s = s.replace(book.regexp, function(full, prev, bk) {
          var extra;
          has_replacement = true;
          books.push({
            value: bk,
            parsed: book.osis,
            type: "book"
          });
          extra = book.extra != null ? "/" + book.extra : "";
          return prev + "\x1f" + (books.length - 1) + extra + "\x1f";
        });
        if (has_replacement === true && /^[\s\x1f\d:.,;\-\u2013\u2014]+$/.test(s)) {
          break;
        }
      }
      s = s.replace(this.regexps.translations, function(match) {
        books.push({
          value: match,
          parsed: match.toLowerCase(),
          type: "translation"
        });
        return "\x1e" + (books.length - 1) + "\x1e";
      });
      return [s, this.get_book_indices(books, s)];
    };

    bcv_parser.prototype.get_book_indices = function(books, s) {
      var add_index, match, re;
      add_index = 0;
      re = /([\x1f\x1e])(\d+)(?:\/\d+)?\1/g;
      while (match = re.exec(s)) {
        books[match[2]].start_index = match.index + add_index;
        add_index += books[match[2]].value.length - match[0].length;
      }
      return books;
    };

    bcv_parser.prototype.match_passages = function(s) {
      var accum, book_id, entities, full, match, next_char, original_part_length, part, passage, post_context, ref, regexp_index_adjust, start_index_adjust;
      entities = [];
      post_context = {};
      while (match = this.regexps.escaped_passage.exec(s)) {
        full = match[0], part = match[1], book_id = match[2];
        original_part_length = part.length;
        match.index += full.length - original_part_length;
        if (/\s[2-9]\d\d\s*$|\s\d{4,}\s*$/.test(part)) {
          part = part.replace(/\s+\d+\s*$/, "");
        }
        if (!/[\d\x1f\x1e)]$/.test(part)) {
          part = this.replace_match_end(part);
        }
        if (this.options.captive_end_digits_strategy === "delete") {
          next_char = match.index + part.length;
          if (s.length > next_char && /^\w/.test(s.substr(next_char, 1))) {
            part = part.replace(/[\s*]+\d+$/, "");
          }
          part = part.replace(/(\x1e[)\]]?)[\s*]*\d+$/, "$1");
        }
        part = part.replace(/[A-Z]+/g, function(capitals) {
          return capitals.toLowerCase();
        });
        start_index_adjust = part.substr(0, 1) === "\x1f" ? 0 : part.split("\x1f")[0].length;
        passage = {
          value: grammar.parse(part, {
            punctuation_strategy: this.options.punctuation_strategy
          }),
          type: "base",
          start_index: this.passage.books[book_id].start_index - start_index_adjust,
          match: part
        };
        if (this.options.book_alone_strategy === "full" && this.options.book_range_strategy === "include" && passage.value[0].type === "b" && (passage.value.length === 1 || (passage.value.length > 1 && passage.value[1].type === "translation_sequence")) && start_index_adjust === 0 && (this.passage.books[book_id].parsed.length === 1 || (this.passage.books[book_id].parsed.length > 1 && this.passage.books[book_id].parsed[1].type === "translation")) && /^[234]/.test(this.passage.books[book_id].parsed[0])) {
          this.create_book_range(s, passage, book_id);
        }
        ref = this.passage.handle_obj(passage), accum = ref[0], post_context = ref[1];
        entities = entities.concat(accum);
        regexp_index_adjust = this.adjust_regexp_end(accum, original_part_length, part.length);
        if (regexp_index_adjust > 0) {
          this.regexps.escaped_passage.lastIndex -= regexp_index_adjust;
        }
      }
      return [entities, post_context];
    };

    bcv_parser.prototype.adjust_regexp_end = function(accum, old_length, new_length) {
      var regexp_index_adjust;
      regexp_index_adjust = 0;
      if (accum.length > 0) {
        regexp_index_adjust = old_length - accum[accum.length - 1].indices[1] - 1;
      } else if (old_length !== new_length) {
        regexp_index_adjust = old_length - new_length;
      }
      return regexp_index_adjust;
    };

    bcv_parser.prototype.replace_match_end = function(part) {
      var match, remove;
      remove = part.length;
      while (match = this.regexps.match_end_split.exec(part)) {
        remove = match.index + match[0].length;
      }
      if (remove < part.length) {
        part = part.substr(0, remove);
      }
      return part;
    };

    bcv_parser.prototype.create_book_range = function(s, passage, book_id) {
      var cases, i, k, limit, prev, range_regexp, ref;
      cases = [bcv_parser.prototype.regexps.first, bcv_parser.prototype.regexps.second, bcv_parser.prototype.regexps.third];
      limit = parseInt(this.passage.books[book_id].parsed[0].substr(0, 1), 10);
      for (i = k = 1, ref = limit; 1 <= ref ? k < ref : k > ref; i = 1 <= ref ? ++k : --k) {
        range_regexp = i === limit - 1 ? bcv_parser.prototype.regexps.range_and : bcv_parser.prototype.regexps.range_only;
        prev = s.match(RegExp("(?:^|\\W)(" + cases[i - 1] + "\\s*" + range_regexp + "\\s*)\\x1f" + book_id + "\\x1f", "i"));
        if (prev != null) {
          return this.add_book_range_object(passage, prev, i);
        }
      }
      return false;
    };

    bcv_parser.prototype.add_book_range_object = function(passage, prev, start_book_number) {
      var i, k, length, ref, ref1, results;
      length = prev[1].length;
      passage.value[0] = {
        type: "b_range_pre",
        value: [
          {
            type: "b_pre",
            value: start_book_number.toString(),
            indices: [prev.index, prev.index + length]
          }, passage.value[0]
        ],
        indices: [0, passage.value[0].indices[1] + length]
      };
      passage.value[0].value[1].indices[0] += length;
      passage.value[0].value[1].indices[1] += length;
      passage.start_index -= length;
      passage.match = prev[1] + passage.match;
      if (passage.value.length === 1) {
        return;
      }
      results = [];
      for (i = k = 1, ref = passage.value.length; 1 <= ref ? k < ref : k > ref; i = 1 <= ref ? ++k : --k) {
        if (passage.value[i].value == null) {
          continue;
        }
        if (((ref1 = passage.value[i].value[0]) != null ? ref1.indices : void 0) != null) {
          passage.value[i].value[0].indices[0] += length;
          passage.value[i].value[0].indices[1] += length;
        }
        passage.value[i].indices[0] += length;
        results.push(passage.value[i].indices[1] += length);
      }
      return results;
    };

    bcv_parser.prototype.osis = function() {
      var k, len, osis, out, ref;
      out = [];
      ref = this.parsed_entities();
      for (k = 0, len = ref.length; k < len; k++) {
        osis = ref[k];
        if (osis.osis.length > 0) {
          out.push(osis.osis);
        }
      }
      return out.join(",");
    };

    bcv_parser.prototype.osis_and_translations = function() {
      var k, len, osis, out, ref;
      out = [];
      ref = this.parsed_entities();
      for (k = 0, len = ref.length; k < len; k++) {
        osis = ref[k];
        if (osis.osis.length > 0) {
          out.push([osis.osis, osis.translations.join(",")]);
        }
      }
      return out;
    };

    bcv_parser.prototype.osis_and_indices = function() {
      var k, len, osis, out, ref;
      out = [];
      ref = this.parsed_entities();
      for (k = 0, len = ref.length; k < len; k++) {
        osis = ref[k];
        if (osis.osis.length > 0) {
          out.push({
            osis: osis.osis,
            translations: osis.translations,
            indices: osis.indices
          });
        }
      }
      return out;
    };

    bcv_parser.prototype.parsed_entities = function() {
      var entity, entity_id, i, k, l, last_i, len, len1, length, m, n, osis, osises, out, passage, ref, ref1, ref2, ref3, strings, translation, translation_alias, translation_osis, translations;
      out = [];
      for (entity_id = k = 0, ref = this.entities.length; 0 <= ref ? k < ref : k > ref; entity_id = 0 <= ref ? ++k : --k) {
        entity = this.entities[entity_id];
        if (entity.type && entity.type === "translation_sequence" && out.length > 0 && entity_id === out[out.length - 1].entity_id + 1) {
          out[out.length - 1].indices[1] = entity.absolute_indices[1];
        }
        if (entity.passages == null) {
          continue;
        }
        if ((entity.type === "b" && this.options.book_alone_strategy === "ignore") || (entity.type === "b_range" && this.options.book_range_strategy === "ignore") || entity.type === "context") {
          continue;
        }
        translations = [];
        translation_alias = null;
        if (entity.passages[0].translations != null) {
          ref1 = entity.passages[0].translations;
          for (l = 0, len = ref1.length; l < len; l++) {
            translation = ref1[l];
            translation_osis = ((ref2 = translation.osis) != null ? ref2.length : void 0) > 0 ? translation.osis : "";
            if (translation_alias == null) {
              translation_alias = translation.alias;
            }
            translations.push(translation_osis);
          }
        } else {
          translations = [""];
          translation_alias = "default";
        }
        osises = [];
        length = entity.passages.length;
        for (i = m = 0, ref3 = length; 0 <= ref3 ? m < ref3 : m > ref3; i = 0 <= ref3 ? ++m : --m) {
          passage = entity.passages[i];
          if (passage.type == null) {
            passage.type = entity.type;
          }
          if (passage.valid.valid === false) {
            if (this.options.invalid_sequence_strategy === "ignore" && entity.type === "sequence") {
              this.snap_sequence("ignore", entity, osises, i, length);
            }
            if (this.options.invalid_passage_strategy === "ignore") {
              continue;
            }
          }
          if ((passage.type === "b" || passage.type === "b_range") && this.options.book_sequence_strategy === "ignore" && entity.type === "sequence") {
            this.snap_sequence("book", entity, osises, i, length);
            continue;
          }
          if ((passage.type === "b_range_start" || passage.type === "range_end_b") && this.options.book_range_strategy === "ignore") {
            this.snap_range(entity, i);
          }
          if (passage.absolute_indices == null) {
            passage.absolute_indices = entity.absolute_indices;
          }
          osises.push({
            osis: passage.valid.valid ? this.to_osis(passage.start, passage.end, translation_alias) : "",
            type: passage.type,
            indices: passage.absolute_indices,
            translations: translations,
            start: passage.start,
            end: passage.end,
            enclosed_indices: passage.enclosed_absolute_indices,
            entity_id: entity_id,
            entities: [passage]
          });
        }
        if (osises.length === 0) {
          continue;
        }
        if (osises.length > 1 && this.options.consecutive_combination_strategy === "combine") {
          osises = this.combine_consecutive_passages(osises, translation_alias);
        }
        if (this.options.sequence_combination_strategy === "separate") {
          out = out.concat(osises);
        } else {
          strings = [];
          last_i = osises.length - 1;
          if ((osises[last_i].enclosed_indices != null) && osises[last_i].enclosed_indices[1] >= 0) {
            entity.absolute_indices[1] = osises[last_i].enclosed_indices[1];
          }
          for (n = 0, len1 = osises.length; n < len1; n++) {
            osis = osises[n];
            if (osis.osis.length > 0) {
              strings.push(osis.osis);
            }
          }
          out.push({
            osis: strings.join(","),
            indices: entity.absolute_indices,
            translations: translations,
            entity_id: entity_id,
            entities: osises
          });
        }
      }
      return out;
    };

    bcv_parser.prototype.to_osis = function(start, end, translation) {
      var osis, out;
      if ((end.c == null) && (end.v == null) && start.b === end.b && (start.c == null) && (start.v == null) && this.options.book_alone_strategy === "first_chapter") {
        end.c = 1;
      }
      osis = {
        start: "",
        end: ""
      };
      if (start.c == null) {
        start.c = 1;
      }
      if (start.v == null) {
        start.v = 1;
      }
      if (end.c == null) {
        if (this.options.passage_existence_strategy.indexOf("c") >= 0 || ((this.passage.translations[translation].chapters[end.b] != null) && this.passage.translations[translation].chapters[end.b].length === 1)) {
          end.c = this.passage.translations[translation].chapters[end.b].length;
        } else {
          end.c = 999;
        }
      }
      if (end.v == null) {
        if ((this.passage.translations[translation].chapters[end.b][end.c - 1] != null) && this.options.passage_existence_strategy.indexOf("v") >= 0) {
          end.v = this.passage.translations[translation].chapters[end.b][end.c - 1];
        } else {
          end.v = 999;
        }
      }
      if (this.options.include_apocrypha && this.options.ps151_strategy === "b" && ((start.c === 151 && start.b === "Ps") || (end.c === 151 && end.b === "Ps"))) {
        this.fix_ps151(start, end, translation);
      }
      if (this.options.osis_compaction_strategy === "b" && start.c === 1 && start.v === 1 && ((end.c === 999 && end.v === 999) || (end.c === this.passage.translations[translation].chapters[end.b].length && this.options.passage_existence_strategy.indexOf("c") >= 0 && (end.v === 999 || (end.v === this.passage.translations[translation].chapters[end.b][end.c - 1] && this.options.passage_existence_strategy.indexOf("v") >= 0))))) {
        osis.start = start.b;
        osis.end = end.b;
      } else if (this.options.osis_compaction_strategy.length <= 2 && start.v === 1 && (end.v === 999 || (end.v === this.passage.translations[translation].chapters[end.b][end.c - 1] && this.options.passage_existence_strategy.indexOf("v") >= 0))) {
        osis.start = start.b + "." + start.c.toString();
        osis.end = end.b + "." + end.c.toString();
      } else {
        osis.start = start.b + "." + start.c.toString() + "." + start.v.toString();
        osis.end = end.b + "." + end.c.toString() + "." + end.v.toString();
      }
      if (osis.start === osis.end) {
        out = osis.start;
      } else {
        out = osis.start + "-" + osis.end;
      }
      if (start.extra != null) {
        out = start.extra + "," + out;
      }
      if (end.extra != null) {
        out += "," + end.extra;
      }
      return out;
    };

    bcv_parser.prototype.fix_ps151 = function(start, end, translation) {
      var ref;
      if (translation !== "default" && (((ref = this.translations[translation]) != null ? ref.chapters["Ps151"] : void 0) == null)) {
        this.passage.promote_book_to_translation("Ps151", translation);
      }
      if (start.c === 151 && start.b === "Ps") {
        if (end.c === 151 && end.b === "Ps") {
          start.b = "Ps151";
          start.c = 1;
          end.b = "Ps151";
          return end.c = 1;
        } else {
          start.extra = this.to_osis({
            b: "Ps151",
            c: 1,
            v: start.v
          }, {
            b: "Ps151",
            c: 1,
            v: this.passage.translations[translation].chapters["Ps151"][0]
          }, translation);
          start.b = "Prov";
          start.c = 1;
          return start.v = 1;
        }
      } else {
        end.extra = this.to_osis({
          b: "Ps151",
          c: 1,
          v: 1
        }, {
          b: "Ps151",
          c: 1,
          v: end.v
        }, translation);
        end.c = 150;
        return end.v = this.passage.translations[translation].chapters["Ps"][149];
      }
    };

    bcv_parser.prototype.combine_consecutive_passages = function(osises, translation) {
      var enclosed_sequence_start, has_enclosed, i, is_enclosed_last, k, last_i, osis, out, prev, prev_i, ref;
      out = [];
      prev = {};
      last_i = osises.length - 1;
      enclosed_sequence_start = -1;
      has_enclosed = false;
      for (i = k = 0, ref = last_i; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
        osis = osises[i];
        if (osis.osis.length > 0) {
          prev_i = out.length - 1;
          is_enclosed_last = false;
          if (osis.enclosed_indices[0] !== enclosed_sequence_start) {
            enclosed_sequence_start = osis.enclosed_indices[0];
          }
          if (enclosed_sequence_start >= 0 && (i === last_i || osises[i + 1].enclosed_indices[0] !== osis.enclosed_indices[0])) {
            is_enclosed_last = true;
            has_enclosed = true;
          }
          if (this.is_verse_consecutive(prev, osis.start, translation)) {
            out[prev_i].end = osis.end;
            out[prev_i].is_enclosed_last = is_enclosed_last;
            out[prev_i].indices[1] = osis.indices[1];
            out[prev_i].enclosed_indices[1] = osis.enclosed_indices[1];
            out[prev_i].osis = this.to_osis(out[prev_i].start, osis.end, translation);
          } else {
            out.push(osis);
          }
          prev = {
            b: osis.end.b,
            c: osis.end.c,
            v: osis.end.v
          };
        } else {
          out.push(osis);
          prev = {};
        }
      }
      if (has_enclosed) {
        this.snap_enclosed_indices(out);
      }
      return out;
    };

    bcv_parser.prototype.snap_enclosed_indices = function(osises) {
      var k, len, osis;
      for (k = 0, len = osises.length; k < len; k++) {
        osis = osises[k];
        if (osis.is_enclosed_last != null) {
          if (osis.enclosed_indices[0] < 0 && osis.is_enclosed_last) {
            osis.indices[1] = osis.enclosed_indices[1];
          }
          delete osis.is_enclosed_last;
        }
      }
      return osises;
    };

    bcv_parser.prototype.is_verse_consecutive = function(prev, check, translation) {
      var translation_order;
      if (prev.b == null) {
        return false;
      }
      translation_order = this.passage.translations[translation].order != null ? this.passage.translations[translation].order : this.passage.translations["default"].order;
      if (prev.b === check.b) {
        if (prev.c === check.c) {
          if (prev.v === check.v - 1) {
            return true;
          }
        } else if (check.v === 1 && prev.c === check.c - 1) {
          if (prev.v === this.passage.translations[translation].chapters[prev.b][prev.c - 1]) {
            return true;
          }
        }
      } else if (check.c === 1 && check.v === 1 && translation_order[prev.b] === translation_order[check.b] - 1) {
        if (prev.c === this.passage.translations[translation].chapters[prev.b].length && prev.v === this.passage.translations[translation].chapters[prev.b][prev.c - 1]) {
          return true;
        }
      }
      return false;
    };

    bcv_parser.prototype.snap_range = function(entity, passage_i) {
      var entity_i, key, pluck, ref, source_entity, target_entity, temp, type;
      if (entity.type === "b_range_start" || (entity.type === "sequence" && entity.passages[passage_i].type === "b_range_start")) {
        entity_i = 1;
        source_entity = "end";
        type = "b_range_start";
      } else {
        entity_i = 0;
        source_entity = "start";
        type = "range_end_b";
      }
      target_entity = source_entity === "end" ? "start" : "end";
      ref = entity.passages[passage_i][target_entity];
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        entity.passages[passage_i][target_entity][key] = entity.passages[passage_i][source_entity][key];
      }
      if (entity.type === "sequence") {
        if (passage_i >= entity.value.length) {
          passage_i = entity.value.length - 1;
        }
        pluck = this.passage.pluck(type, entity.value[passage_i]);
        if (pluck != null) {
          temp = this.snap_range(pluck, 0);
          if (passage_i === 0) {
            entity.absolute_indices[0] = temp.absolute_indices[0];
          } else {
            entity.absolute_indices[1] = temp.absolute_indices[1];
          }
        }
      } else {
        entity.original_type = entity.type;
        entity.type = entity.value[entity_i].type;
        entity.absolute_indices = [entity.value[entity_i].absolute_indices[0], entity.value[entity_i].absolute_indices[1]];
      }
      return entity;
    };

    bcv_parser.prototype.snap_sequence = function(type, entity, osises, i, length) {
      var passage;
      passage = entity.passages[i];
      if (passage.absolute_indices[0] === entity.absolute_indices[0] && i < length - 1 && this.get_snap_sequence_i(entity.passages, i, length) !== i) {
        entity.absolute_indices[0] = entity.passages[i + 1].absolute_indices[0];
        this.remove_absolute_indices(entity.passages, i + 1);
      } else if (passage.absolute_indices[1] === entity.absolute_indices[1] && i > 0) {
        entity.absolute_indices[1] = osises.length > 0 ? osises[osises.length - 1].indices[1] : entity.passages[i - 1].absolute_indices[1];
      } else if (type === "book" && i < length - 1 && !this.starts_with_book(entity.passages[i + 1])) {
        entity.passages[i + 1].absolute_indices[0] = passage.absolute_indices[0];
      }
      return entity;
    };

    bcv_parser.prototype.get_snap_sequence_i = function(passages, i, length) {
      var j, k, ref, ref1;
      for (j = k = ref = i + 1, ref1 = length; ref <= ref1 ? k < ref1 : k > ref1; j = ref <= ref1 ? ++k : --k) {
        if (this.starts_with_book(passages[j])) {
          return j;
        }
        if (passages[j].valid.valid) {
          return i;
        }
      }
      return i;
    };

    bcv_parser.prototype.starts_with_book = function(passage) {
      if (passage.type.substr(0, 1) === "b") {
        return true;
      }
      if ((passage.type === "range" || passage.type === "ff") && passage.start.type.substr(0, 1) === "b") {
        return true;
      }
      return false;
    };

    bcv_parser.prototype.remove_absolute_indices = function(passages, i) {
      var end, k, len, passage, ref, ref1, start;
      if (passages[i].enclosed_absolute_indices[0] < 0) {
        return false;
      }
      ref = passages[i].enclosed_absolute_indices, start = ref[0], end = ref[1];
      ref1 = passages.slice(i);
      for (k = 0, len = ref1.length; k < len; k++) {
        passage = ref1[k];
        if (passage.enclosed_absolute_indices[0] === start && passage.enclosed_absolute_indices[1] === end) {
          passage.enclosed_absolute_indices = [-1, -1];
        } else {
          break;
        }
      }
      return true;
    };

    return bcv_parser;

  })();

  root.bcv_parser = bcv_parser;

  bcv_passage = (function() {
    function bcv_passage() {}

    bcv_passage.prototype.books = [];

    bcv_passage.prototype.indices = {};

    bcv_passage.prototype.options = {};

    bcv_passage.prototype.translations = {};

    bcv_passage.prototype.handle_array = function(passages, accum, context) {
      var k, len, passage, ref;
      if (accum == null) {
        accum = [];
      }
      if (context == null) {
        context = {};
      }
      for (k = 0, len = passages.length; k < len; k++) {
        passage = passages[k];
        if (passage == null) {
          continue;
        }
        if (passage.type === "stop") {
          break;
        }
        ref = this.handle_obj(passage, accum, context), accum = ref[0], context = ref[1];
      }
      return [accum, context];
    };

    bcv_passage.prototype.handle_obj = function(passage, accum, context) {
      if ((passage.type != null) && (this[passage.type] != null)) {
        return this[passage.type](passage, accum, context);
      } else {
        return [accum, context];
      }
    };

    bcv_passage.prototype.b = function(passage, accum, context) {
      var alternates, b, k, len, obj, ref, valid;
      passage.start_context = bcv_utils.shallow_clone(context);
      passage.passages = [];
      alternates = [];
      ref = this.books[passage.value].parsed;
      for (k = 0, len = ref.length; k < len; k++) {
        b = ref[k];
        valid = this.validate_ref(passage.start_context.translations, {
          b: b
        });
        obj = {
          start: {
            b: b
          },
          end: {
            b: b
          },
          valid: valid
        };
        if (passage.passages.length === 0 && valid.valid) {
          passage.passages.push(obj);
        } else {
          alternates.push(obj);
        }
      }
      if (passage.passages.length === 0) {
        passage.passages.push(alternates.shift());
      }
      if (alternates.length > 0) {
        passage.passages[0].alternates = alternates;
      }
      if (passage.start_context.translations != null) {
        passage.passages[0].translations = passage.start_context.translations;
      }
      if (passage.absolute_indices == null) {
        passage.absolute_indices = this.get_absolute_indices(passage.indices);
      }
      accum.push(passage);
      context = {
        b: passage.passages[0].start.b
      };
      if (passage.start_context.translations != null) {
        context.translations = passage.start_context.translations;
      }
      return [accum, context];
    };

    bcv_passage.prototype.b_range = function(passage, accum, context) {
      return this.range(passage, accum, context);
    };

    bcv_passage.prototype.b_range_pre = function(passage, accum, context) {
      var alternates, book, end, ref, ref1, start_obj;
      passage.start_context = bcv_utils.shallow_clone(context);
      passage.passages = [];
      alternates = [];
      book = this.pluck("b", passage.value);
      ref = this.b(book, [], context), (ref1 = ref[0], end = ref1[0]), context = ref[1];
      if (passage.absolute_indices == null) {
        passage.absolute_indices = this.get_absolute_indices(passage.indices);
      }
      start_obj = {
        b: passage.value[0].value + end.passages[0].start.b.substr(1),
        type: "b"
      };
      passage.passages = [
        {
          start: start_obj,
          end: end.passages[0].end,
          valid: end.passages[0].valid
        }
      ];
      if (passage.start_context.translations != null) {
        passage.passages[0].translations = passage.start_context.translations;
      }
      accum.push(passage);
      return [accum, context];
    };

    bcv_passage.prototype.b_range_start = function(passage, accum, context) {
      return this.range(passage, accum, context);
    };

    bcv_passage.prototype.base = function(passage, accum, context) {
      this.indices = this.calculate_indices(passage.match, passage.start_index);
      return this.handle_array(passage.value, accum, context);
    };

    bcv_passage.prototype.bc = function(passage, accum, context) {
      var alternates, b, c, context_key, k, len, obj, ref, ref1, valid;
      passage.start_context = bcv_utils.shallow_clone(context);
      passage.passages = [];
      this.reset_context(context, ["b", "c", "v"]);
      c = this.pluck("c", passage.value).value;
      alternates = [];
      ref = this.books[this.pluck("b", passage.value).value].parsed;
      for (k = 0, len = ref.length; k < len; k++) {
        b = ref[k];
        context_key = "c";
        valid = this.validate_ref(passage.start_context.translations, {
          b: b,
          c: c
        });
        obj = {
          start: {
            b: b
          },
          end: {
            b: b
          },
          valid: valid
        };
        if (valid.messages.start_chapter_not_exist_in_single_chapter_book || valid.messages.start_chapter_1) {
          obj.valid = this.validate_ref(passage.start_context.translations, {
            b: b,
            v: c
          });
          if (valid.messages.start_chapter_not_exist_in_single_chapter_book) {
            obj.valid.messages.start_chapter_not_exist_in_single_chapter_book = 1;
          }
          obj.start.c = 1;
          obj.end.c = 1;
          context_key = "v";
        }
        obj.start[context_key] = c;
        ref1 = this.fix_start_zeroes(obj.valid, obj.start.c, obj.start.v), obj.start.c = ref1[0], obj.start.v = ref1[1];
        if (obj.start.v == null) {
          delete obj.start.v;
        }
        obj.end[context_key] = obj.start[context_key];
        if (passage.passages.length === 0 && obj.valid.valid) {
          passage.passages.push(obj);
        } else {
          alternates.push(obj);
        }
      }
      if (passage.passages.length === 0) {
        passage.passages.push(alternates.shift());
      }
      if (alternates.length > 0) {
        passage.passages[0].alternates = alternates;
      }
      if (passage.start_context.translations != null) {
        passage.passages[0].translations = passage.start_context.translations;
      }
      if (passage.absolute_indices == null) {
        passage.absolute_indices = this.get_absolute_indices(passage.indices);
      }
      this.set_context_from_object(context, ["b", "c", "v"], passage.passages[0].start);
      accum.push(passage);
      return [accum, context];
    };

    bcv_passage.prototype.bc_title = function(passage, accum, context) {
      var bc, i, k, ref, ref1, ref2, title;
      passage.start_context = bcv_utils.shallow_clone(context);
      ref = this.bc(this.pluck("bc", passage.value), [], context), (ref1 = ref[0], bc = ref1[0]), context = ref[1];
      if (bc.passages[0].start.b.substr(0, 2) !== "Ps" && (bc.passages[0].alternates != null)) {
        for (i = k = 0, ref2 = bc.passages[0].alternates.length; 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {
          if (bc.passages[0].alternates[i].start.b.substr(0, 2) !== "Ps") {
            continue;
          }
          bc.passages[0] = bc.passages[0].alternates[i];
          break;
        }
      }
      if (bc.passages[0].start.b.substr(0, 2) !== "Ps") {
        accum.push(bc);
        return [accum, context];
      }
      this.books[this.pluck("b", bc.value).value].parsed = ["Ps"];
      title = this.pluck("title", passage.value);
      if (title == null) {
        title = this.pluck("v", passage.value);
      }
      passage.value[1] = {
        type: "v",
        value: [
          {
            type: "integer",
            value: 1,
            indices: title.indices
          }
        ],
        indices: title.indices
      };
      passage.type = "bcv";
      return this.bcv(passage, accum, passage.start_context);
    };

    bcv_passage.prototype.bcv = function(passage, accum, context) {
      var alternates, b, bc, c, k, len, obj, ref, ref1, v, valid;
      passage.start_context = bcv_utils.shallow_clone(context);
      passage.passages = [];
      this.reset_context(context, ["b", "c", "v"]);
      bc = this.pluck("bc", passage.value);
      c = this.pluck("c", bc.value).value;
      v = this.pluck("v", passage.value).value;
      alternates = [];
      ref = this.books[this.pluck("b", bc.value).value].parsed;
      for (k = 0, len = ref.length; k < len; k++) {
        b = ref[k];
        valid = this.validate_ref(passage.start_context.translations, {
          b: b,
          c: c,
          v: v
        });
        ref1 = this.fix_start_zeroes(valid, c, v), c = ref1[0], v = ref1[1];
        obj = {
          start: {
            b: b,
            c: c,
            v: v
          },
          end: {
            b: b,
            c: c,
            v: v
          },
          valid: valid
        };
        if (passage.passages.length === 0 && valid.valid) {
          passage.passages.push(obj);
        } else {
          alternates.push(obj);
        }
      }
      if (passage.passages.length === 0) {
        passage.passages.push(alternates.shift());
      }
      if (alternates.length > 0) {
        passage.passages[0].alternates = alternates;
      }
      if (passage.start_context.translations != null) {
        passage.passages[0].translations = passage.start_context.translations;
      }
      if (passage.absolute_indices == null) {
        passage.absolute_indices = this.get_absolute_indices(passage.indices);
      }
      this.set_context_from_object(context, ["b", "c", "v"], passage.passages[0].start);
      accum.push(passage);
      return [accum, context];
    };

    bcv_passage.prototype.bv = function(passage, accum, context) {
      var b, bcv, ref, ref1, ref2, v;
      passage.start_context = bcv_utils.shallow_clone(context);
      ref = passage.value, b = ref[0], v = ref[1];
      bcv = {
        indices: passage.indices,
        value: [
          {
            type: "bc",
            value: [
              b, {
                type: "c",
                value: [
                  {
                    type: "integer",
                    value: 1
                  }
                ]
              }
            ]
          }, v
        ]
      };
      ref1 = this.bcv(bcv, [], context), (ref2 = ref1[0], bcv = ref2[0]), context = ref1[1];
      passage.passages = bcv.passages;
      if (passage.absolute_indices == null) {
        passage.absolute_indices = this.get_absolute_indices(passage.indices);
      }
      accum.push(passage);
      return [accum, context];
    };

    bcv_passage.prototype.c = function(passage, accum, context) {
      var c, valid;
      passage.start_context = bcv_utils.shallow_clone(context);
      c = passage.type === "integer" ? passage.value : this.pluck("integer", passage.value).value;
      valid = this.validate_ref(passage.start_context.translations, {
        b: context.b,
        c: c
      });
      if (!valid.valid && valid.messages.start_chapter_not_exist_in_single_chapter_book) {
        return this.v(passage, accum, context);
      }
      c = this.fix_start_zeroes(valid, c)[0];
      passage.passages = [
        {
          start: {
            b: context.b,
            c: c
          },
          end: {
            b: context.b,
            c: c
          },
          valid: valid
        }
      ];
      if (passage.start_context.translations != null) {
        passage.passages[0].translations = passage.start_context.translations;
      }
      accum.push(passage);
      context.c = c;
      this.reset_context(context, ["v"]);
      if (passage.absolute_indices == null) {
        passage.absolute_indices = this.get_absolute_indices(passage.indices);
      }
      return [accum, context];
    };

    bcv_passage.prototype.c_psalm = function(passage, accum, context) {
      var c;
      passage.type = "bc";
      c = parseInt(this.books[passage.value].value.match(/^\d+/)[0], 10);
      passage.value = [
        {
          type: "b",
          value: passage.value,
          indices: passage.indices
        }, {
          type: "c",
          value: [
            {
              type: "integer",
              value: c,
              indices: passage.indices
            }
          ],
          indices: passage.indices
        }
      ];
      return this.bc(passage, accum, context);
    };

    bcv_passage.prototype.c_title = function(passage, accum, context) {
      var title;
      passage.start_context = bcv_utils.shallow_clone(context);
      if (context.b !== "Ps") {
        return this.c(passage.value[0], accum, context);
      }
      title = this.pluck("title", passage.value);
      passage.value[1] = {
        type: "v",
        value: [
          {
            type: "integer",
            value: 1,
            indices: title.indices
          }
        ],
        indices: title.indices
      };
      passage.type = "cv";
      return this.cv(passage, accum, passage.start_context);
    };

    bcv_passage.prototype.cv = function(passage, accum, context) {
      var c, ref, v, valid;
      passage.start_context = bcv_utils.shallow_clone(context);
      c = this.pluck("c", passage.value).value;
      v = this.pluck("v", passage.value).value;
      valid = this.validate_ref(passage.start_context.translations, {
        b: context.b,
        c: c,
        v: v
      });
      ref = this.fix_start_zeroes(valid, c, v), c = ref[0], v = ref[1];
      passage.passages = [
        {
          start: {
            b: context.b,
            c: c,
            v: v
          },
          end: {
            b: context.b,
            c: c,
            v: v
          },
          valid: valid
        }
      ];
      if (passage.start_context.translations != null) {
        passage.passages[0].translations = passage.start_context.translations;
      }
      accum.push(passage);
      context.c = c;
      context.v = v;
      if (passage.absolute_indices == null) {
        passage.absolute_indices = this.get_absolute_indices(passage.indices);
      }
      return [accum, context];
    };

    bcv_passage.prototype.cb_range = function(passage, accum, context) {
      var b, end_c, ref, start_c;
      passage.type = "range";
      ref = passage.value, b = ref[0], start_c = ref[1], end_c = ref[2];
      passage.value = [
        {
          type: "bc",
          value: [b, start_c],
          indices: passage.indices
        }, end_c
      ];
      end_c.indices[1] = passage.indices[1];
      return this.range(passage, accum, context);
    };

    bcv_passage.prototype.context = function(passage, accum, context) {
      var key, ref;
      passage.start_context = bcv_utils.shallow_clone(context);
      passage.passages = [];
      ref = this.books[passage.value].context;
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        context[key] = this.books[passage.value].context[key];
      }
      accum.push(passage);
      return [accum, context];
    };

    bcv_passage.prototype.cv_psalm = function(passage, accum, context) {
      var bc, c_psalm, ref, v;
      passage.start_context = bcv_utils.shallow_clone(context);
      passage.type = "bcv";
      ref = passage.value, c_psalm = ref[0], v = ref[1];
      bc = this.c_psalm(c_psalm, [], passage.start_context)[0][0];
      passage.value = [bc, v];
      return this.bcv(passage, accum, context);
    };

    bcv_passage.prototype.ff = function(passage, accum, context) {
      var ref, ref1;
      passage.start_context = bcv_utils.shallow_clone(context);
      passage.value.push({
        type: "integer",
        indices: passage.indices,
        value: 999
      });
      ref = this.range(passage, [], passage.start_context), (ref1 = ref[0], passage = ref1[0]), context = ref[1];
      passage.value[0].indices = passage.value[1].indices;
      passage.value[0].absolute_indices = passage.value[1].absolute_indices;
      passage.value.pop();
      if (passage.passages[0].valid.messages.end_verse_not_exist != null) {
        delete passage.passages[0].valid.messages.end_verse_not_exist;
      }
      if (passage.passages[0].valid.messages.end_chapter_not_exist != null) {
        delete passage.passages[0].valid.messages.end_chapter_not_exist;
      }
      if (passage.passages[0].end.original_c != null) {
        delete passage.passages[0].end.original_c;
      }
      accum.push(passage);
      return [accum, context];
    };

    bcv_passage.prototype.integer_title = function(passage, accum, context) {
      var v_indices;
      passage.start_context = bcv_utils.shallow_clone(context);
      if (context.b !== "Ps") {
        return this.integer(passage.value[0], accum, context);
      }
      passage.value[0] = {
        type: "c",
        value: [passage.value[0]],
        indices: [passage.value[0].indices[0], passage.value[0].indices[1]]
      };
      v_indices = [passage.indices[1] - 5, passage.indices[1]];
      passage.value[1] = {
        type: "v",
        value: [
          {
            type: "integer",
            value: 1,
            indices: v_indices
          }
        ],
        indices: v_indices
      };
      passage.type = "cv";
      return this.cv(passage, accum, passage.start_context);
    };

    bcv_passage.prototype.integer = function(passage, accum, context) {
      if (context.v != null) {
        return this.v(passage, accum, context);
      }
      return this.c(passage, accum, context);
    };

    bcv_passage.prototype.next_v = function(passage, accum, context) {
      var prev_integer, psg, ref, ref1, ref2, ref3;
      passage.start_context = bcv_utils.shallow_clone(context);
      prev_integer = this.pluck_last_recursively("integer", passage.value);
      if (prev_integer == null) {
        prev_integer = {
          value: 1
        };
      }
      passage.value.push({
        type: "integer",
        indices: passage.indices,
        value: prev_integer.value + 1
      });
      ref = this.range(passage, [], passage.start_context), (ref1 = ref[0], psg = ref1[0]), context = ref[1];
      if ((psg.passages[0].valid.messages.end_verse_not_exist != null) && (psg.passages[0].valid.messages.start_verse_not_exist == null) && (psg.passages[0].valid.messages.start_chapter_not_exist == null) && (context.c != null)) {
        passage.value.pop();
        passage.value.push({
          type: "cv",
          indices: passage.indices,
          value: [
            {
              type: "c",
              value: [
                {
                  type: "integer",
                  value: context.c + 1,
                  indices: passage.indices
                }
              ],
              indices: passage.indices
            }, {
              type: "v",
              value: [
                {
                  type: "integer",
                  value: 1,
                  indices: passage.indices
                }
              ],
              indices: passage.indices
            }
          ]
        });
        ref2 = this.range(passage, [], passage.start_context), (ref3 = ref2[0], psg = ref3[0]), context = ref2[1];
      }
      psg.value[0].indices = psg.value[1].indices;
      psg.value[0].absolute_indices = psg.value[1].absolute_indices;
      psg.value.pop();
      if (psg.passages[0].valid.messages.end_verse_not_exist != null) {
        delete psg.passages[0].valid.messages.end_verse_not_exist;
      }
      if (psg.passages[0].valid.messages.end_chapter_not_exist != null) {
        delete psg.passages[0].valid.messages.end_chapter_not_exist;
      }
      if (psg.passages[0].end.original_c != null) {
        delete psg.passages[0].end.original_c;
      }
      accum.push(psg);
      return [accum, context];
    };

    bcv_passage.prototype.sequence = function(passage, accum, context) {
      var k, l, len, len1, obj, psg, ref, ref1, ref2, ref3, sub_psg;
      passage.start_context = bcv_utils.shallow_clone(context);
      passage.passages = [];
      ref = passage.value;
      for (k = 0, len = ref.length; k < len; k++) {
        obj = ref[k];
        ref1 = this.handle_array(obj, [], context), (ref2 = ref1[0], psg = ref2[0]), context = ref1[1];
        ref3 = psg.passages;
        for (l = 0, len1 = ref3.length; l < len1; l++) {
          sub_psg = ref3[l];
          if (sub_psg.type == null) {
            sub_psg.type = psg.type;
          }
          if (sub_psg.absolute_indices == null) {
            sub_psg.absolute_indices = psg.absolute_indices;
          }
          if (psg.start_context.translations != null) {
            sub_psg.translations = psg.start_context.translations;
          }
          sub_psg.enclosed_absolute_indices = psg.type === "sequence_post_enclosed" ? psg.absolute_indices : [-1, -1];
          passage.passages.push(sub_psg);
        }
      }
      if (passage.absolute_indices == null) {
        if (passage.passages.length > 0 && passage.type === "sequence") {
          passage.absolute_indices = [passage.passages[0].absolute_indices[0], passage.passages[passage.passages.length - 1].absolute_indices[1]];
        } else {
          passage.absolute_indices = this.get_absolute_indices(passage.indices);
        }
      }
      accum.push(passage);
      return [accum, context];
    };

    bcv_passage.prototype.sequence_post_enclosed = function(passage, accum, context) {
      return this.sequence(passage, accum, context);
    };

    bcv_passage.prototype.v = function(passage, accum, context) {
      var c, no_c, ref, v, valid;
      v = passage.type === "integer" ? passage.value : this.pluck("integer", passage.value).value;
      passage.start_context = bcv_utils.shallow_clone(context);
      c = context.c != null ? context.c : 1;
      valid = this.validate_ref(passage.start_context.translations, {
        b: context.b,
        c: c,
        v: v
      });
      ref = this.fix_start_zeroes(valid, 0, v), no_c = ref[0], v = ref[1];
      passage.passages = [
        {
          start: {
            b: context.b,
            c: c,
            v: v
          },
          end: {
            b: context.b,
            c: c,
            v: v
          },
          valid: valid
        }
      ];
      if (passage.start_context.translations != null) {
        passage.passages[0].translations = passage.start_context.translations;
      }
      if (passage.absolute_indices == null) {
        passage.absolute_indices = this.get_absolute_indices(passage.indices);
      }
      accum.push(passage);
      context.v = v;
      return [accum, context];
    };

    bcv_passage.prototype.range = function(passage, accum, context) {
      var end, end_obj, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, return_now, return_value, start, start_obj, valid;
      passage.start_context = bcv_utils.shallow_clone(context);
      ref = passage.value, start = ref[0], end = ref[1];
      ref1 = this.handle_obj(start, [], context), (ref2 = ref1[0], start = ref2[0]), context = ref1[1];
      if (end.type === "v" && ((start.type === "bc" && !((ref3 = start.passages) != null ? (ref4 = ref3[0]) != null ? (ref5 = ref4.valid) != null ? (ref6 = ref5.messages) != null ? ref6.start_chapter_not_exist_in_single_chapter_book : void 0 : void 0 : void 0 : void 0)) || start.type === "c") && this.options.end_range_digits_strategy === "verse") {
        passage.value[0] = start;
        return this.range_change_integer_end(passage, accum);
      }
      ref7 = this.handle_obj(end, [], context), (ref8 = ref7[0], end = ref8[0]), context = ref7[1];
      passage.value = [start, end];
      passage.indices = [start.indices[0], end.indices[1]];
      delete passage.absolute_indices;
      start_obj = {
        b: start.passages[0].start.b,
        c: start.passages[0].start.c,
        v: start.passages[0].start.v,
        type: start.type
      };
      end_obj = {
        b: end.passages[0].end.b,
        c: end.passages[0].end.c,
        v: end.passages[0].end.v,
        type: end.type
      };
      if (end.passages[0].valid.messages.start_chapter_is_zero) {
        end_obj.c = 0;
      }
      if (end.passages[0].valid.messages.start_verse_is_zero) {
        end_obj.v = 0;
      }
      valid = this.validate_ref(passage.start_context.translations, start_obj, end_obj);
      if (valid.valid) {
        ref9 = this.range_handle_valid(valid, passage, start, start_obj, end, end_obj, accum), return_now = ref9[0], return_value = ref9[1];
        if (return_now) {
          return return_value;
        }
      } else {
        return this.range_handle_invalid(valid, passage, start, start_obj, end, end_obj, accum);
      }
      if (passage.absolute_indices == null) {
        passage.absolute_indices = this.get_absolute_indices(passage.indices);
      }
      passage.passages = [
        {
          start: start_obj,
          end: end_obj,
          valid: valid
        }
      ];
      if (passage.start_context.translations != null) {
        passage.passages[0].translations = passage.start_context.translations;
      }
      if (start_obj.type === "b") {
        if (end_obj.type === "b") {
          passage.type = "b_range";
        } else {
          passage.type = "b_range_start";
        }
      } else if (end_obj.type === "b") {
        passage.type = "range_end_b";
      }
      accum.push(passage);
      return [accum, context];
    };

    bcv_passage.prototype.range_change_end = function(passage, accum, new_end) {
      var end, new_obj, ref, start;
      ref = passage.value, start = ref[0], end = ref[1];
      if (end.type === "integer") {
        end.original_value = end.value;
        end.value = new_end;
      } else if (end.type === "v") {
        new_obj = this.pluck("integer", end.value);
        new_obj.original_value = new_obj.value;
        new_obj.value = new_end;
      } else if (end.type === "cv") {
        new_obj = this.pluck("c", end.value);
        new_obj.original_value = new_obj.value;
        new_obj.value = new_end;
      }
      return this.handle_obj(passage, accum, passage.start_context);
    };

    bcv_passage.prototype.range_change_integer_end = function(passage, accum) {
      var end, ref, start;
      ref = passage.value, start = ref[0], end = ref[1];
      if (passage.original_type == null) {
        passage.original_type = passage.type;
      }
      if (passage.original_value == null) {
        passage.original_value = [start, end];
      }
      passage.type = start.type === "integer" ? "cv" : start.type + "v";
      if (start.type === "integer") {
        passage.value[0] = {
          type: "c",
          value: [start],
          indices: start.indices
        };
      }
      if (end.type === "integer") {
        passage.value[1] = {
          type: "v",
          value: [end],
          indices: end.indices
        };
      }
      return this.handle_obj(passage, accum, passage.start_context);
    };

    bcv_passage.prototype.range_check_new_end = function(translations, start_obj, end_obj, valid) {
      var new_end, new_valid, obj_to_validate, type;
      new_end = 0;
      type = null;
      if (valid.messages.end_chapter_before_start) {
        type = "c";
      } else if (valid.messages.end_verse_before_start) {
        type = "v";
      }
      if (type != null) {
        new_end = this.range_get_new_end_value(start_obj, end_obj, valid, type);
      }
      if (new_end > 0) {
        obj_to_validate = {
          b: end_obj.b,
          c: end_obj.c,
          v: end_obj.v
        };
        obj_to_validate[type] = new_end;
        new_valid = this.validate_ref(translations, obj_to_validate);
        if (!new_valid.valid) {
          new_end = 0;
        }
      }
      return new_end;
    };

    bcv_passage.prototype.range_end_b = function(passage, accum, context) {
      return this.range(passage, accum, context);
    };

    bcv_passage.prototype.range_get_new_end_value = function(start_obj, end_obj, valid, key) {
      var new_end;
      new_end = 0;
      if ((key === "c" && valid.messages.end_chapter_is_zero) || (key === "v" && valid.messages.end_verse_is_zero)) {
        return new_end;
      }
      if (start_obj[key] >= 10 && end_obj[key] < 10 && start_obj[key] - 10 * Math.floor(start_obj[key] / 10) < end_obj[key]) {
        new_end = end_obj[key] + 10 * Math.floor(start_obj[key] / 10);
      } else if (start_obj[key] >= 100 && end_obj[key] < 100 && start_obj[key] - 100 < end_obj[key]) {
        new_end = end_obj[key] + 100;
      }
      return new_end;
    };

    bcv_passage.prototype.range_handle_invalid = function(valid, passage, start, start_obj, end, end_obj, accum) {
      var new_end, ref, temp_valid, temp_value;
      if (valid.valid === false && (valid.messages.end_chapter_before_start || valid.messages.end_verse_before_start) && (end.type === "integer" || end.type === "v") || (valid.valid === false && valid.messages.end_chapter_before_start && end.type === "cv")) {
        new_end = this.range_check_new_end(passage.start_context.translations, start_obj, end_obj, valid);
        if (new_end > 0) {
          return this.range_change_end(passage, accum, new_end);
        }
      }
      if (this.options.end_range_digits_strategy === "verse" && (start_obj.v == null) && (end.type === "integer" || end.type === "v")) {
        temp_value = end.type === "v" ? this.pluck("integer", end.value) : end.value;
        temp_valid = this.validate_ref(passage.start_context.translations, {
          b: start_obj.b,
          c: start_obj.c,
          v: temp_value
        });
        if (temp_valid.valid) {
          return this.range_change_integer_end(passage, accum);
        }
      }
      if (passage.original_type == null) {
        passage.original_type = passage.type;
      }
      passage.type = "sequence";
      ref = [[start, end], [[start], [end]]], passage.original_value = ref[0], passage.value = ref[1];
      return this.sequence(passage, accum, passage.start_context);
    };

    bcv_passage.prototype.range_handle_valid = function(valid, passage, start, start_obj, end, end_obj, accum) {
      var temp_valid, temp_value;
      if (valid.messages.end_chapter_not_exist && this.options.end_range_digits_strategy === "verse" && (start_obj.v == null) && (end.type === "integer" || end.type === "v") && this.options.passage_existence_strategy.indexOf("v") >= 0) {
        temp_value = end.type === "v" ? this.pluck("integer", end.value) : end.value;
        temp_valid = this.validate_ref(passage.start_context.translations, {
          b: start_obj.b,
          c: start_obj.c,
          v: temp_value
        });
        if (temp_valid.valid) {
          return [true, this.range_change_integer_end(passage, accum)];
        }
      }
      this.range_validate(valid, start_obj, end_obj, passage);
      return [false, null];
    };

    bcv_passage.prototype.range_validate = function(valid, start_obj, end_obj, passage) {
      var ref;
      if (valid.messages.end_chapter_not_exist || valid.messages.end_chapter_not_exist_in_single_chapter_book) {
        end_obj.original_c = end_obj.c;
        end_obj.c = valid.messages.end_chapter_not_exist ? valid.messages.end_chapter_not_exist : valid.messages.end_chapter_not_exist_in_single_chapter_book;
        if (end_obj.v != null) {
          end_obj.v = this.validate_ref(passage.start_context.translations, {
            b: end_obj.b,
            c: end_obj.c,
            v: 999
          }).messages.end_verse_not_exist;
          delete valid.messages.end_verse_is_zero;
        }
      } else if (valid.messages.end_verse_not_exist) {
        end_obj.original_v = end_obj.v;
        end_obj.v = valid.messages.end_verse_not_exist;
      }
      if (valid.messages.end_verse_is_zero && this.options.zero_verse_strategy !== "allow") {
        end_obj.v = valid.messages.end_verse_is_zero;
      }
      if (valid.messages.end_chapter_is_zero) {
        end_obj.c = valid.messages.end_chapter_is_zero;
      }
      ref = this.fix_start_zeroes(valid, start_obj.c, start_obj.v), start_obj.c = ref[0], start_obj.v = ref[1];
      return true;
    };

    bcv_passage.prototype.translation_sequence = function(passage, accum, context) {
      var k, l, len, len1, ref, translation, translations, val;
      passage.start_context = bcv_utils.shallow_clone(context);
      translations = [];
      translations.push({
        translation: this.books[passage.value[0].value].parsed
      });
      ref = passage.value[1];
      for (k = 0, len = ref.length; k < len; k++) {
        val = ref[k];
        val = this.books[this.pluck("translation", val).value].parsed;
        if (val != null) {
          translations.push({
            translation: val
          });
        }
      }
      for (l = 0, len1 = translations.length; l < len1; l++) {
        translation = translations[l];
        if (this.translations.aliases[translation.translation] != null) {
          translation.alias = this.translations.aliases[translation.translation].alias;
          translation.osis = this.translations.aliases[translation.translation].osis || "";
        } else {
          translation.alias = "default";
          translation.osis = translation.translation.toUpperCase();
        }
      }
      if (accum.length > 0) {
        context = this.translation_sequence_apply(accum, translations);
      }
      if (passage.absolute_indices == null) {
        passage.absolute_indices = this.get_absolute_indices(passage.indices);
      }
      accum.push(passage);
      this.reset_context(context, ["translations"]);
      return [accum, context];
    };

    bcv_passage.prototype.translation_sequence_apply = function(accum, translations) {
      var context, i, k, new_accum, ref, ref1, use_i;
      use_i = 0;
      for (i = k = ref = accum.length - 1; ref <= 0 ? k <= 0 : k >= 0; i = ref <= 0 ? ++k : --k) {
        if (accum[i].original_type != null) {
          accum[i].type = accum[i].original_type;
        }
        if (accum[i].original_value != null) {
          accum[i].value = accum[i].original_value;
        }
        if (accum[i].type !== "translation_sequence") {
          continue;
        }
        use_i = i + 1;
        break;
      }
      if (use_i < accum.length) {
        accum[use_i].start_context.translations = translations;
        ref1 = this.handle_array(accum.slice(use_i), [], accum[use_i].start_context), new_accum = ref1[0], context = ref1[1];
      } else {
        context = bcv_utils.shallow_clone(accum[accum.length - 1].start_context);
      }
      return context;
    };

    bcv_passage.prototype.pluck = function(type, passages) {
      var k, len, passage;
      for (k = 0, len = passages.length; k < len; k++) {
        passage = passages[k];
        if (!((passage != null) && (passage.type != null) && passage.type === type)) {
          continue;
        }
        if (type === "c" || type === "v") {
          return this.pluck("integer", passage.value);
        }
        return passage;
      }
      return null;
    };

    bcv_passage.prototype.pluck_last_recursively = function(type, passages) {
      var k, passage, value;
      for (k = passages.length - 1; k >= 0; k += -1) {
        passage = passages[k];
        if (!((passage != null) && (passage.type != null))) {
          continue;
        }
        if (passage.type === type) {
          return this.pluck(type, [passage]);
        }
        value = this.pluck_last_recursively(type, passage.value);
        if (value != null) {
          return value;
        }
      }
      return null;
    };

    bcv_passage.prototype.set_context_from_object = function(context, keys, obj) {
      var k, len, results, type;
      results = [];
      for (k = 0, len = keys.length; k < len; k++) {
        type = keys[k];
        if (obj[type] == null) {
          continue;
        }
        results.push(context[type] = obj[type]);
      }
      return results;
    };

    bcv_passage.prototype.reset_context = function(context, keys) {
      var k, len, results, type;
      results = [];
      for (k = 0, len = keys.length; k < len; k++) {
        type = keys[k];
        results.push(delete context[type]);
      }
      return results;
    };

    bcv_passage.prototype.fix_start_zeroes = function(valid, c, v) {
      if (valid.messages.start_chapter_is_zero && this.options.zero_chapter_strategy === "upgrade") {
        c = valid.messages.start_chapter_is_zero;
      }
      if (valid.messages.start_verse_is_zero && this.options.zero_verse_strategy === "upgrade") {
        v = valid.messages.start_verse_is_zero;
      }
      return [c, v];
    };

    bcv_passage.prototype.calculate_indices = function(match, adjust) {
      var character, end_index, indices, k, l, len, len1, len2, m, match_index, part, part_length, parts, ref, switch_type, temp;
      switch_type = "book";
      indices = [];
      match_index = 0;
      adjust = parseInt(adjust, 10);
      parts = [match];
      ref = ["\x1e", "\x1f"];
      for (k = 0, len = ref.length; k < len; k++) {
        character = ref[k];
        temp = [];
        for (l = 0, len1 = parts.length; l < len1; l++) {
          part = parts[l];
          temp = temp.concat(part.split(character));
        }
        parts = temp;
      }
      for (m = 0, len2 = parts.length; m < len2; m++) {
        part = parts[m];
        switch_type = switch_type === "book" ? "rest" : "book";
        part_length = part.length;
        if (part_length === 0) {
          continue;
        }
        if (switch_type === "book") {
          part = part.replace(/\/\d+$/, "");
          end_index = match_index + part_length;
          if (indices.length > 0 && indices[indices.length - 1].index === adjust) {
            indices[indices.length - 1].end = end_index;
          } else {
            indices.push({
              start: match_index,
              end: end_index,
              index: adjust
            });
          }
          match_index += part_length + 2;
          adjust = this.books[part].start_index + this.books[part].value.length - match_index;
          indices.push({
            start: end_index + 1,
            end: end_index + 1,
            index: adjust
          });
        } else {
          end_index = match_index + part_length - 1;
          if (indices.length > 0 && indices[indices.length - 1].index === adjust) {
            indices[indices.length - 1].end = end_index;
          } else {
            indices.push({
              start: match_index,
              end: end_index,
              index: adjust
            });
          }
          match_index += part_length;
        }
      }
      return indices;
    };

    bcv_passage.prototype.get_absolute_indices = function(arg1) {
      var end, end_out, index, k, len, ref, start, start_out;
      start = arg1[0], end = arg1[1];
      start_out = null;
      end_out = null;
      ref = this.indices;
      for (k = 0, len = ref.length; k < len; k++) {
        index = ref[k];
        if (start_out === null && (index.start <= start && start <= index.end)) {
          start_out = start + index.index;
        }
        if ((index.start <= end && end <= index.end)) {
          end_out = end + index.index + 1;
          break;
        }
      }
      return [start_out, end_out];
    };

    bcv_passage.prototype.validate_ref = function(translations, start, end) {
      var k, len, messages, temp_valid, translation, valid;
      if (!((translations != null) && translations.length > 0)) {
        translations = [
          {
            translation: "default",
            osis: "",
            alias: "default"
          }
        ];
      }
      valid = false;
      messages = {};
      for (k = 0, len = translations.length; k < len; k++) {
        translation = translations[k];
        if (translation.alias == null) {
          translation.alias = "default";
        }
        if (translation.alias == null) {
          if (messages.translation_invalid == null) {
            messages.translation_invalid = [];
          }
          messages.translation_invalid.push(translation);
          continue;
        }
        if (this.translations.aliases[translation.alias] == null) {
          translation.alias = "default";
          if (messages.translation_unknown == null) {
            messages.translation_unknown = [];
          }
          messages.translation_unknown.push(translation);
        }
        temp_valid = this.validate_start_ref(translation.alias, start, messages)[0];
        if (end) {
          temp_valid = this.validate_end_ref(translation.alias, start, end, temp_valid, messages)[0];
        }
        if (temp_valid === true) {
          valid = true;
        }
      }
      return {
        valid: valid,
        messages: messages
      };
    };

    bcv_passage.prototype.validate_start_ref = function(translation, start, messages) {
      var ref, ref1, translation_order, valid;
      valid = true;
      if (translation !== "default" && (((ref = this.translations[translation]) != null ? ref.chapters[start.b] : void 0) == null)) {
        this.promote_book_to_translation(start.b, translation);
      }
      translation_order = ((ref1 = this.translations[translation]) != null ? ref1.order : void 0) != null ? translation : "default";
      if (start.v != null) {
        start.v = parseInt(start.v, 10);
      }
      if (this.translations[translation_order].order[start.b] != null) {
        if (start.c == null) {
          start.c = 1;
        }
        start.c = parseInt(start.c, 10);
        if (isNaN(start.c)) {
          valid = false;
          messages.start_chapter_not_numeric = true;
          return [valid, messages];
        }
        if (start.c === 0) {
          messages.start_chapter_is_zero = 1;
          if (this.options.zero_chapter_strategy === "error") {
            valid = false;
          } else {
            start.c = 1;
          }
        }
        if ((start.v != null) && start.v === 0) {
          messages.start_verse_is_zero = 1;
          if (this.options.zero_verse_strategy === "error") {
            valid = false;
          } else if (this.options.zero_verse_strategy === "upgrade") {
            start.v = 1;
          }
        }
        if (start.c > 0 && (this.translations[translation].chapters[start.b][start.c - 1] != null)) {
          if (start.v != null) {
            if (isNaN(start.v)) {
              valid = false;
              messages.start_verse_not_numeric = true;
            } else if (start.v > this.translations[translation].chapters[start.b][start.c - 1]) {
              if (this.options.passage_existence_strategy.indexOf("v") >= 0) {
                valid = false;
                messages.start_verse_not_exist = this.translations[translation].chapters[start.b][start.c - 1];
              }
            }
          } else if (start.c === 1 && this.options.single_chapter_1_strategy === "verse" && this.translations[translation].chapters[start.b].length === 1) {
            messages.start_chapter_1 = 1;
          }
        } else {
          if (start.c !== 1 && this.translations[translation].chapters[start.b].length === 1) {
            valid = false;
            messages.start_chapter_not_exist_in_single_chapter_book = 1;
          } else if (start.c > 0 && this.options.passage_existence_strategy.indexOf("c") >= 0) {
            valid = false;
            messages.start_chapter_not_exist = this.translations[translation].chapters[start.b].length;
          }
        }
      } else if (start.b == null) {
        valid = false;
        messages.start_book_not_defined = true;
      } else {
        if (this.options.passage_existence_strategy.indexOf("b") >= 0) {
          valid = false;
        }
        messages.start_book_not_exist = true;
      }
      return [valid, messages];
    };

    bcv_passage.prototype.validate_end_ref = function(translation, start, end, valid, messages) {
      var ref, translation_order;
      translation_order = ((ref = this.translations[translation]) != null ? ref.order : void 0) != null ? translation : "default";
      if (end.c != null) {
        end.c = parseInt(end.c, 10);
        if (isNaN(end.c)) {
          valid = false;
          messages.end_chapter_not_numeric = true;
        } else if (end.c === 0) {
          messages.end_chapter_is_zero = 1;
          if (this.options.zero_chapter_strategy === "error") {
            valid = false;
          } else {
            end.c = 1;
          }
        }
      }
      if (end.v != null) {
        end.v = parseInt(end.v, 10);
        if (isNaN(end.v)) {
          valid = false;
          messages.end_verse_not_numeric = true;
        } else if (end.v === 0) {
          messages.end_verse_is_zero = 1;
          if (this.options.zero_verse_strategy === "error") {
            valid = false;
          } else if (this.options.zero_verse_strategy === "upgrade") {
            end.v = 1;
          }
        }
      }
      if (this.translations[translation_order].order[end.b] != null) {
        if ((end.c == null) && this.translations[translation].chapters[end.b].length === 1) {
          end.c = 1;
        }
        if ((this.translations[translation_order].order[start.b] != null) && this.translations[translation_order].order[start.b] > this.translations[translation_order].order[end.b]) {
          if (this.options.passage_existence_strategy.indexOf("b") >= 0) {
            valid = false;
          }
          messages.end_book_before_start = true;
        }
        if (start.b === end.b && (end.c != null) && !isNaN(end.c)) {
          if (start.c == null) {
            start.c = 1;
          }
          if (!isNaN(parseInt(start.c, 10)) && start.c > end.c) {
            valid = false;
            messages.end_chapter_before_start = true;
          } else if (start.c === end.c && (end.v != null) && !isNaN(end.v)) {
            if (start.v == null) {
              start.v = 1;
            }
            if (!isNaN(parseInt(start.v, 10)) && start.v > end.v) {
              valid = false;
              messages.end_verse_before_start = true;
            }
          }
        }
        if ((end.c != null) && !isNaN(end.c)) {
          if (this.translations[translation].chapters[end.b][end.c - 1] == null) {
            if (this.translations[translation].chapters[end.b].length === 1) {
              messages.end_chapter_not_exist_in_single_chapter_book = 1;
            } else if (end.c > 0 && this.options.passage_existence_strategy.indexOf("c") >= 0) {
              messages.end_chapter_not_exist = this.translations[translation].chapters[end.b].length;
            }
          }
        }
        if ((end.v != null) && !isNaN(end.v)) {
          if (end.c == null) {
            end.c = this.translations[translation].chapters[end.b].length;
          }
          if (end.v > this.translations[translation].chapters[end.b][end.c - 1] && this.options.passage_existence_strategy.indexOf("v") >= 0) {
            messages.end_verse_not_exist = this.translations[translation].chapters[end.b][end.c - 1];
          }
        }
      } else {
        valid = false;
        messages.end_book_not_exist = true;
      }
      return [valid, messages];
    };

    bcv_passage.prototype.promote_book_to_translation = function(book, translation) {
      var base, base1;
      if ((base = this.translations)[translation] == null) {
        base[translation] = {};
      }
      if ((base1 = this.translations[translation]).chapters == null) {
        base1.chapters = {};
      }
      if (this.translations[translation].chapters[book] == null) {
        return this.translations[translation].chapters[book] = bcv_utils.shallow_clone_array(this.translations["default"].chapters[book]);
      }
    };

    return bcv_passage;

  })();

  bcv_utils = {
    shallow_clone: function(obj) {
      var key, out, val;
      if (obj == null) {
        return obj;
      }
      out = {};
      for (key in obj) {
        if (!hasProp.call(obj, key)) continue;
        val = obj[key];
        out[key] = val;
      }
      return out;
    },
    shallow_clone_array: function(arr) {
      var i, k, out, ref;
      if (arr == null) {
        return arr;
      }
      out = [];
      for (i = k = 0, ref = arr.length; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
        if (typeof arr[i] !== "undefined") {
          out[i] = arr[i];
        }
      }
      return out;
    }
  };

  bcv_parser.prototype.regexps.translations = /(?:(?:A(?:MP|SV)|KJV|TNIV|MSG|HCSB|RSV|N(?:A(?:B(?:RE)?|SB?)|I(?:RV|V)|KJV|LT|RSV)|E[RS]V|CE[BV]))\b/gi;

  bcv_parser.prototype.translations = {
    aliases: {
      ceb: {
        osis: "CEB",
        alias: "ceb"
      },
      kjv: {
        osis: "KJV",
        alias: "kjv"
      },
      nab: {
        osis: "NAB",
        alias: "nab"
      },
      nabre: {
        osis: "NABRE",
        alias: "nab"
      },
      nas: {
        osis: "NASB",
        alias: "default"
      },
      nirv: {
        osis: "NIRV",
        alias: "kjv"
      },
      niv: {
        osis: "NIV",
        alias: "kjv"
      },
      nkjv: {
        osis: "NKJV",
        alias: "nkjv"
      },
      nlt: {
        osis: "NLT",
        alias: "nlt"
      },
      nrsv: {
        osis: "NRSV",
        alias: "nrsv"
      },
      tniv: {
        osis: "TNIV",
        alias: "kjv"
      },
      "default": {
        osis: "",
        alias: "default"
      }
    },
    alternates: {},
    "default": {
      order: {
        "Gen": 1,
        "Exod": 2,
        "Lev": 3,
        "Num": 4,
        "Deut": 5,
        "Josh": 6,
        "Judg": 7,
        "Ruth": 8,
        "1Sam": 9,
        "2Sam": 10,
        "1Kgs": 11,
        "2Kgs": 12,
        "1Chr": 13,
        "2Chr": 14,
        "Ezra": 15,
        "Neh": 16,
        "Esth": 17,
        "Job": 18,
        "Ps": 19,
        "Prov": 20,
        "Eccl": 21,
        "Song": 22,
        "Isa": 23,
        "Jer": 24,
        "Lam": 25,
        "Ezek": 26,
        "Dan": 27,
        "Hos": 28,
        "Joel": 29,
        "Amos": 30,
        "Obad": 31,
        "Jonah": 32,
        "Mic": 33,
        "Nah": 34,
        "Hab": 35,
        "Zeph": 36,
        "Hag": 37,
        "Zech": 38,
        "Mal": 39,
        "Matt": 40,
        "Mark": 41,
        "Luke": 42,
        "John": 43,
        "Acts": 44,
        "Rom": 45,
        "1Cor": 46,
        "2Cor": 47,
        "Gal": 48,
        "Eph": 49,
        "Phil": 50,
        "Col": 51,
        "1Thess": 52,
        "2Thess": 53,
        "1Tim": 54,
        "2Tim": 55,
        "Titus": 56,
        "Phlm": 57,
        "Heb": 58,
        "Jas": 59,
        "1Pet": 60,
        "2Pet": 61,
        "1John": 62,
        "2John": 63,
        "3John": 64,
        "Jude": 65,
        "Rev": 66,
        "Tob": 67,
        "Jdt": 68,
        "GkEsth": 69,
        "Wis": 70,
        "Sir": 71,
        "Bar": 72,
        "PrAzar": 73,
        "Sus": 74,
        "Bel": 75,
        "SgThree": 76,
        "EpJer": 77,
        "1Macc": 78,
        "2Macc": 79,
        "3Macc": 80,
        "4Macc": 81,
        "1Esd": 82,
        "2Esd": 83,
        "PrMan": 84
      },
      chapters: {
        "Gen": [31, 25, 24, 26, 32, 22, 24, 22, 29, 32, 32, 20, 18, 24, 21, 16, 27, 33, 38, 18, 34, 24, 20, 67, 34, 35, 46, 22, 35, 43, 55, 32, 20, 31, 29, 43, 36, 30, 23, 23, 57, 38, 34, 34, 28, 34, 31, 22, 33, 26],
        "Exod": [22, 25, 22, 31, 23, 30, 25, 32, 35, 29, 10, 51, 22, 31, 27, 36, 16, 27, 25, 26, 36, 31, 33, 18, 40, 37, 21, 43, 46, 38, 18, 35, 23, 35, 35, 38, 29, 31, 43, 38],
        "Lev": [17, 16, 17, 35, 19, 30, 38, 36, 24, 20, 47, 8, 59, 57, 33, 34, 16, 30, 37, 27, 24, 33, 44, 23, 55, 46, 34],
        "Num": [54, 34, 51, 49, 31, 27, 89, 26, 23, 36, 35, 16, 33, 45, 41, 50, 13, 32, 22, 29, 35, 41, 30, 25, 18, 65, 23, 31, 40, 16, 54, 42, 56, 29, 34, 13],
        "Deut": [46, 37, 29, 49, 33, 25, 26, 20, 29, 22, 32, 32, 18, 29, 23, 22, 20, 22, 21, 20, 23, 30, 25, 22, 19, 19, 26, 68, 29, 20, 30, 52, 29, 12],
        "Josh": [18, 24, 17, 24, 15, 27, 26, 35, 27, 43, 23, 24, 33, 15, 63, 10, 18, 28, 51, 9, 45, 34, 16, 33],
        "Judg": [36, 23, 31, 24, 31, 40, 25, 35, 57, 18, 40, 15, 25, 20, 20, 31, 13, 31, 30, 48, 25],
        "Ruth": [22, 23, 18, 22],
        "1Sam": [28, 36, 21, 22, 12, 21, 17, 22, 27, 27, 15, 25, 23, 52, 35, 23, 58, 30, 24, 42, 15, 23, 29, 22, 44, 25, 12, 25, 11, 31, 13],
        "2Sam": [27, 32, 39, 12, 25, 23, 29, 18, 13, 19, 27, 31, 39, 33, 37, 23, 29, 33, 43, 26, 22, 51, 39, 25],
        "1Kgs": [53, 46, 28, 34, 18, 38, 51, 66, 28, 29, 43, 33, 34, 31, 34, 34, 24, 46, 21, 43, 29, 53],
        "2Kgs": [18, 25, 27, 44, 27, 33, 20, 29, 37, 36, 21, 21, 25, 29, 38, 20, 41, 37, 37, 21, 26, 20, 37, 20, 30],
        "1Chr": [54, 55, 24, 43, 26, 81, 40, 40, 44, 14, 47, 40, 14, 17, 29, 43, 27, 17, 19, 8, 30, 19, 32, 31, 31, 32, 34, 21, 30],
        "2Chr": [17, 18, 17, 22, 14, 42, 22, 18, 31, 19, 23, 16, 22, 15, 19, 14, 19, 34, 11, 37, 20, 12, 21, 27, 28, 23, 9, 27, 36, 27, 21, 33, 25, 33, 27, 23],
        "Ezra": [11, 70, 13, 24, 17, 22, 28, 36, 15, 44],
        "Neh": [11, 20, 32, 23, 19, 19, 73, 18, 38, 39, 36, 47, 31],
        "Esth": [22, 23, 15, 17, 14, 14, 10, 17, 32, 3],
        "Job": [22, 13, 26, 21, 27, 30, 21, 22, 35, 22, 20, 25, 28, 22, 35, 22, 16, 21, 29, 29, 34, 30, 17, 25, 6, 14, 23, 28, 25, 31, 40, 22, 33, 37, 16, 33, 24, 41, 30, 24, 34, 17],
        "Ps": [6, 12, 8, 8, 12, 10, 17, 9, 20, 18, 7, 8, 6, 7, 5, 11, 15, 50, 14, 9, 13, 31, 6, 10, 22, 12, 14, 9, 11, 12, 24, 11, 22, 22, 28, 12, 40, 22, 13, 17, 13, 11, 5, 26, 17, 11, 9, 14, 20, 23, 19, 9, 6, 7, 23, 13, 11, 11, 17, 12, 8, 12, 11, 10, 13, 20, 7, 35, 36, 5, 24, 20, 28, 23, 10, 12, 20, 72, 13, 19, 16, 8, 18, 12, 13, 17, 7, 18, 52, 17, 16, 15, 5, 23, 11, 13, 12, 9, 9, 5, 8, 28, 22, 35, 45, 48, 43, 13, 31, 7, 10, 10, 9, 8, 18, 19, 2, 29, 176, 7, 8, 9, 4, 8, 5, 6, 5, 6, 8, 8, 3, 18, 3, 3, 21, 26, 9, 8, 24, 13, 10, 7, 12, 15, 21, 10, 20, 14, 9, 6],
        "Prov": [33, 22, 35, 27, 23, 35, 27, 36, 18, 32, 31, 28, 25, 35, 33, 33, 28, 24, 29, 30, 31, 29, 35, 34, 28, 28, 27, 28, 27, 33, 31],
        "Eccl": [18, 26, 22, 16, 20, 12, 29, 17, 18, 20, 10, 14],
        "Song": [17, 17, 11, 16, 16, 13, 13, 14],
        "Isa": [31, 22, 26, 6, 30, 13, 25, 22, 21, 34, 16, 6, 22, 32, 9, 14, 14, 7, 25, 6, 17, 25, 18, 23, 12, 21, 13, 29, 24, 33, 9, 20, 24, 17, 10, 22, 38, 22, 8, 31, 29, 25, 28, 28, 25, 13, 15, 22, 26, 11, 23, 15, 12, 17, 13, 12, 21, 14, 21, 22, 11, 12, 19, 12, 25, 24],
        "Jer": [19, 37, 25, 31, 31, 30, 34, 22, 26, 25, 23, 17, 27, 22, 21, 21, 27, 23, 15, 18, 14, 30, 40, 10, 38, 24, 22, 17, 32, 24, 40, 44, 26, 22, 19, 32, 21, 28, 18, 16, 18, 22, 13, 30, 5, 28, 7, 47, 39, 46, 64, 34],
        "Lam": [22, 22, 66, 22, 22],
        "Ezek": [28, 10, 27, 17, 17, 14, 27, 18, 11, 22, 25, 28, 23, 23, 8, 63, 24, 32, 14, 49, 32, 31, 49, 27, 17, 21, 36, 26, 21, 26, 18, 32, 33, 31, 15, 38, 28, 23, 29, 49, 26, 20, 27, 31, 25, 24, 23, 35],
        "Dan": [21, 49, 30, 37, 31, 28, 28, 27, 27, 21, 45, 13],
        "Hos": [11, 23, 5, 19, 15, 11, 16, 14, 17, 15, 12, 14, 16, 9],
        "Joel": [20, 32, 21],
        "Amos": [15, 16, 15, 13, 27, 14, 17, 14, 15],
        "Obad": [21],
        "Jonah": [17, 10, 10, 11],
        "Mic": [16, 13, 12, 13, 15, 16, 20],
        "Nah": [15, 13, 19],
        "Hab": [17, 20, 19],
        "Zeph": [18, 15, 20],
        "Hag": [15, 23],
        "Zech": [21, 13, 10, 14, 11, 15, 14, 23, 17, 12, 17, 14, 9, 21],
        "Mal": [14, 17, 18, 6],
        "Matt": [25, 23, 17, 25, 48, 34, 29, 34, 38, 42, 30, 50, 58, 36, 39, 28, 27, 35, 30, 34, 46, 46, 39, 51, 46, 75, 66, 20],
        "Mark": [45, 28, 35, 41, 43, 56, 37, 38, 50, 52, 33, 44, 37, 72, 47, 20],
        "Luke": [80, 52, 38, 44, 39, 49, 50, 56, 62, 42, 54, 59, 35, 35, 32, 31, 37, 43, 48, 47, 38, 71, 56, 53],
        "John": [51, 25, 36, 54, 47, 71, 53, 59, 41, 42, 57, 50, 38, 31, 27, 33, 26, 40, 42, 31, 25],
        "Acts": [26, 47, 26, 37, 42, 15, 60, 40, 43, 48, 30, 25, 52, 28, 41, 40, 34, 28, 41, 38, 40, 30, 35, 27, 27, 32, 44, 31],
        "Rom": [32, 29, 31, 25, 21, 23, 25, 39, 33, 21, 36, 21, 14, 23, 33, 27],
        "1Cor": [31, 16, 23, 21, 13, 20, 40, 13, 27, 33, 34, 31, 13, 40, 58, 24],
        "2Cor": [24, 17, 18, 18, 21, 18, 16, 24, 15, 18, 33, 21, 14],
        "Gal": [24, 21, 29, 31, 26, 18],
        "Eph": [23, 22, 21, 32, 33, 24],
        "Phil": [30, 30, 21, 23],
        "Col": [29, 23, 25, 18],
        "1Thess": [10, 20, 13, 18, 28],
        "2Thess": [12, 17, 18],
        "1Tim": [20, 15, 16, 16, 25, 21],
        "2Tim": [18, 26, 17, 22],
        "Titus": [16, 15, 15],
        "Phlm": [25],
        "Heb": [14, 18, 19, 16, 14, 20, 28, 13, 28, 39, 40, 29, 25],
        "Jas": [27, 26, 18, 17, 20],
        "1Pet": [25, 25, 22, 19, 14],
        "2Pet": [21, 22, 18],
        "1John": [10, 29, 24, 21, 21],
        "2John": [13],
        "3John": [15],
        "Jude": [25],
        "Rev": [20, 29, 22, 11, 14, 17, 17, 13, 21, 11, 19, 17, 18, 20, 8, 21, 18, 24, 21, 15, 27, 21],
        "Tob": [22, 14, 17, 21, 22, 18, 16, 21, 6, 13, 18, 22, 17, 15],
        "Jdt": [16, 28, 10, 15, 24, 21, 32, 36, 14, 23, 23, 20, 20, 19, 14, 25],
        "GkEsth": [22, 23, 15, 17, 14, 14, 10, 17, 32, 13, 12, 6, 18, 19, 16, 24],
        "Wis": [16, 24, 19, 20, 23, 25, 30, 21, 18, 21, 26, 27, 19, 31, 19, 29, 21, 25, 22],
        "Sir": [30, 18, 31, 31, 15, 37, 36, 19, 18, 31, 34, 18, 26, 27, 20, 30, 32, 33, 30, 31, 28, 27, 27, 34, 26, 29, 30, 26, 28, 25, 31, 24, 33, 31, 26, 31, 31, 34, 35, 30, 22, 25, 33, 23, 26, 20, 25, 25, 16, 29, 30],
        "Bar": [22, 35, 37, 37, 9],
        "PrAzar": [68],
        "Sus": [64],
        "Bel": [42],
        "SgThree": [39],
        "EpJer": [73],
        "1Macc": [64, 70, 60, 61, 68, 63, 50, 32, 73, 89, 74, 53, 53, 49, 41, 24],
        "2Macc": [36, 32, 40, 50, 27, 31, 42, 36, 29, 38, 38, 45, 26, 46, 39],
        "3Macc": [29, 33, 30, 21, 51, 41, 23],
        "4Macc": [35, 24, 21, 26, 38, 35, 23, 29, 32, 21, 27, 19, 27, 20, 32, 25, 24, 24],
        "1Esd": [58, 30, 24, 63, 73, 34, 15, 96, 55],
        "2Esd": [40, 48, 36, 52, 56, 59, 70, 63, 47, 59, 46, 51, 58, 48, 63, 78],
        "PrMan": [15],
        "Ps151": [7]
      }
    },
    vulgate: {
      chapters: {
        "Ps": [6, 13, 9, 10, 13, 11, 18, 10, 39, 8, 9, 6, 7, 5, 10, 15, 51, 15, 10, 14, 32, 6, 10, 22, 12, 14, 9, 11, 13, 25, 11, 22, 23, 28, 13, 40, 23, 14, 18, 14, 12, 5, 26, 18, 12, 10, 15, 21, 23, 21, 11, 7, 9, 24, 13, 12, 12, 18, 14, 9, 13, 12, 11, 14, 20, 8, 36, 37, 6, 24, 20, 28, 23, 11, 13, 21, 72, 13, 20, 17, 8, 19, 13, 14, 17, 7, 19, 53, 17, 16, 16, 5, 23, 11, 13, 12, 9, 9, 5, 8, 29, 22, 35, 45, 48, 43, 14, 31, 7, 10, 10, 9, 26, 9, 19, 2, 29, 176, 7, 8, 9, 4, 8, 5, 6, 5, 6, 8, 8, 3, 18, 3, 3, 21, 26, 9, 8, 24, 14, 10, 8, 12, 15, 21, 10, 11, 20, 14, 9, 7]
      }
    },
    ceb: {
      chapters: {
        "2Cor": [24, 17, 18, 18, 21, 18, 16, 24, 15, 18, 33, 21, 13],
        "Rev": [20, 29, 22, 11, 14, 17, 17, 13, 21, 11, 19, 18, 18, 20, 8, 21, 18, 24, 21, 15, 27, 21],
        "Tob": [22, 14, 17, 21, 22, 18, 16, 21, 6, 13, 18, 22, 18, 15],
        "PrAzar": [67],
        "EpJer": [72],
        "1Esd": [55, 26, 24, 63, 71, 33, 15, 92, 55]
      }
    },
    kjv: {
      chapters: {
        "3John": [14]
      }
    },
    nab: {
      order: {
        "Gen": 1,
        "Exod": 2,
        "Lev": 3,
        "Num": 4,
        "Deut": 5,
        "Josh": 6,
        "Judg": 7,
        "Ruth": 8,
        "1Sam": 9,
        "2Sam": 10,
        "1Kgs": 11,
        "2Kgs": 12,
        "1Chr": 13,
        "2Chr": 14,
        "PrMan": 15,
        "Ezra": 16,
        "Neh": 17,
        "1Esd": 18,
        "2Esd": 19,
        "Tob": 20,
        "Jdt": 21,
        "Esth": 22,
        "GkEsth": 23,
        "1Macc": 24,
        "2Macc": 25,
        "3Macc": 26,
        "4Macc": 27,
        "Job": 28,
        "Ps": 29,
        "Prov": 30,
        "Eccl": 31,
        "Song": 32,
        "Wis": 33,
        "Sir": 34,
        "Isa": 35,
        "Jer": 36,
        "Lam": 37,
        "Bar": 38,
        "EpJer": 39,
        "Ezek": 40,
        "Dan": 41,
        "PrAzar": 42,
        "Sus": 43,
        "Bel": 44,
        "SgThree": 45,
        "Hos": 46,
        "Joel": 47,
        "Amos": 48,
        "Obad": 49,
        "Jonah": 50,
        "Mic": 51,
        "Nah": 52,
        "Hab": 53,
        "Zeph": 54,
        "Hag": 55,
        "Zech": 56,
        "Mal": 57,
        "Matt": 58,
        "Mark": 59,
        "Luke": 60,
        "John": 61,
        "Acts": 62,
        "Rom": 63,
        "1Cor": 64,
        "2Cor": 65,
        "Gal": 66,
        "Eph": 67,
        "Phil": 68,
        "Col": 69,
        "1Thess": 70,
        "2Thess": 71,
        "1Tim": 72,
        "2Tim": 73,
        "Titus": 74,
        "Phlm": 75,
        "Heb": 76,
        "Jas": 77,
        "1Pet": 78,
        "2Pet": 79,
        "1John": 80,
        "2John": 81,
        "3John": 82,
        "Jude": 83,
        "Rev": 84
      },
      chapters: {
        "Gen": [31, 25, 24, 26, 32, 22, 24, 22, 29, 32, 32, 20, 18, 24, 21, 16, 27, 33, 38, 18, 34, 24, 20, 67, 34, 35, 46, 22, 35, 43, 54, 33, 20, 31, 29, 43, 36, 30, 23, 23, 57, 38, 34, 34, 28, 34, 31, 22, 33, 26],
        "Exod": [22, 25, 22, 31, 23, 30, 29, 28, 35, 29, 10, 51, 22, 31, 27, 36, 16, 27, 25, 26, 37, 30, 33, 18, 40, 37, 21, 43, 46, 38, 18, 35, 23, 35, 35, 38, 29, 31, 43, 38],
        "Lev": [17, 16, 17, 35, 26, 23, 38, 36, 24, 20, 47, 8, 59, 57, 33, 34, 16, 30, 37, 27, 24, 33, 44, 23, 55, 46, 34],
        "Num": [54, 34, 51, 49, 31, 27, 89, 26, 23, 36, 35, 16, 33, 45, 41, 35, 28, 32, 22, 29, 35, 41, 30, 25, 19, 65, 23, 31, 39, 17, 54, 42, 56, 29, 34, 13],
        "Deut": [46, 37, 29, 49, 33, 25, 26, 20, 29, 22, 32, 31, 19, 29, 23, 22, 20, 22, 21, 20, 23, 29, 26, 22, 19, 19, 26, 69, 28, 20, 30, 52, 29, 12],
        "1Sam": [28, 36, 21, 22, 12, 21, 17, 22, 27, 27, 15, 25, 23, 52, 35, 23, 58, 30, 24, 42, 16, 23, 28, 23, 44, 25, 12, 25, 11, 31, 13],
        "2Sam": [27, 32, 39, 12, 25, 23, 29, 18, 13, 19, 27, 31, 39, 33, 37, 23, 29, 32, 44, 26, 22, 51, 39, 25],
        "1Kgs": [53, 46, 28, 20, 32, 38, 51, 66, 28, 29, 43, 33, 34, 31, 34, 34, 24, 46, 21, 43, 29, 54],
        "2Kgs": [18, 25, 27, 44, 27, 33, 20, 29, 37, 36, 20, 22, 25, 29, 38, 20, 41, 37, 37, 21, 26, 20, 37, 20, 30],
        "1Chr": [54, 55, 24, 43, 41, 66, 40, 40, 44, 14, 47, 41, 14, 17, 29, 43, 27, 17, 19, 8, 30, 19, 32, 31, 31, 32, 34, 21, 30],
        "2Chr": [18, 17, 17, 22, 14, 42, 22, 18, 31, 19, 23, 16, 23, 14, 19, 14, 19, 34, 11, 37, 20, 12, 21, 27, 28, 23, 9, 27, 36, 27, 21, 33, 25, 33, 27, 23],
        "Neh": [11, 20, 38, 17, 19, 19, 72, 18, 37, 40, 36, 47, 31],
        "Job": [22, 13, 26, 21, 27, 30, 21, 22, 35, 22, 20, 25, 28, 22, 35, 22, 16, 21, 29, 29, 34, 30, 17, 25, 6, 14, 23, 28, 25, 31, 40, 22, 33, 37, 16, 33, 24, 41, 30, 32, 26, 17],
        "Ps": [6, 11, 9, 9, 13, 11, 18, 10, 21, 18, 7, 9, 6, 7, 5, 11, 15, 51, 15, 10, 14, 32, 6, 10, 22, 12, 14, 9, 11, 13, 25, 11, 22, 23, 28, 13, 40, 23, 14, 18, 14, 12, 5, 27, 18, 12, 10, 15, 21, 23, 21, 11, 7, 9, 24, 14, 12, 12, 18, 14, 9, 13, 12, 11, 14, 20, 8, 36, 37, 6, 24, 20, 28, 23, 11, 13, 21, 72, 13, 20, 17, 8, 19, 13, 14, 17, 7, 19, 53, 17, 16, 16, 5, 23, 11, 13, 12, 9, 9, 5, 8, 29, 22, 35, 45, 48, 43, 14, 31, 7, 10, 10, 9, 8, 18, 19, 2, 29, 176, 7, 8, 9, 4, 8, 5, 6, 5, 6, 8, 8, 3, 18, 3, 3, 21, 26, 9, 8, 24, 14, 10, 8, 12, 15, 21, 10, 20, 14, 9, 6],
        "Eccl": [18, 26, 22, 17, 19, 12, 29, 17, 18, 20, 10, 14],
        "Song": [17, 17, 11, 16, 16, 12, 14, 14],
        "Isa": [31, 22, 26, 6, 30, 13, 25, 23, 20, 34, 16, 6, 22, 32, 9, 14, 14, 7, 25, 6, 17, 25, 18, 23, 12, 21, 13, 29, 24, 33, 9, 20, 24, 17, 10, 22, 38, 22, 8, 31, 29, 25, 28, 28, 25, 13, 15, 22, 26, 11, 23, 15, 12, 17, 13, 12, 21, 14, 21, 22, 11, 12, 19, 11, 25, 24],
        "Jer": [19, 37, 25, 31, 31, 30, 34, 23, 25, 25, 23, 17, 27, 22, 21, 21, 27, 23, 15, 18, 14, 30, 40, 10, 38, 24, 22, 17, 32, 24, 40, 44, 26, 22, 19, 32, 21, 28, 18, 16, 18, 22, 13, 30, 5, 28, 7, 47, 39, 46, 64, 34],
        "Ezek": [28, 10, 27, 17, 17, 14, 27, 18, 11, 22, 25, 28, 23, 23, 8, 63, 24, 32, 14, 44, 37, 31, 49, 27, 17, 21, 36, 26, 21, 26, 18, 32, 33, 31, 15, 38, 28, 23, 29, 49, 26, 20, 27, 31, 25, 24, 23, 35],
        "Dan": [21, 49, 100, 34, 30, 29, 28, 27, 27, 21, 45, 13, 64, 42],
        "Hos": [9, 25, 5, 19, 15, 11, 16, 14, 17, 15, 11, 15, 15, 10],
        "Joel": [20, 27, 5, 21],
        "Jonah": [16, 11, 10, 11],
        "Mic": [16, 13, 12, 14, 14, 16, 20],
        "Nah": [14, 14, 19],
        "Zech": [17, 17, 10, 14, 11, 15, 14, 23, 17, 12, 17, 14, 9, 21],
        "Mal": [14, 17, 24],
        "Acts": [26, 47, 26, 37, 42, 15, 60, 40, 43, 49, 30, 25, 52, 28, 41, 40, 34, 28, 40, 38, 40, 30, 35, 27, 27, 32, 44, 31],
        "2Cor": [24, 17, 18, 18, 21, 18, 16, 24, 15, 18, 33, 21, 13],
        "Rev": [20, 29, 22, 11, 14, 17, 17, 13, 21, 11, 19, 18, 18, 20, 8, 21, 18, 24, 21, 15, 27, 21],
        "Tob": [22, 14, 17, 21, 22, 18, 17, 21, 6, 13, 18, 22, 18, 15],
        "Sir": [30, 18, 31, 31, 15, 37, 36, 19, 18, 31, 34, 18, 26, 27, 20, 30, 32, 33, 30, 31, 28, 27, 27, 33, 26, 29, 30, 26, 28, 25, 31, 24, 33, 31, 26, 31, 31, 34, 35, 30, 22, 25, 33, 23, 26, 20, 25, 25, 16, 29, 30],
        "Bar": [22, 35, 38, 37, 9, 72],
        "2Macc": [36, 32, 40, 50, 27, 31, 42, 36, 29, 38, 38, 46, 26, 46, 39]
      }
    },
    nlt: {
      chapters: {
        "Rev": [20, 29, 22, 11, 14, 17, 17, 13, 21, 11, 19, 18, 18, 20, 8, 21, 18, 24, 21, 15, 27, 21]
      }
    },
    nrsv: {
      chapters: {
        "2Cor": [24, 17, 18, 18, 21, 18, 16, 24, 15, 18, 33, 21, 13],
        "Rev": [20, 29, 22, 11, 14, 17, 17, 13, 21, 11, 19, 18, 18, 20, 8, 21, 18, 24, 21, 15, 27, 21]
      }
    }
  };

  bcv_parser.prototype.regexps.space = "[\\s\\xa0]";

  bcv_parser.prototype.regexps.escaped_passage = RegExp("(?:^|[^\\x1f\\x1e\\dA-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])((?:(?:ch(?:apters?|a?pts?\\.?|a?p?s?\\.?)?\\s*\\d+\\s*(?:[\\u2013\\u2014\\-]|through|thru|to)\\s*\\d+\\s*(?:from|of|in)(?:\\s+the\\s+book\\s+of)?\\s*)|(?:ch(?:apters?|a?pts?\\.?|a?p?s?\\.?)?\\s*\\d+\\s*(?:from|of|in)(?:\\s+the\\s+book\\s+of)?\\s*)|(?:\\d+(?:th|nd|st)\\s*ch(?:apter|a?pt\\.?|a?p?\\.?)?\\s*(?:from|of|in)(?:\\s+the\\s+book\\s+of)?\\s*))?\\x1f(\\d+)(?:/\\d+)?\\x1f(?:/\\d+\\x1f|[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014]|title(?![a-z])|see" + bcv_parser.prototype.regexps.space + "+also|ff(?![a-z0-9])|f(?![a-z0-9])|chapters|chapter|through|compare|chapts|verses|chpts|chapt|chaps|verse|chap|thru|also|chp|chs|cha|and|see|ver|vss|ch|to|cf|vs|vv|v|[a-e](?!\\w)|$)+)", "gi");

  bcv_parser.prototype.regexps.match_end_split = /\d\W*title|\d\W*(?:ff(?![a-z0-9])|f(?![a-z0-9]))(?:[\s\xa0*]*\.)?|\d[\s\xa0*]*[a-e](?!\w)|\x1e(?:[\s\xa0*]*[)\]\uff09])?|[\d\x1f]/gi;

  bcv_parser.prototype.regexps.control = /[\x1e\x1f]/g;

  bcv_parser.prototype.regexps.pre_book = "[^A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ]";

  bcv_parser.prototype.regexps.first = "(?:1st|1|I|First)\\.?" + bcv_parser.prototype.regexps.space + "*";

  bcv_parser.prototype.regexps.second = "(?:2nd|2|II|Second)\\.?" + bcv_parser.prototype.regexps.space + "*";

  bcv_parser.prototype.regexps.third = "(?:3rd|3|III|Third)\\.?" + bcv_parser.prototype.regexps.space + "*";

  bcv_parser.prototype.regexps.range_and = "(?:[&\u2013\u2014-]|(?:and|compare|cf|see" + bcv_parser.prototype.regexps.space + "+also|also|see)|(?:through|thru|to))";

  bcv_parser.prototype.regexps.range_only = "(?:[\u2013\u2014-]|(?:through|thru|to))";

  bcv_parser.prototype.regexps.get_books = function(include_apocrypha, case_sensitive) {
    var book, books, k, len, out;
    books = [
      {
        osis: ["Ps"],
        apocrypha: true,
        extra: "2",
        regexp: /(\b)(Ps151)(?=\.1)/g
      }, {
        osis: ["Gen"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])((?:E(?:nsimmainen[\s\xa0]*Mooseksen[\s\xa0]*kirja|erste[\s\xa0]*Mozes|lso[\s\xa0]*Mozes|rste[\s\xa0]*(?:Buch[\s\xa0]*Mose|Mose))|P(?:urwaning[\s\xa0]*Dumadi|rv(?:ni[\s\xa0]*(?:kniha[\s\xa0]*Mojzisova|Mojzisova)|a[\s\xa0]*(?:kniha[\s\xa0]*Mojzisova|Mojzisova)|y[\s\xa0]*(?:list[\s\xa0]*Mojzisova|Mojzisova))|ierwsz(?:[aey][\s\xa0]*(?:Ks(?:ieg(?:[ai][\s\xa0]*Mo(?:jzeszowa|yzeszowe))|\.[\s\xa0]*Mo(?:jzeszowa|yzeszowe)|[\s\xa0]*Mo(?:jzeszowa|yzeszowe))|Mojz(?:eszowa)?))|ost(?:anak)?)|M(?:ozes[\s\xa0]*I|wa(?:nzo)?)|F(?:orsta[\s\xa0]*Mosebok(?:en)?|yrsta[\s\xa0]*(?:bok[\s\xa0]*Mose|Mosebok)|acerea)|I(?:\.[\s\xa0]*(?:kniha[\s\xa0]*Mojzisova|Ks(?:ieg(?:[ai][\s\xa0]*Mo(?:jzeszowa|yzeszowe))|\.[\s\xa0]*Mo(?:jzeszowa|yzeszowe)|[\s\xa0]*Mo(?:jzeszowa|yzeszowe))|Mo(?:oseksen[\s\xa0]*kirja|zes|jz(?:eszowa|isova)?|s(?:ebok)?))|[\s\xa0]*(?:kniha[\s\xa0]*Mojzisova|Ks(?:ieg(?:[ai][\s\xa0]*Mo(?:jzeszowa|yzeszowe))|\.[\s\xa0]*Mo(?:jzeszowa|yzeszowe)|[\s\xa0]*Mo(?:jzeszowa|yzeszowe))|Mo(?:oseksen[\s\xa0]*kirja|zes|j(?:z(?:eszowa|isova)?)?|s(?:ebok)?)))|1(?:e(?:\.[\s\xa0]*Mozes|[\s\xa0]*Mozes)|\.[\s\xa0]*(?:kniha[\s\xa0]*Mojzisova|Ks(?:ieg(?:[ai][\s\xa0]*Mo(?:jzeszowa|yzeszowe))|\.[\s\xa0]*Mo(?:jzeszowa|yzeszowe)|[\s\xa0]*Mo(?:jzeszowa|yzeszowe))|Buch[\s\xa0]*Mose|Mo(?:oseksen[\s\xa0]*kirja|zes|jz(?:eszowa|isova)?|s(?:e(?:bo(?:g|k(?:en)?))?)?)?)|[\s\xa0]*(?:Ks(?:ieg(?:[ai][\s\xa0]*Mo(?:jzeszowa|yzeszowe))|\.[\s\xa0]*Mo(?:jzeszowa|yzeszowe)|[\s\xa0]*Mo(?:jzeszowa|yzeszowe))|k(?:niha[\s\xa0]*Mojzisova|\.[\s\xa0]*Mojzisova|[\s\xa0]*Mojzisova)|Buch[\s\xa0]*Mose|M(?:o(?:os(?:eksen[\s\xa0]*kirja)?|j(?:z(?:eszowa|isova)?)?|s(?:e(?:bo(?:g|k(?:en)?))?)?|z(?:es)?)?|z)))|Henesis|G(?:e(?:n(?:i(?:[ei]s(?:[eiu]s)|s[eiu]s)|n(?:i(?:[ei]s(?:[eiu]s)|s[eiu]s)|e(?:es[eiu]s|s[eiu]s|is(?:[eiu]s)?)|sis)|e(?:es[eiu]s|is(?:[eiu]s)?|s(?:us|[ai]|es?)|z(?:is|a))|sis)?)?|n)|R(?:odz|dz)|Doomettaabaa|Liber[\s\xa0]*Genesis|B(?:eresjiet|ilowgii|uttja)|liv[\s\xa0]*Konmansman[\s\xa0]*an|Ter(?:emtes)?|K(?:itabu[\s\xa0]*cha[\s\xa0]*Kwanza[\s\xa0]*cha[\s\xa0]*Musa|n(?:jiga[\s\xa0]*Postanka|iha[\s\xa0]*(?:stvorenia|povodu))|s(?:ieg[ai][\s\xa0]*Rodzaju|\.[\s\xa0]*Rodzaju|[\s\xa0]*Rodzaju)|\.[\s\xa0]*(?:stvorenia|povodu)|[\s\xa0]*(?:stvorenia|povodu))|Zan(?:afilla)?|Atiyakamam|utpat(?:ti(?:ko[\s\xa0]*pustak)?)?|Utpaati|Jen(?:ez)?)|(?:Ensimmainen[\s\xa0]*Mooseksen|(?:[1I](?:\.[\s\xa0]*Mooseksen|[\s\xa0]*Mooseksen))|Konmansman|utpattiko|Genesis))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["Exod"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])((?:Onnur[\s\xa0]*(?:bok[\s\xa0]*Mose|Mosebok)|Nirgaman|An(?:nen[\s\xa0]*Mosebok|d(?:en[\s\xa0]*Mos(?:ebog)?|r(?:a[\s\xa0]*Mosebok(?:en)?|e[\s\xa0]*Mos(?:ebok)?)))|I(?:esirea|I(?:\.[\s\xa0]*(?:kniha[\s\xa0]*Mojzisova|Ks(?:ieg[ai][\s\xa0]*Mojzeszowa|\.[\s\xa0]*Mojzeszowa|[\s\xa0]*Mojzeszowa)|Mo(?:oseksen[\s\xa0]*kirja|zes|jz(?:eszowa|isova)?|s(?:ebok)?))|[\s\xa0]*(?:kniha[\s\xa0]*Mojzisova|Ks(?:ieg[ai][\s\xa0]*Mojzeszowa|\.[\s\xa0]*Mojzeszowa|[\s\xa0]*Mojzeszowa)|Mo(?:oseksen[\s\xa0]*kirja|zes|j(?:z(?:eszowa|isova)?)?|s(?:ebok)?)))|zl(?:azak)?)|T(?:oinen[\s\xa0]*Mooseksen[\s\xa0]*kirja|weede[\s\xa0]*Mozes)|M(?:asodik[\s\xa0]*Mozes|ozes[\s\xa0]*II)|Bax(?:niintii)?|Sjemot|K(?:njiga[\s\xa0]*Izlaska|s(?:ieg[ai][\s\xa0]*Wyjscia|\.[\s\xa0]*Wyjscia|[\s\xa0]*Wyjscia)|ess(?:aabaa)?|i(?:tabu[\s\xa0]*cha[\s\xa0]*Pili[\s\xa0]*cha[\s\xa0]*Musa|v(?:onulas)?)|ut(?:oka)?)|nirgam|Vyhid|Pangentasan|D(?:ru(?:h(?:a[\s\xa0]*(?:kniha[\s\xa0]*Mojzisova|Mojzisova)|y[\s\xa0]*(?:kniha[\s\xa0]*Mojzisova|list[\s\xa0]*Mojzisova|Mojzisova))|g[ai][\s\xa0]*(?:Ks(?:ieg(?:[ai][\s\xa0]*Mojzeszowa|\.[\s\xa0]*Mojzeszowa|[\s\xa0]*Mojzeszowa)|Mojz(?:eszowa)?)))|al(?:ja)?)|liv[\s\xa0]*delivrans[\s\xa0]*lan|2(?:e(?:\.[\s\xa0]*Mozes|[\s\xa0]*Mozes)|\.[\s\xa0]*(?:kniha[\s\xa0]*Mojzisova|Ks(?:ieg[ai][\s\xa0]*Mojzeszowa|\.[\s\xa0]*Mojzeszowa|[\s\xa0]*Mojzeszowa)|Buch[\s\xa0]*Mose|Mo(?:oseksen[\s\xa0]*kirja|zes|jz(?:eszowa|isova)?|s(?:e(?:bo(?:g|k(?:en)?))?)?)?)|[\s\xa0]*(?:Ks(?:ieg[ai][\s\xa0]*Mojzeszowa|\.[\s\xa0]*Mojzeszowa|[\s\xa0]*Mojzeszowa)|k(?:niha[\s\xa0]*Mojzisova|\.[\s\xa0]*Mojzisova|[\s\xa0]*Mojzisova)|Buch[\s\xa0]*Mose|M(?:o(?:os(?:eksen[\s\xa0]*kirja)?|j(?:z(?:eszowa|isova)?)?|s(?:e(?:bo(?:g|k(?:en)?))?)?|z(?:es)?)?|z)))|Liber[\s\xa0]*Exodus|Yattirakamam|Zweite[\s\xa0]*(?:Buch[\s\xa0]*Mose|Mose)|W(?:yj|j)|E(?:sodo|cs(?:odus)?|gz(?:od(?:us)?)?|ks(?:od[io])?|x(?:d|o(?:d(?:is|ul|[eos])?)?)?))|Drug(?:[ai][\s\xa0]*(?:Ks(?:\.[\s\xa0]*Mojzeszowa|[\s\xa0]*Mojzeszowa)|Mojz(?:eszowa)?))|(?:Toinen[\s\xa0]*Mooseksen|II(?:\.[\s\xa0]*Mooseksen|[\s\xa0]*Mooseksen)|2(?:\.[\s\xa0]*Mooseksen|[\s\xa0]*Mooseksen)|Delivrans|Exodus))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["Bel"],
        apocrypha: true,
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Danieli[\\s\\xa0]*na[\\s\\xa0]*Makuhani[\\s\\xa0]*wa[\\s\\xa0]*Beli|Opowiadaniem[\\s\\xa0]*o[\\s\\xa0]*Belu[\\s\\xa0]*i[\\s\\xa0]*wezu|Histoia[\\s\\xa0]*Beli[\\s\\xa0]*et[\\s\\xa0]*draconis|Si[\\s\\xa0]*Bel[\\s\\xa0]*at[\\s\\xa0]*ang[\\s\\xa0]*Dragon|Istoria[\\s\\xa0]*(?:omorarii[\\s\\xa0]*balaurului[\\s\\xa0]*si[\\s\\xa0]*a[\\s\\xa0]*sfaramarii[\\s\\xa0]*lui[\\s\\xa0]*Bel|Balaurului)|B(?:aal[\\s\\xa0]*es[\\s\\xa0]*a[\\s\\xa0]*sarkany|el(?:a[\\s\\xa0]*i[\\s\\xa0]*weza|[\\s\\xa0]*(?:und[\\s\\xa0]*Vom[\\s\\xa0]*Drachen|ja[\\s\\xa0]*lohikaarme|si[\\s\\xa0]*dragonul|y[\\s\\xa0]*el[\\s\\xa0]*(?:Serpiente|Dragon)|e(?:s[\\s\\xa0]*a[\\s\\xa0]*sarkany|n[\\s\\xa0]*de[\\s\\xa0]*draak|t[\\s\\xa0]*(?:le[\\s\\xa0]*(?:Serpent|Dragon)|draconis)|[\\s\\xa0]*(?:il[\\s\\xa0]*Drago|o[\\s\\xa0]*Dragao))|o(?:ch[\\s\\xa0]*Ormguden|g[\\s\\xa0]*dr(?:ekinn|a(?:gen[\\s\\xa0]*i[\\s\\xa0]*Babylon|ken)))|&[\\s\\xa0]*(?:the[\\s\\xa0]*(?:Dragon|S(?:erpent|nake))|Dragon|S(?:erpent|nake))|a(?:['’]r[\\s\\xa0]*Ddraig|nd[\\s\\xa0]*(?:the[\\s\\xa0]*(?:Dragon|S(?:erpent|nake))|Dragon|S(?:erpent|nake))|[\\s\\xa0]*drak)))))|Bel(?:[\\s\\xa0]*(?:at[\\s\\xa0]*ang[\\s\\xa0]*Dragon|e(?:t[\\s\\xa0]*le[\\s\\xa0]*(?:serpent|dragon)|[\\s\\xa0]*o[\\s\\xa0]*dragao)|og[\\s\\xa0]*Dragen))?)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Phlm"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Epistula(?:m[\\s\\xa0]*ad[\\s\\xa0]*Philemonem|[\\s\\xa0]*ad[\\s\\xa0]*Philemonem)|Waraka[\\s\\xa0]*kwa[\\s\\xa0]*Filemoni|B(?:arua[\\s\\xa0]*kwa[\\s\\xa0]*Filemoni|re(?:f[\\s\\xa0]*Pals[\\s\\xa0]*til[\\s\\xa0]*Filemons|vet[\\s\\xa0]*til(?:l[\\s\\xa0]*Filemon|[\\s\\xa0]*Filemon)))|L(?:ettera[\\s\\xa0]*a[\\s\\xa0]*Filemone|ist[\\s\\xa0]*(?:do[\\s\\xa0]*Filemona|Filemonovi))|K(?:irje[\\s\\xa0]*Filemonille|a(?:ng[\\s\\xa0]*Filemon|y[\\s\\xa0]*Filemon))|P(?:oslannja[\\s\\xa0]*apostola[\\s\\xa0]*Pavla[\\s\\xa0]*do[\\s\\xa0]*Fylymona|a(?:vlova[\\s\\xa0]*poslanica[\\s\\xa0]*Filemonu|ulus['’][\\s\\xa0]*Brev[\\s\\xa0]*til[\\s\\xa0]*Filemon)|il(?:emonukku[\\s\\xa0]*Elutiya[\\s\\xa0]*Nirupam|imoona|m)|h(?:ile(?:m(?:on(?:hoz)?)?)?|l(?:[ei]mon|mn?)|mn?))|F(?:lmn?|i(?:l(?:em(?:o(?:n(?:brevet|hoz|it)|m))?|im(?:on)?|m))?|mn?))|(?:ad[\\s\\xa0]*Philemonem|P(?:aulus’[\\s\\xa0]*brev[\\s\\xa0]*til[\\s\\xa0]*Filemon|oslanica[\\s\\xa0]*Filemonu|ilemonukku|hilemonem)|Filemon(?:ovi|i(?:lle)?|[aeu])?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Lev"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])(le(?:viharuko[\s\xa0]*pustak|wiy)|(?:K(?:itabu[\s\xa0]*cha[\s\xa0]*Tatu[\s\xa0]*cha[\s\xa0]*Musa|olmas[\s\xa0]*Mooseksen[\s\xa0]*kirja|a(?:imaman|pl)|pl)|D(?:erde[\s\xa0]*Mozes|ritte[\s\xa0]*(?:Buch[\s\xa0]*Mose|Mose))|L(?:i(?:ber[\s\xa0]*Leviticus|v[ei]t(?:(?:[ei]cus|cus)))|a(?:a(?:ivyavyavastha|w(?:iyiintii)?)|w)|e(?:b(?:iti(?:co|k(?:us|o)))?|f(?:iticus)?|v(?:et(?:[ei]cus|cus)|yt|i(?:yarakamam|t(?:ski[\s\xa0]*zakonik|ecus|cus|ak|i(?:que|c(?:u(?:si|l)|os?)?|k(?:et|us?)?)))?)?)?|v)|Harmadik[\s\xa0]*Mozes|Vajikra|liv[\s\xa0]*Prensip[\s\xa0]*lavi[\s\xa0]*nan[\s\xa0]*Bondye|W(?:a(?:jikra|l)|og(?:aabaa)?)|M(?:ambo[\s\xa0]*ya[\s\xa0]*Walawi|ozes[\s\xa0]*III)|3(?:e(?:\.[\s\xa0]*Mo(?:sebok(?:en)?|zes)|[\s\xa0]*Mo(?:sebok(?:en)?|zes))|\.[\s\xa0]*(?:kniha[\s\xa0]*Mojzisova|Ks(?:ieg[ai][\s\xa0]*Mojzeszowa|\.[\s\xa0]*Mojzeszowa|[\s\xa0]*Mojzeszowa)|Buch[\s\xa0]*Mose|Mo(?:oseksen[\s\xa0]*kirja|zes|jz(?:eszowa|isova)?|s(?:e(?:bo(?:g|k(?:en)?))?)?)?)|[\s\xa0]*(?:Ks(?:ieg[ai][\s\xa0]*Mojzeszowa|\.[\s\xa0]*Mojzeszowa|[\s\xa0]*Mojzeszowa)|k(?:niha[\s\xa0]*Mojzisova|\.[\s\xa0]*Mojzisova|[\s\xa0]*Mojzisova)|Buch[\s\xa0]*Mose|M(?:o(?:os(?:eksen[\s\xa0]*kirja)?|j(?:z(?:eszowa|isova)?)?|s(?:e(?:bo(?:g|k(?:en)?))?)?|z(?:es)?)?|z)))|III(?:\.[\s\xa0]*(?:kniha[\s\xa0]*Mojzisova|Ks(?:ieg[ai][\s\xa0]*Mojzeszowa|\.[\s\xa0]*Mojzeszowa|[\s\xa0]*Mojzeszowa)|Mo(?:oseksen[\s\xa0]*kirja|zes|jz(?:eszowa|isova)?|s(?:ebok)?))|[\s\xa0]*(?:kniha[\s\xa0]*Mojzisova|Ks(?:ieg[ai][\s\xa0]*Mojzeszowa|\.[\s\xa0]*Mojzeszowa|[\s\xa0]*Mojzeszowa)|Mo(?:oseksen[\s\xa0]*kirja|zes|j(?:z(?:eszowa|isova)?)?|s(?:ebok)?)))|Tr(?:zeci(?:a[\s\xa0]*(?:Ks(?:ieg[ai][\s\xa0]*Mojzeszowa|\.[\s\xa0]*Mojzeszowa|[\s\xa0]*Mojzeszowa)|Mojz(?:eszowa)?)|[\s\xa0]*(?:Ks(?:ieg[ai][\s\xa0]*Mojzeszowa|\.[\s\xa0]*Mojzeszowa|[\s\xa0]*Mojzeszowa)|Mojz(?:eszowa)?))|e(?:ti(?:a[\s\xa0]*(?:kniha[\s\xa0]*Mojzisova|Mojzisova)|[\s\xa0]*(?:kniha[\s\xa0]*Mojzisova|Mojzisova))|dje[\s\xa0]*Mos(?:ebo(?:g|k(?:en)?))?)))|(?:Kolmas[\s\xa0]*Mooseksen|III(?:\.[\s\xa0]*Mooseksen|[\s\xa0]*Mooseksen)|3(?:\.[\s\xa0]*Mooseksen|[\s\xa0]*Mooseksen)|leviharuko|Leviticus|Walawi))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["2Thess"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])(2[\s\xa0]*Tessalonikerbrevet|2(?:\.[\s\xa0]*Tessalonikerbrevet|[\s\xa0]*tessalonikerbrev)|(?:D(?:e(?:uxieme(?:s[\s\xa0]*Thes(?:saloniciens|aloniciens)|[\s\xa0]*Thes(?:saloniciens|aloniciens))|zyem[\s\xa0]*Tesalonik(?:yen)?)|ru(?:g(?:a[\s\xa0]*(?:Solunjanima[\s\xa0]*Poslanica|List[\s\xa0]*do[\s\xa0]*Tesaloniczan|Tesalonic(?:ensow|zan))|i[\s\xa0]*(?:List[\s\xa0]*do[\s\xa0]*Tesaloniczan|Tesalonic(?:ensow|zan)))|h(?:e[\s\xa0]*poslannja[\s\xa0]*apostola[\s\xa0]*Pavla[\s\xa0]*do[\s\xa0]*solunjan|a[\s\xa0]*(?:kniha[\s\xa0]*(?:Tesalonic(?:anom|kym)|Solun(?:canom|skym))|list[\s\xa0]*(?:Tesalonickym|Solunskym)|Sol(?:un(?:canom|skym))?|Te(?:s(?:salonicenskym|alonic(?:anom|kym)))?)|y[\s\xa0]*(?:list[\s\xa0]*(?:Tesalonic(?:anom|kym)|Solun(?:canom|skym))|Sol(?:un(?:canom|skym))?|Te(?:s(?:salonicenskym|alonic(?:anom|kym)))?))))|Zweite[\s\xa0]*Thessalonicher|Se(?:gund(?:a[\s\xa0]*Tessalonicenses|o[\s\xa0]*Tes(?:salonicenses|aloni[cs]enses?))|cond(?:a[\s\xa0]*(?:lettera[\s\xa0]*ai[\s\xa0]*Tessalonicesi|Tessalonicesi)|o[\s\xa0]*Tessalonicesi|[\s\xa0]*Th(?:es(?:al(?:lonians|oni(?:[ci]ans|ons|ans?|ns))|elon(?:ains|ians?)|olonians?|s(?:al(?:lonians|on(?:ciens|eans|o(?:ians|ans)|a(?:i(?:ans|ns?)|ns)|i(?:c(?:i[ae]ns|ans)|ions|ens|(?:[ao](?:ans|ns?))|ns)))|elon(?:ains|ians?)|oloni(?:ans?|ns)|s)?)?|s(?:ss?)?)?))|And(?:e(?:t[\s\xa0]*Thessalonikerbrev|n[\s\xa0]*T(?:essalonikerne|hess(?:alonikerbrev)?))|r(?:a[\s\xa0]*T(?:hessalonikerbrevet|essalonikerbrevet)|e[\s\xa0]*(?:tessalonikerbrev|Tess(?:aloniker(?:ne)?)?)))|Epistula[\s\xa0]*(?:II[\s\xa0]*ad[\s\xa0]*Thessalonicenses|ad[\s\xa0]*Thessalonicenses[\s\xa0]*II)|Barua[\s\xa0]*ya[\s\xa0]*Pili[\s\xa0]*kwa[\s\xa0]*Wathesalonike|Masodik[\s\xa0]*T(?:hessz(?:alonika(?:iakhoz)?)?|essz(?:alonika(?:iakhoz)?)?)|P(?:a(?:ulus(?:'[\s\xa0]*Andet[\s\xa0]*Brev[\s\xa0]*til[\s\xa0]*Thessalonikerne|’[\s\xa0]*(?:Andet[\s\xa0]*Brev[\s\xa0]*til[\s\xa0]*Thessalonikerne|andre[\s\xa0]*brev[\s\xa0]*til[\s\xa0]*tessalonikerne))|vlova[\s\xa0]*druga[\s\xa0]*poslanica[\s\xa0]*Solunjanima)|ili[\s\xa0]*(?:Wathesalonike|Th(?:es?)?))|2(?:a(?:\.[\s\xa0]*Tessalonicenses|[\s\xa0]*Tessalonicenses)|d(?:\.[\s\xa0]*Thes(?:saloniciens|aloniciens)|e(?:\.[\s\xa0]*Thes(?:saloniciens|aloniciens)|[\s\xa0]*Thes(?:saloniciens|aloniciens))|[\s\xa0]*Thes(?:saloniciens|aloniciens))|o(?:\.[\s\xa0]*Tes(?:salonicenses|aloni[cs]enses?)|[\s\xa0]*Tes(?:salonicenses|aloni[cs]enses?))|Thess|e(?:me(?:\.[\s\xa0]*Thes(?:saloniciens|aloniciens)|[\s\xa0]*Thes(?:saloniciens|aloniciens))|\.[\s\xa0]*T(?:hes(?:aloniciens|s(?:alonic(?:enzen|iens))?)|es(?:s(?:alonicenzen)?)?)|[\s\xa0]*T(?:hes(?:aloniciens|s(?:alonic(?:enzen|iens))?)|es(?:s(?:alonicenzen)?)?))|nd(?:\.[\s\xa0]*Th(?:es(?:al(?:lonians|oni(?:[ci]ans|ons|ans?|ns))|elon(?:ains|ians?)|olonians?|s(?:al(?:lonians|on(?:ciens|eans|o(?:ians|ans)|a(?:i(?:ans|ns?)|ns)|i(?:c(?:i[ae]ns|ans)|ions|ens|(?:[ao](?:ans|ns?))|ns)))|elon(?:ains|ians?)|oloni(?:ans?|ns)|s)?)?|s(?:ss?)?)?|[\s\xa0]*Th(?:es(?:al(?:lonians|oni(?:[ci]ans|ons|ans?|ns))|elon(?:ains|ians?)|olonians?|s(?:al(?:lonians|on(?:ciens|eans|o(?:ians|ans)|a(?:i(?:ans|ns?)|ns)|i(?:c(?:i[ae]ns|ans)|ions|ens|(?:[ao](?:ans|ns?))|ns)))|elon(?:ains|ians?)|oloni(?:ans?|ns)|s)?)?|s(?:ss?)?)?)|\.(?:o(?:\.[\s\xa0]*Tesaloni[cs]enses?|[\s\xa0]*Tesaloni[cs]enses?)|[\s\xa0]*(?:Kirje[\s\xa0]*tessalonikalaisille|List[\s\xa0]*do[\s\xa0]*Tesaloniczan|Mga[\s\xa0]*T(?:aga(?:[\s\xa0]*Tesaloni[ck]a|-?(?:[\s\xa0]*Tesaloni[ck]a|Tesaloni[ck]a))|esaloni[cs]ense)|tessalonikerbrev|list[\s\xa0]*(?:Tesalonickym|Solunskym)|Wathesalonike|S(?:elanikasve|ol(?:un(?:janima[\s\xa0]*Poslanica|canom|skym))?)|T(?:aga-?Tesaloni[ck]a|e(?:s(?:aloni(?:senses?|ika|c(?:en(?:s(?:ow|es?)|i)|kym|zan|a(?:nom)?)|k(?:yen|a)?)|s(?:aloni(?:ce(?:n(?:s(?:kym|es)|zen)|si)|k(?:alais(?:kirje|ille)|er(?:ne)?))|z(?:alonika(?:iakhoz)?)?)?)?)?|h(?:aissaluneekiyon|e(?:s(?:al(?:lonians|oni(?:kasve|c(?:iens|ans)|ians|ons|a(?:id|ns?)|ns))|elon(?:ains|ians?)|olonians?|s(?:al(?:lonians|on(?:ciens|eans|o(?:ians|ans)|a(?:i(?:ans|ns?)|ns)|i(?:kerbrev(?:et)?|c(?:en(?:ses|zen)|i[ae]ns|ans|her)|ions|ens|a(?:ans|id|ns?)|ns|o(?:ans|ns?))))|elon(?:ains|ians?)|oloni(?:ans?|ns)|s|z(?:alonika(?:iakhoz)?)?)?)?)?|s(?:ss?)?)?)))|[\s\xa0]*(?:Mga[\s\xa0]*T(?:aga(?:[\s\xa0]*Tesaloni[ck]a|-?(?:[\s\xa0]*Tesaloni[ck]a|Tesaloni[ck]a))|esaloni[cs]ense)|Kirje[\s\xa0]*tessalonikalaisille|k(?:\.[\s\xa0]*(?:Tesalonic(?:anom|kym)|Solun(?:canom|skym))|[\s\xa0]*(?:Tesalonic(?:anom|kym)|Solun(?:canom|skym)))|T(?:a(?:ga-?Tesaloni[ck]a|s)|e(?:calonikkiyarukku|s(?:aloni(?:senses?|ika|c(?:en(?:s(?:ow|es?)|i)|kym|zan|a(?:nom)?)|k(?:yen|a)?)|s(?:aloni(?:ce(?:n(?:s(?:kym|es)|zen)|si)|k(?:alais(?:kirje|ille)|er(?:ne)?))|z(?:alonika(?:iakhoz)?)?)?)?)?|h(?:aissaluneekiyon|e(?:s(?:al(?:lonians|oni(?:kasve|c(?:iens|ans)|ians|ons|a(?:id|ns?)|ns))|elon(?:ains|ians?)|olonians?|s(?:al(?:lonians|on(?:ciens|eans|o(?:ians|ans)|a(?:i(?:ans|ns?)|ns)|i(?:kerbrev(?:et)?|c(?:en(?:ses|zen)|i[ae]ns|ans|her)|ions|ens|a(?:ans|id|ns?)|ns|o(?:ans|ns?))))|elon(?:ains|ians?)|oloni(?:ans?|ns)|s|z(?:alonika(?:iakhoz)?)?)?)?)?|s(?:ss?)?)?|s)|Wathesalonike|list[\s\xa0]*(?:Tesalonickym|Solunskym)|(?:[ie](?:\.[\s\xa0]*(?:Thesalonikasve|Selanikasve)|[\s\xa0]*(?:Thesalonikasve|Selanikasve)))|List[\s\xa0]*do[\s\xa0]*Tesaloniczan|S(?:elanikasve|ol(?:un(?:janima[\s\xa0]*Poslanica|canom|skym))?)))|T(?:oinen[\s\xa0]*(?:Kirje[\s\xa0]*tessalonikalaisille|Tessalonikalais(?:kirje|ille))|e(?:calonikkiyarukku[\s\xa0]*Elutiya[\s\xa0]*Irantavatu[\s\xa0]*Nirupam|soloniika[\s\xa0]*Labaad)|weede[\s\xa0]*T(?:hess(?:alonicenzen)?|es(?:s(?:alonicenzen)?)?))|I(?:kalawang[\s\xa0]*(?:Mga[\s\xa0]*T(?:aga(?:-?[\s\xa0]*Tesaloni[ck]a|[\s\xa0]*Tesaloni[ck]a)|esaloni[cs]ense)|Tesaloni(?:sense|c(?:ense|a)|ka))|I(?:\.[\s\xa0]*(?:Kirje[\s\xa0]*tessalonikalaisille|List[\s\xa0]*do[\s\xa0]*Tesaloniczan|Mga[\s\xa0]*T(?:aga(?:-?[\s\xa0]*Tesaloni[ck]a|[\s\xa0]*Tesaloni[ck]a)|esaloni[cs]ense)|list[\s\xa0]*(?:Tesalonickym|Solunskym)|Wathesalonike|Sol(?:un(?:janima[\s\xa0]*Poslanica|canom|skym))?|T(?:e(?:s(?:aloni(?:senses?|ika|c(?:en(?:s(?:ow|es?)|i)|kym|zan|a(?:nom)?)|k(?:yen|a)?)|s(?:aloni(?:kalais(?:kirje|ille)|ce(?:n(?:s(?:kym|es)|zen)|si))|z(?:alonika(?:iakhoz)?)?)?)?)?|h(?:e(?:s(?:al(?:lonians|oni(?:c(?:iens|ans)|ians|ons|a(?:id|ns?)|ns))|elon(?:ains|ians?)|olonians?|s(?:al(?:lonians|on(?:ciens|eans|o(?:ians|ans)|a(?:i(?:ans|ns?)|ns)|i(?:c(?:en(?:ses|zen)|i[ae]ns|ans)|ions|ens|a(?:ans|id|ns?)|ns|o(?:ans|ns?))))|elon(?:ains|ians?)|oloni(?:ans?|ns)|s|z(?:alonika(?:iakhoz)?)?)?)?)?|s(?:ss?)?)?))|[\s\xa0]*(?:Kirje[\s\xa0]*tessalonikalaisille|List[\s\xa0]*do[\s\xa0]*Tesaloniczan|Mga[\s\xa0]*T(?:aga(?:-?[\s\xa0]*Tesaloni[ck]a|[\s\xa0]*Tesaloni[ck]a)|esaloni[cs]ense)|list[\s\xa0]*(?:Tesalonickym|Solunskym)|Wathesalonike|Sol(?:un(?:janima[\s\xa0]*Poslanica|canom|skym))?|T(?:e(?:s(?:aloni(?:senses?|ika|c(?:en(?:s(?:ow|es?)|i)|kym|zan|a(?:nom)?)|k(?:yen|a)?)|s(?:aloni(?:kalais(?:kirje|ille)|ce(?:n(?:s(?:kym|es)|zen)|si))|z(?:alonika(?:iakhoz)?)?)?)?)?|h(?:e(?:s(?:al(?:lonians|oni(?:c(?:iens|ans)|ians|ons|a(?:id|ns?)|ns))|elon(?:ains|ians?)|olonians?|s(?:al(?:lonians|on(?:ciens|eans|o(?:ians|ans)|a(?:i(?:ans|ns?)|ns)|i(?:c(?:en(?:ses|zen)|i[ae]ns|ans)|ions|ens|a(?:ans|id|ns?)|ns|o(?:ans|ns?))))|elon(?:ains|ians?)|oloni(?:ans?|ns)|s|z(?:alonika(?:iakhoz)?)?)?)?)?|s(?:ss?)?)?))))|Naa77antto[\s\xa0]*Tasalonqqe|Wa(?:raka[\s\xa0]*wa[\s\xa0]*Pili[\s\xa0]*kwa[\s\xa0]*Wathesalonik[ei]|thesalonike[\s\xa0]*II))|(?:ad[\s\xa0]*Thessalonicenses[\s\xa0]*II|Thessalonicenses[\s\xa0]*II|Druga[\s\xa0]*(?:poslanica[\s\xa0]*Solunjanima|Solunjanima)|II(?:\.[\s\xa0]*Solunjanima|[\s\xa0]*Solunjanima)|2(?:\.[\s\xa0]*Solunjanima|[\s\xa0]*Solunjanima)))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["1Thess"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])(1[\s\xa0]*Tessalonikerbrevet|1(?:\.[\s\xa0]*Tessalonikerbrevet|[\s\xa0]*tessalonikerbrev)|(?:F(?:orsta[\s\xa0]*T(?:hessalonikerbrevet|essalonikerbrevet)|irst[\s\xa0]*Th(?:es(?:al(?:lonians|oni(?:[ci]ans|ons|ans?|ns))|elon(?:ains|ians?)|olonians?|s(?:al(?:lonians|on(?:ciens|eans|o(?:ians|ans)|a(?:i(?:ans|ns?)|ns)|i(?:c(?:i[ae]ns|ans)|ions|ens|(?:[ao](?:ans|ns?))|ns)))|elon(?:ains|ians?)|oloni(?:ans?|ns)|s)?)?|s(?:ss?)?)?)|1(?:a(?:\.[\s\xa0]*Tessalonicenses|[\s\xa0]*Tessalonicenses)|re(?:\.[\s\xa0]*Thes(?:saloniciens|aloniciens)|[\s\xa0]*Thes(?:saloniciens|aloniciens))|o(?:\.[\s\xa0]*Tes(?:salonicenses|aloni[cs]enses?)|[\s\xa0]*Tes(?:salonicenses|aloni[cs]enses?))|Thess|e(?:r(?:\.[\s\xa0]*Thes(?:saloniciens|aloniciens)|e(?:\.[\s\xa0]*Thes(?:saloniciens|aloniciens)|[\s\xa0]*Thes(?:saloniciens|aloniciens))|[\s\xa0]*Thes(?:saloniciens|aloniciens))|\.[\s\xa0]*T(?:hess(?:alonicenzen)?|es(?:s(?:alonicenzen)?)?)|[\s\xa0]*T(?:hess(?:alonicenzen)?|es(?:s(?:alonicenzen)?)?))|st(?:\.[\s\xa0]*Th(?:es(?:al(?:lonians|oni(?:[ci]ans|ons|ans?|ns))|elon(?:ains|ians?)|olonians?|s(?:al(?:lonians|on(?:ciens|eans|o(?:ians|ans)|a(?:i(?:ans|ns?)|ns)|i(?:c(?:i[ae]ns|ans)|ions|ens|(?:[ao](?:ans|ns?))|ns)))|elon(?:ains|ians?)|oloni(?:ans?|ns)|s)?)?|s(?:ss?)?)?|[\s\xa0]*Th(?:es(?:al(?:lonians|oni(?:[ci]ans|ons|ans?|ns))|elon(?:ains|ians?)|olonians?|s(?:al(?:lonians|on(?:ciens|eans|o(?:ians|ans)|a(?:i(?:ans|ns?)|ns)|i(?:c(?:i[ae]ns|ans)|ions|ens|(?:[ao](?:ans|ns?))|ns)))|elon(?:ains|ians?)|oloni(?:ans?|ns)|s)?)?|s(?:ss?)?)?)|\.(?:o(?:\.[\s\xa0]*Tesaloni[cs]enses?|[\s\xa0]*Tesaloni[cs]enses?)|[\s\xa0]*(?:Kirje[\s\xa0]*tessalonikalaisille|List[\s\xa0]*do[\s\xa0]*Tesaloniczan|Mga[\s\xa0]*T(?:aga(?:[\s\xa0]*Tesaloni[ck]a|-?(?:[\s\xa0]*Tesaloni[ck]a|Tesaloni[ck]a))|esaloni[cs]ense)|tessalonikerbrev|list[\s\xa0]*(?:Tesalonickym|Solunskym)|Wathesalonike|S(?:elanikasve|ol(?:un(?:janima[\s\xa0]*Poslanica|canom|skym))?)|T(?:aga-?Tesaloni[ck]a|e(?:s(?:aloni(?:senses?|ika|c(?:en(?:s(?:ow|es?)|i)|kym|zan|a(?:nom)?)|k(?:yen|a)?)|s(?:aloni(?:ce(?:n(?:s(?:kym|es)|zen)|si)|k(?:alais(?:kirje|ille)|er(?:ne)?))|z(?:alonika(?:iakhoz)?)?)?)?)?|h(?:aissaluneekiyon|e(?:s(?:al(?:lonians|oni(?:kasve|c(?:iens|ans)|ians|ons|a(?:id|ns?)|ns))|elon(?:ains|ians?)|olonians?|s(?:al(?:lonians|on(?:ciens|eans|o(?:ians|ans)|a(?:i(?:ans|ns?)|ns)|i(?:kerbrev(?:et)?|c(?:en(?:ses|zen)|i[ae]ns|ans|her)|ions|ens|a(?:ans|id|ns?)|ns|o(?:ans|ns?))))|elon(?:ains|ians?)|oloni(?:ans?|ns)|s|z(?:alonika(?:iakhoz)?)?)?)?)?|s(?:ss?)?)?)))|[\s\xa0]*(?:Mga[\s\xa0]*T(?:aga(?:[\s\xa0]*Tesaloni[ck]a|-?(?:[\s\xa0]*Tesaloni[ck]a|Tesaloni[ck]a))|esaloni[cs]ense)|Kirje[\s\xa0]*tessalonikalaisille|k(?:\.[\s\xa0]*(?:Tesalonic(?:anom|kym)|Solun(?:canom|skym))|[\s\xa0]*(?:Tesalonic(?:anom|kym)|Solun(?:canom|skym)))|T(?:a(?:ga-?Tesaloni[ck]a|s)|e(?:calonikkiyarukku|s(?:aloni(?:senses?|ika|c(?:en(?:s(?:ow|es?)|i)|kym|zan|a(?:nom)?)|k(?:yen|a)?)|s(?:aloni(?:ce(?:n(?:s(?:kym|es)|zen)|si)|k(?:alais(?:kirje|ille)|er(?:ne)?))|z(?:alonika(?:iakhoz)?)?)?)?)?|h(?:aissaluneekiyon|e(?:s(?:al(?:lonians|oni(?:kasve|c(?:iens|ans)|ians|ons|a(?:id|ns?)|ns))|elon(?:ains|ians?)|olonians?|s(?:al(?:lonians|on(?:ciens|eans|o(?:ians|ans)|a(?:i(?:ans|ns?)|ns)|i(?:kerbrev(?:et)?|c(?:en(?:ses|zen)|i[ae]ns|ans|her)|ions|ens|a(?:ans|id|ns?)|ns|o(?:ans|ns?))))|elon(?:ains|ians?)|oloni(?:ans?|ns)|s|z(?:alonika(?:iakhoz)?)?)?)?)?|s(?:ss?)?)?|s)|Wathesalonike|list[\s\xa0]*(?:Tesalonickym|Solunskym)|(?:[ie](?:\.[\s\xa0]*(?:Thesalonikasve|Selanikasve)|[\s\xa0]*(?:Thesalonikasve|Selanikasve)))|List[\s\xa0]*do[\s\xa0]*Tesaloniczan|S(?:elanikasve|ol(?:un(?:janima[\s\xa0]*Poslanica|canom|skym))?)))|Barua[\s\xa0]*ya[\s\xa0]*Kwanza[\s\xa0]*kwa[\s\xa0]*Wathesalonike|Wa(?:raka[\s\xa0]*wa[\s\xa0]*Kwanza[\s\xa0]*kwa[\s\xa0]*Wathesalonik[ei]|thesalonike[\s\xa0]*I)|Una(?:ng[\s\xa0]*(?:Mga[\s\xa0]*T(?:aga(?:-?[\s\xa0]*Tesaloni[ck]a|[\s\xa0]*Tesaloni[ck]a)|esaloni[cs]ense)|Tesaloni(?:sense|c(?:ense|a)|ka))|[\s\xa0]*(?:Mga[\s\xa0]*T(?:aga(?:-?[\s\xa0]*Tesaloni[ck]a|[\s\xa0]*Tesaloni[ck]a)|esaloni[cs]ense)|Tesaloni(?:sense|c(?:ense|a)|ka)))|K(?:oiro[\s\xa0]*Tasalonqqe|wanza[\s\xa0]*(?:Wathesalonike|Th(?:es?)?))|E(?:nsimmainen[\s\xa0]*(?:Kirje[\s\xa0]*tessalonikalaisille|Tessalonikalais(?:kirje|ille))|pistula[\s\xa0]*(?:I[\s\xa0]*ad[\s\xa0]*Thessalonicenses|ad[\s\xa0]*Thessalonicenses[\s\xa0]*I)|rste[\s\xa0]*Thessalonicher|erste[\s\xa0]*T(?:hess(?:alonicenzen)?|es(?:s(?:alonicenzen)?)?)|lso[\s\xa0]*T(?:hessz(?:alonika(?:iakhoz)?)?|essz(?:alonika(?:iakhoz)?)?))|I(?:\.[\s\xa0]*(?:Kirje[\s\xa0]*tessalonikalaisille|List[\s\xa0]*do[\s\xa0]*Tesaloniczan|Mga[\s\xa0]*T(?:aga(?:-?[\s\xa0]*Tesaloni[ck]a|[\s\xa0]*Tesaloni[ck]a)|esaloni[cs]ense)|list[\s\xa0]*(?:Tesalonickym|Solunskym)|Wathesalonike|Sol(?:un(?:janima[\s\xa0]*Poslanica|canom|skym))?|T(?:e(?:s(?:aloni(?:senses?|ika|c(?:en(?:s(?:ow|es?)|i)|kym|zan|a(?:nom)?)|k(?:yen|a)?)|s(?:aloni(?:kalais(?:kirje|ille)|ce(?:n(?:s(?:kym|es)|zen)|si))|z(?:alonika(?:iakhoz)?)?)?)?)?|h(?:e(?:s(?:al(?:lonians|oni(?:c(?:iens|ans)|ians|ons|a(?:id|ns?)|ns))|elon(?:ains|ians?)|olonians?|s(?:al(?:lonians|on(?:ciens|eans|o(?:ians|ans)|a(?:i(?:ans|ns?)|ns)|i(?:c(?:en(?:ses|zen)|i[ae]ns|ans)|ions|ens|a(?:ans|id|ns?)|ns|o(?:ans|ns?))))|elon(?:ains|ians?)|oloni(?:ans?|ns)|s|z(?:alonika(?:iakhoz)?)?)?)?)?|s(?:ss?)?)?))|[\s\xa0]*(?:Kirje[\s\xa0]*tessalonikalaisille|List[\s\xa0]*do[\s\xa0]*Tesaloniczan|Mga[\s\xa0]*T(?:aga(?:-?[\s\xa0]*Tesaloni[ck]a|[\s\xa0]*Tesaloni[ck]a)|esaloni[cs]ense)|list[\s\xa0]*(?:Tesalonickym|Solunskym)|Wathesalonike|Sol(?:un(?:janima[\s\xa0]*Poslanica|canom|skym))?|T(?:e(?:s(?:aloni(?:senses?|ika|c(?:en(?:s(?:ow|es?)|i)|kym|zan|a(?:nom)?)|k(?:yen|a)?)|s(?:aloni(?:kalais(?:kirje|ille)|ce(?:n(?:s(?:kym|es)|zen)|si))|z(?:alonika(?:iakhoz)?)?)?)?)?|h(?:e(?:s(?:al(?:lonians|oni(?:c(?:iens|ans)|ians|ons|a(?:id|ns?)|ns))|elon(?:ains|ians?)|olonians?|s(?:al(?:lonians|on(?:ciens|eans|o(?:ians|ans)|a(?:i(?:ans|ns?)|ns)|i(?:c(?:en(?:ses|zen)|i[ae]ns|ans)|ions|ens|a(?:ans|id|ns?)|ns|o(?:ans|ns?))))|elon(?:ains|ians?)|oloni(?:ans?|ns)|s|z(?:alonika(?:iakhoz)?)?)?)?)?|s(?:ss?)?)?)))|P(?:erse[\s\xa0]*poslannja[\s\xa0]*apostola[\s\xa0]*Pavla[\s\xa0]*do[\s\xa0]*solunjan|a(?:ulus(?:['’][\s\xa0]*1(?:\.[\s\xa0]*Brev[\s\xa0]*til[\s\xa0]*Thessalonikerne|[\s\xa0]*Brev[\s\xa0]*til[\s\xa0]*Thessalonikerne))|vlova[\s\xa0]*prva[\s\xa0]*poslanica[\s\xa0]*Solunjanima)|ierwsz(?:[aey][\s\xa0]*(?:List[\s\xa0]*do[\s\xa0]*Tesaloniczan|Tesalonic(?:ensow|zan)))|r(?:im(?:e(?:ir[ao][\s\xa0]*Tessalonicenses|r(?:o[\s\xa0]*Tesaloni[cs]enses?|[\s\xa0]*Tesaloni[cs]enses?))|a[\s\xa0]*(?:lettera[\s\xa0]*ai[\s\xa0]*Tessalonicesi|Tessalonicesi)|o[\s\xa0]*Tessalonicesi)|em(?:ier(?:e(?:s[\s\xa0]*Thes(?:saloniciens|aloniciens)|[\s\xa0]*Thes(?:saloniciens|aloniciens))|s[\s\xa0]*Thes(?:saloniciens|aloniciens)|[\s\xa0]*Thes(?:saloniciens|aloniciens))|ye[\s\xa0]*Tesalonik(?:yen)?)|v(?:a[\s\xa0]*(?:kniha[\s\xa0]*(?:Tesalonic(?:anom|kym)|Solun(?:canom|skym))|Tesalonic(?:anom|kym)|Solun(?:janima[\s\xa0]*Poslanica|canom|skym))|y[\s\xa0]*(?:list[\s\xa0]*(?:Tesalonic(?:anom|kym)|Solun(?:canom|skym))|Tesalonic(?:anom|kym)|Solun(?:canom|skym))|ni[\s\xa0]*(?:list[\s\xa0]*(?:Tesalonickym|Solunskym)|Sol(?:unskym)?|Te(?:s(?:salonicenskym|alonickym))?))))|Te(?:calonikkiyarukku[\s\xa0]*Elutiya[\s\xa0]*Mutalavatu[\s\xa0]*Nirupam|soloniika[\s\xa0]*Kowaad))|(?:ad[\s\xa0]*Thessalonicenses[\s\xa0]*I|Prva[\s\xa0]*(?:poslanica[\s\xa0]*Solunjanima|Solunjanima)|(?:[I1](?:\.[\s\xa0]*Solunjanima|[\s\xa0]*Solunjanima))|Thes(?:s(?:elon(?:ains|ians?)|oloni(?:ns|ans?)|al(?:lonians|on(?:ciens|o(?:ians|ans)|eans|i(?:c(?:enses[\s\xa0]*I|i[ea]ns|ans)|ions|ns|(?:[oa](?:ans|ns?)))|a(?:ns|i(?:ans|ns?)))))|al(?:lonians|oni(?:[ic]ans|ons|ns|ans?))|elon(?:ains|ians?)|olonians?)))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["2Kgs"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])((?:II(?:\.[\s\xa0]*kniha[\s\xa0]*kralovska|[\s\xa0]*kniha[\s\xa0]*kralovska)|2(?:\.[\s\xa0]*kniha[\s\xa0]*kralovska|[\s\xa0]*kniha[\s\xa0]*kralovska))|(?:2(?:a(?:\.[\s\xa0]*Reis|[\s\xa0]*Reis)|d(?:\.[\s\xa0]*Rois|e(?:\.[\s\xa0]*Rois|[\s\xa0]*Rois)|[\s\xa0]*Rois)|o(?:\.[\s\xa0]*Re(?:yes|is)|[\s\xa0]*Re(?:yes|is))|\.(?:o(?:\.[\s\xa0]*Reyes|[\s\xa0]*Reyes)|[\s\xa0]*(?:Imp(?:arati)?|Para[\s\xa0]*Raja|M(?:breterve|ga[\s\xa0]*Hari)|Vua|K(?:un(?:inkaiden[\s\xa0]*kirja|gaboken)|s(?:ieg(?:[ai][\s\xa0]*Krol(?:ewska|ow))|\.[\s\xa0]*Krol(?:ewska|ow)|[\s\xa0]*Krol(?:ewska|ow))|o(?:enige|n(?:ungaboken|i(?:ngen|ge)|g(?:ebo[gk])?)?)|gs?|i(?:gs?|n(?:gs?|s)?|r(?:alyok)?|s)?|n(?:gs?|s)?|r(?:olewska|al(?:jevima|ov(?:ska)?)?)?)|Wa(?:falme)?|Hari|Fal|Cariv|B(?:ren(?:hinoedd|inoedd)|oq(?:orradii)?)|R(?:aja|ois|e(?:yes|is|g(?:um|i)?))))|e(?:me(?:\.[\s\xa0]*Rois|[\s\xa0]*Rois)|\.[\s\xa0]*(?:Rois|Ko(?:n(?:ingen)?)?)|[\s\xa0]*(?:Rois|Ko(?:n(?:ingen)?)?))|nd(?:\.[\s\xa0]*K(?:gs?|i(?:gs?|n(?:gs?|s)?|s)?|n(?:gs?|s)?|s)?|[\s\xa0]*K(?:gs?|i(?:gs?|n(?:gs?|s)?|s)?|n(?:gs?|s)?|s)?)|Kgs|[\s\xa0]*(?:Para[\s\xa0]*Raja|K(?:s(?:ieg(?:[ai][\s\xa0]*Krol(?:ewska|ow))|\.[\s\xa0]*Krol(?:ewska|ow)|[\s\xa0]*Krol(?:ewska|ow))|aw|o(?:enige|n(?:ungaboken|i(?:ngen|ge)|g(?:ebo[gk])?)?)|un(?:inkaiden[\s\xa0]*kirja|g(?:aboken)?)?|gs?|i(?:gs?|n(?:gs?|s)?|r(?:alyok)?|s)?|n(?:gs?|s)?|r(?:al(?:jevima|ov(?:ska)?)?|ol(?:ewska)?|l)?)|(?:[ie](?:\.[\s\xa0]*Mbreterve|[\s\xa0]*Mbreterve))|M(?:ga[\s\xa0]*Hari|b(?:reterve)?)|I(?:rajakkal|mp(?:arati)?)|Vua|Ha(?:ri)?|Wa(?:falme)?|Fal|Cariv|R(?:aja|ois|e(?:is|es?|g(?:um|i)?|s|y(?:es?|s)?)|s|y(?:es?|s)?)?|B(?:ren(?:hinoedd|inoedd)?|oq(?:orradii)?)|k(?:\.[\s\xa0]*Kralov|[\s\xa0]*Kralov)))|Regum[\s\xa0]*II|Wafalme[\s\xa0]*II|4(?:th(?:\.[\s\xa0]*Kingdoms|[\s\xa0]*Kingdoms)|(?:[ao](?:\.[\s\xa0]*Reinos|[\s\xa0]*Reinos))|\.[\s\xa0]*(?:M(?:breterve|ga[\s\xa0]*Hari)|K(?:ongerigernes[\s\xa0]*Bog|s(?:ieg[ai][\s\xa0]*Krolewska|\.[\s\xa0]*Krolewska|[\s\xa0]*Krolewska)|ingdoms|ralov)|Re(?:inos|g(?:norum|i)))|[\s\xa0]*(?:(?:[ei](?:\.[\s\xa0]*Mbreterve|[\s\xa0]*Mbreterve))|M(?:breterve|ga[\s\xa0]*Hari)|k(?:\.[\s\xa0]*Kralov|[\s\xa0]*Kralov)|K(?:ongerigernes[\s\xa0]*Bog|s(?:ieg[ai][\s\xa0]*Krolewska|\.[\s\xa0]*Krolewska|[\s\xa0]*Krolewska)|ingdoms|ralov)|Re(?:inos|g(?:norum|i))))|Zweite[\s\xa0]*Ko(?:enige|nige)|Masodik[\s\xa0]*Kir(?:alyok)?|D(?:e(?:uxieme(?:s[\s\xa0]*Rois|[\s\xa0]*Rois)|zyem[\s\xa0]*(?:liv[\s\xa0]*Wa[\s\xa0]*yo|Wa))|ru(?:g(?:a[\s\xa0]*(?:knjiga[\s\xa0]*o[\s\xa0]*Kraljevima|K(?:r(?:aljevima|olewska)|s(?:ieg(?:[ai][\s\xa0]*Krol(?:ewska|ow))|\.[\s\xa0]*Krol(?:ewska|ow)|[\s\xa0]*Krol(?:ewska|ow))))|i[\s\xa0]*K(?:rolewska|s(?:ieg(?:[ai][\s\xa0]*Krol(?:ewska|ow))|\.[\s\xa0]*Krol(?:ewska|ow)|[\s\xa0]*Krol(?:ewska|ow))))|h(?:a[\s\xa0]*(?:kniha[\s\xa0]*(?:kralovska|Kralov)|Kr(?:al(?:ov(?:ska)?)?)?)|y[\s\xa0]*(?:kniha[\s\xa0]*kralovska|list[\s\xa0]*Kralov|Kr(?:al(?:ov(?:ska)?)?)?))))|Liber[\s\xa0]*II[\s\xa0]*Regum|T(?:oinen[\s\xa0]*Kuninkaiden[\s\xa0]*kirja|weede[\s\xa0]*Ko(?:n(?:ingen)?)?)|Quart[ao][\s\xa0]*Reinos|Boqorradii[\s\xa0]*Labaad|F(?:jerde[\s\xa0]*Kongerigernes[\s\xa0]*Bog|ourth[\s\xa0]*Kingdoms)|And(?:en[\s\xa0]*Kong(?:ebog)?|r(?:a[\s\xa0]*K(?:onungaboken|ungaboken)|e[\s\xa0]*Kong(?:ebok)?))|C(?:zwarta[\s\xa0]*Ks(?:ieg[ai][\s\xa0]*Krolewska|\.[\s\xa0]*Krolewska|[\s\xa0]*Krolewska)|artea[\s\xa0]*(?:a[\s\xa0]*patra[\s\xa0]*a[\s\xa0]*Regilor|IV[\s\xa0]*a[\s\xa0]*Regilor))|S(?:tvrta[\s\xa0]*(?:kniha[\s\xa0]*Kralov|Kralov)|e(?:gund(?:a[\s\xa0]*Reis|o[\s\xa0]*Re(?:yes|is))|cond(?:[ao][\s\xa0]*Re|[\s\xa0]*K(?:gs?|i(?:gs?|n(?:gs?|s)?|s)?|n(?:gs?|s)?|s)?)))|I(?:ka(?:apat[\s\xa0]*Mga[\s\xa0]*Hari|lawang[\s\xa0]*(?:Mga[\s\xa0]*Hari|Hari))|V(?:\.[\s\xa0]*(?:Mga[\s\xa0]*Hari|K(?:s(?:ieg[ai][\s\xa0]*Krolewska|\.[\s\xa0]*Krolewska|[\s\xa0]*Krolewska)|ingdoms|ralov)|Re(?:inos|g(?:norum|i)))|[\s\xa0]*(?:Mga[\s\xa0]*Hari|K(?:s(?:ieg[ai][\s\xa0]*Krolewska|\.[\s\xa0]*Krolewska|[\s\xa0]*Krolewska)|ingdoms|ralov)|Re(?:inos|g(?:norum|i))))|I(?:\.[\s\xa0]*(?:Mga[\s\xa0]*Hari|Imp(?:arati)?|Para[\s\xa0]*Raja|K(?:uninkaiden[\s\xa0]*kirja|s(?:ieg(?:[ai][\s\xa0]*Krol(?:ewska|ow))|\.[\s\xa0]*Krol(?:ewska|ow)|[\s\xa0]*Krol(?:ewska|ow))|gs?|i(?:gs?|n(?:gs?|s)?|r(?:alyok)?|s)?|n(?:gs?|s)?|o(?:n(?:ingen)?)?|r(?:olewska|al(?:jevima|ov(?:ska)?)?)?)|Vua|Wa(?:falme)?|Hari|Fal|Cariv|R(?:ois|e(?:yes|is|g(?:um|i)?)?)|B(?:ren(?:hinoedd|inoedd)|oq(?:orradii)?))|[\s\xa0]*(?:Mga[\s\xa0]*Hari|Imp(?:arati)?|K(?:uninkaiden[\s\xa0]*kirja|s(?:ieg(?:[ai][\s\xa0]*Krol(?:ewska|ow))|\.[\s\xa0]*Krol(?:ewska|ow)|[\s\xa0]*Krol(?:ewska|ow))|gs?|i(?:gs?|n(?:gs?|s)?|r(?:alyok)?|s)?|n(?:gs?|s)?|o(?:n(?:ingen)?)?|r(?:olewska|al(?:jevima|ov(?:ska)?)?)?)?|R(?:ois|e(?:yes|is|gi?)?)|Para[\s\xa0]*Raja|a[\s\xa0]*Imparatilor|Vua|Wa(?:falme)?|Hari|Fal|Cariv|B(?:ren(?:hinoedd|inoedd)|oq(?:orradii)?))))|K(?:awotu[\s\xa0]*Maxaafaa[\s\xa0]*Naa77anttuwaa|i(?:tabu[\s\xa0]*cha[\s\xa0]*Pili[\s\xa0]*cha[\s\xa0]*Wafalme|ralyok[\s\xa0]*II))|Pili[\s\xa0]*(?:Wafalme|Fal))|(?:Toinen[\s\xa0]*Kuninkaiden|2(?:\.[\s\xa0]*Kuninkaiden|[\s\xa0]*Kuninkaiden)|II(?:\.[\s\xa0]*Kuninkaiden|[\s\xa0]*(?:Kuninkaiden|Regum))))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["1Kgs"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])((?:[1I](?:\.[\s\xa0]*kniha[\s\xa0]*kralovska|[\s\xa0]*kniha[\s\xa0]*kralovska))|(?:F(?:orsta[\s\xa0]*K(?:onungaboken|ungaboken)|yrri[\s\xa0]*(?:bok[\s\xa0]*konunganna|Konungabok)|irst[\s\xa0]*K(?:gs?|i(?:gs?|n(?:gs?|s)?)?|n(?:gs?|s)?|s)?)|Wafalme[\s\xa0]*I|1(?:re(?:\.[\s\xa0]*Rois|[\s\xa0]*Rois)|a(?:\.[\s\xa0]*Reis|[\s\xa0]*Reis)|o(?:\.[\s\xa0]*Re(?:yes|is)|[\s\xa0]*Re(?:yes|is))|\.(?:o(?:\.[\s\xa0]*Reyes|[\s\xa0]*Reyes)|[\s\xa0]*(?:Imp(?:arati)?|Para[\s\xa0]*Raja|M(?:breterve|ga[\s\xa0]*Hari)|Vua|K(?:un(?:inkaiden[\s\xa0]*kirja|gaboken)|s(?:ieg(?:[ai][\s\xa0]*Krol(?:ewska|ow))|\.[\s\xa0]*Krol(?:ewska|ow)|[\s\xa0]*Krol(?:ewska|ow))|o(?:enige|n(?:ungaboken|i(?:ngen|ge)|g(?:ebo[gk])?)?)|gs?|i(?:gs?|n(?:gs?|s)?|r(?:alyok)?)?|n(?:gs?|s)?|r(?:olewska|al(?:jevima|ov(?:ska)?)?)?)|Wa(?:falme)?|Hari|Fal|Cariv|B(?:ren(?:hinoedd|inoedd)|oq(?:orradii)?)|R(?:aja|ois|e(?:yes|is|g(?:um|i)?))))|e(?:r(?:\.[\s\xa0]*Rois|e(?:\.[\s\xa0]*Rois|[\s\xa0]*Rois)|[\s\xa0]*Rois)|\.[\s\xa0]*Ko(?:n(?:ingen)?)?|[\s\xa0]*Ko(?:n(?:ingen)?)?)|st(?:\.[\s\xa0]*K(?:gs?|i(?:gs?|n(?:gs?|s)?)?|n(?:gs?|s)?|s)?|[\s\xa0]*K(?:gs?|i(?:gs?|n(?:gs?|s)?)?|n(?:gs?|s)?|s)?)|Kgs|[\s\xa0]*(?:Para[\s\xa0]*Raja|K(?:s(?:ieg(?:[ai][\s\xa0]*Krol(?:ewska|ow))|\.[\s\xa0]*Krol(?:ewska|ow)|[\s\xa0]*Krol(?:ewska|ow))|aw|o(?:enige|n(?:ungaboken|i(?:ngen|ge)|g(?:ebo[gk])?)?)|un(?:inkaiden[\s\xa0]*kirja|g(?:aboken)?)?|gs?|i(?:gs?|n(?:gs?|s)?|r(?:alyok)?)?|n(?:gs?|s)?|r(?:al(?:jevima|ov(?:ska)?)?|ol(?:ewska)?|l)?)|(?:[ie](?:\.[\s\xa0]*Mbreterve|[\s\xa0]*Mbreterve))|M(?:ga[\s\xa0]*Hari|b(?:reterve)?)|I(?:rajakkal|mp(?:arati)?)|Vua|Ha(?:ri)?|Wa(?:falme)?|Fal|Cariv|R(?:aja|ois|e(?:is|es?|g(?:um|i)?|s|y(?:es?|s)?)|s|y(?:es?|s)?)?|B(?:ren(?:hinoedd|inoedd)?|oq(?:orradii)?)|k(?:\.[\s\xa0]*Kralov|[\s\xa0]*Kralov)))|Boqorradii[\s\xa0]*Kowaad|Cartea[\s\xa0]*(?:a[\s\xa0]*treia[\s\xa0]*a[\s\xa0]*Regilor|III[\s\xa0]*a[\s\xa0]*Regilor)|P(?:ierwsz(?:[aey][\s\xa0]*K(?:rolewska|s(?:ieg(?:[ai][\s\xa0]*Krol(?:ewska|ow))|\.[\s\xa0]*Krol(?:ewska|ow)|[\s\xa0]*Krol(?:ewska|ow))))|r(?:em(?:ier(?:e(?:s[\s\xa0]*Rois|[\s\xa0]*Rois)|s[\s\xa0]*Rois|[\s\xa0]*Rois)|ye[\s\xa0]*(?:liv[\s\xa0]*Wa[\s\xa0]*yo|Wa))|im(?:e(?:ir[ao][\s\xa0]*Reis|r(?:o[\s\xa0]*Reyes|[\s\xa0]*Reyes))|[ao][\s\xa0]*Re)|v(?:a[\s\xa0]*(?:kn(?:jiga[\s\xa0]*o[\s\xa0]*Kraljevima|iha[\s\xa0]*Kralov)|Kral(?:jevima|ov))|y[\s\xa0]*(?:list[\s\xa0]*Kralov|Kralov)|ni[\s\xa0]*(?:kniha[\s\xa0]*kralovska|Kr(?:al(?:ovska)?)?))))|Liber[\s\xa0]*I[\s\xa0]*Regum|3(?:rd(?:\.[\s\xa0]*Kingdoms|[\s\xa0]*Kingdoms)|(?:[ao](?:\.[\s\xa0]*Reinos|[\s\xa0]*Reinos))|\.[\s\xa0]*(?:M(?:breterve|ga[\s\xa0]*Hari)|K(?:ongerigernes[\s\xa0]*Bog|s(?:ieg[ai][\s\xa0]*Krolewska|\.[\s\xa0]*Krolewska|[\s\xa0]*Krolewska)|ingdoms|ralov)|Re(?:inos|g(?:norum|i)))|[\s\xa0]*(?:(?:[ei](?:\.[\s\xa0]*Mbreterve|[\s\xa0]*Mbreterve))|M(?:breterve|ga[\s\xa0]*Hari)|k(?:\.[\s\xa0]*Kralov|[\s\xa0]*Kralov)|K(?:ongerigernes[\s\xa0]*Bog|s(?:ieg[ai][\s\xa0]*Krolewska|\.[\s\xa0]*Krolewska|[\s\xa0]*Krolewska)|ingdoms|ralov)|Re(?:inos|g(?:norum|i))))|K(?:awotu[\s\xa0]*Maxaafaa[\s\xa0]*Koiruwaa|i(?:tabu[\s\xa0]*cha[\s\xa0]*Kwanza[\s\xa0]*cha[\s\xa0]*Wafalme|ralyok[\s\xa0]*I)|wanza[\s\xa0]*(?:Wafalme|Fal))|T(?:erceir[ao][\s\xa0]*Reinos|hird[\s\xa0]*Kingdoms|r(?:zeci(?:a[\s\xa0]*Ks(?:ieg[ai][\s\xa0]*Krolewska|\.[\s\xa0]*Krolewska|[\s\xa0]*Krolewska)|[\s\xa0]*Ks(?:ieg[ai][\s\xa0]*Krolewska|\.[\s\xa0]*Krolewska|[\s\xa0]*Krolewska))|e(?:dje[\s\xa0]*Kongerigernes[\s\xa0]*Bog|ti(?:a[\s\xa0]*(?:kniha[\s\xa0]*Kralov|Kralov)|[\s\xa0]*Kralov))))|Una(?:ng[\s\xa0]*(?:Mga[\s\xa0]*Hari|Hari)|[\s\xa0]*(?:Mga[\s\xa0]*Hari|Hari))|I(?:katlong[\s\xa0]*Mga[\s\xa0]*Hari|II(?:\.[\s\xa0]*(?:Mga[\s\xa0]*Hari|K(?:s(?:ieg[ai][\s\xa0]*Krolewska|\.[\s\xa0]*Krolewska|[\s\xa0]*Krolewska)|ingdoms|ralov)|Re(?:inos|g(?:norum|i)))|[\s\xa0]*(?:Mga[\s\xa0]*Hari|K(?:s(?:ieg[ai][\s\xa0]*Krolewska|\.[\s\xa0]*Krolewska|[\s\xa0]*Krolewska)|ingdoms|ralov)|Re(?:inos|g(?:norum|i))))|\.[\s\xa0]*(?:Mga[\s\xa0]*Hari|Imp(?:arati)?|Para[\s\xa0]*Raja|K(?:uninkaiden[\s\xa0]*kirja|s(?:ieg(?:[ai][\s\xa0]*Krol(?:ewska|ow))|\.[\s\xa0]*Krol(?:ewska|ow)|[\s\xa0]*Krol(?:ewska|ow))|i(?:gs?|n(?:gs?|s)?|r(?:alyok)?)|gs?|n(?:gs?|s)?|o(?:n(?:ingen)?)?|r(?:olewska|al(?:jevima|ov(?:ska)?)?)?)|Vua|Wa(?:falme)?|Hari|Fal|Cariv|R(?:ois|e(?:yes|is|g(?:um|i)?)?)|B(?:ren(?:hinoedd|inoedd)|oq(?:orradii)?))|[\s\xa0]*(?:Mga[\s\xa0]*Hari|Imp(?:arati)?|R(?:ois|e(?:yes|is|gi?)?)|Para[\s\xa0]*Raja|K(?:uninkaiden[\s\xa0]*kirja|s(?:ieg(?:[ai][\s\xa0]*Krol(?:ewska|ow))|\.[\s\xa0]*Krol(?:ewska|ow)|[\s\xa0]*Krol(?:ewska|ow))|i(?:gs?|n(?:gs?|s)?|r(?:alyok)?)|gs?|n(?:gs?|s)?|o(?:n(?:ingen)?)?|r(?:olewska|al(?:jevima|ov(?:ska)?)?)?)?|a[\s\xa0]*Imparatilor|Vua|Wa(?:falme)?|Hari|Fal|Cariv|B(?:ren(?:hinoedd|inoedd)|oq(?:orradii)?)))|E(?:nsimmainen[\s\xa0]*Kuninkaiden[\s\xa0]*kirja|rste[\s\xa0]*Ko(?:enige|nige)|erste[\s\xa0]*Ko(?:n(?:ingen)?)?|lso[\s\xa0]*Kir(?:alyok)?)|Regum[\s\xa0]*I)|(?:Ensimmainen[\s\xa0]*Kuninkaiden|1(?:\.[\s\xa0]*Kuninkaiden|[\s\xa0]*Kuninkaiden)|I(?:\.[\s\xa0]*Kuninkaiden|[\s\xa0]*(?:Kuninkaiden|Regum))|K(?:ngs|in(?:gs)?|gs)))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["EpJer"],
        apocrypha: true,
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Cart(?:\\.[\\s\\xa0]*Jer|a[\\s\\xa0]*Jer(?:emias)?|[\\s\\xa0]*Jer)|Jer(?:emi(?:jino[\\s\\xa0]*pismo|a(?:n[\\s\\xa0]*kirje|s(?:ov[\\s\\xa0]*list|['’][\\s\\xa0]*Brev|[\\s\\xa0]*(?:levele|brev))))|[\\s\\xa0]*br|br)|Ang[\\s\\xa0]*Liham[\\s\\xa0]*ni[\\s\\xa0]*Jeremias|B(?:arua[\\s\\xa0]*ya[\\s\\xa0]*Yeremia|r(?:ief[\\s\\xa0]*(?:des[\\s\\xa0]*Jeremia|van[\\s\\xa0]*Jeremia)|ef[\\s\\xa0]*Jeremia|[\\s\\xa0]*Jer)|Jer)|Pismo[\\s\\xa0]*Jeremije[\\s\\xa0]*proroka|Or(?:atio[\\s\\xa0]*Ieremiae|\\.[\\s\\xa0]*Ier|[\\s\\xa0]*Ier)|L(?:a[\\s\\xa0]*Carta[\\s\\xa0]*de[\\s\\xa0]*Jeremias|lythyr[\\s\\xa0]*Jeremeia|et(?:tera[\\s\\xa0]*di[\\s\\xa0]*Geremia|-?ger)|i(?:st[\\s\\xa0]*Jerem(?:iasza|jasuv)|h[\\s\\xa0]*Jer))|Ep(?:i(?:st(?:ola[\\s\\xa0]*lui[\\s\\xa0]*Ieremia|le[\\s\\xa0]*of[\\s\\xa0]*Jeremy)|tre[\\s\\xa0]*de[\\s\\xa0]*Jeremie)|\\.[\\s\\xa0]*Jer(?:emie)?|[\\s\\xa0]*Jer(?:emie)?|Jer)|The[\\s\\xa0]*(?:Let(?:ter[\\s\\xa0]*of[\\s\\xa0]*Jeremiah|\\.[\\s\\xa0]*of[\\s\\xa0]*Jeremiah|[\\s\\xa0]*of[\\s\\xa0]*Jeremiah)|Ep(?:istle[\\s\\xa0]*of[\\s\\xa0]*Jeremiah|\\.[\\s\\xa0]*of[\\s\\xa0]*Jeremiah|[\\s\\xa0]*of[\\s\\xa0]*Jeremiah)))|(?:Carta[\\s\\xa0]*de[\\s\\xa0]*Jeremias|L(?:iham[\\s\\xa0]*ni[\\s\\xa0]*Jeremias|et(?:ter[\\s\\xa0]*of[\\s\\xa0]*Jeremiah|\\.[\\s\\xa0]*of[\\s\\xa0]*Jeremiah|[\\s\\xa0]*of[\\s\\xa0]*Jeremiah))|Ep(?:istle[\\s\\xa0]*of[\\s\\xa0]*Jeremiah|\\.[\\s\\xa0]*of[\\s\\xa0]*Jeremiah|[\\s\\xa0]*of[\\s\\xa0]*Jeremiah)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Lam"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:K(?:idung[\\s\\xa0]*Pa(?:ngadhuh|sambat)|s(?:ieg[ai][\\s\\xa0]*Lamentacji|\\.[\\s\\xa0]*Lamentacji|[\\s\\xa0]*Lamentacji)|niha[\\s\\xa0]*nar(?:ekov|ku)|\\.[\\s\\xa0]*narekov|[\\s\\xa0]*narekov|l(?:a(?:agl(?:iederen)?|g(?:ovisorna|e(?:lieder[\\s\\xa0]*Jeremias|s(?:angene)?))?)|gl)?)|M(?:ga[\\s\\xa0]*(?:Lamentasyon|Pa(?:gbangotan|naghoy))|ao(?:mbolezo[\\s\\xa0]*ya[\\s\\xa0]*Yeremia)?)|Baroor(?:ashadii[\\s\\xa0]*Yeremyaah)?|Chante[\\s\\xa0]*pou[\\s\\xa0]*plenn[\\s\\xa0]*So[\\s\\xa0]*lavil[\\s\\xa0]*Jerizalem|Jeremi(?:jine[\\s\\xa0]*tuzaljke|as(?:ov[\\s\\xa0]*Plac|[\\s\\xa0]*sir(?:almai)?))|Zalosp(?:evy)?|Hlj|P(?:ulampal|anag|l(?:a(?:c[\\s\\xa0]*Jerem(?:jasuv|i(?:as[ou]v|i))|ng(?:eri(?:le[\\s\\xa0]*(?:profetului[\\s\\xa0]*Ieremia|lui[\\s\\xa0]*Ieremia))?)?))?)|wilapgit|Omb|Siral(?:m(?:ak)?)?|A(?:klat[\\s\\xa0]*ng[\\s\\xa0]*Pa(?:nanaghoy|gtaghoy)|i[\\s\\xa0]*Ca)|Nar(?:eky)?|yarmiyako[\\s\\xa0]*vilap|Erm(?:maasa[\\s\\xa0]*Zilaassaa|Z)|L(?:am(?:antasyon|enta(?:zioni|c(?:oes[\\s\\xa0]*de[\\s\\xa0]*Jeremias|je[\\s\\xa0]*Jeremiasza|i(?:ones?|je))|tion(?:s[\\s\\xa0]*de[\\s\\xa0]*Jeremie|es)?)|inta(?:ciones?|tions?))?|m)|T(?:uz|r(?:eny[\\s\\xa0]*Jeremiasza)?)|Galar(?:nad[\\s\\xa0]*Jeremiah)?|V(?:ilapageet|a(?:lit(?:usvirret)?|j(?:timet)?)))|(?:Baroorashadii|Klagelieder|Lamenta(?:tions|c(?:oes|je))|Maombolezo|Galarnad|T(?:uzaljke|reny)|P(?:a(?:gbangotan|naghoy)|l(?:enn|ac))))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Num"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])((?:Vier(?:de[\s\xa0]*Mozes|te[\s\xa0]*(?:Buch[\s\xa0]*Mose|Mose))|N(?:eljas[\s\xa0]*Mooseksen[\s\xa0]*kirja|[bm]|o(?:nb|m(?:b(?:res)?)?)?|u(?:m(?:erii|rat|b(?:er[is]?)?)?)?)|S(?:tvrta[\s\xa0]*(?:kniha[\s\xa0]*Mojzisova|Mojzisova)|zam(?:ok)?)|Fj(?:arde[\s\xa0]*Mosebok(?:en)?|erde[\s\xa0]*Mos(?:ebo[gk])?)|liv[\s\xa0]*Resansman[\s\xa0]*an|L(?:iber[\s\xa0]*Numeri|b)|Hesabu|Res|Wilangan|K(?:itabu[\s\xa0]*cha[\s\xa0]*Nne[\s\xa0]*cha[\s\xa0]*Musa|njiga[\s\xa0]*Brojeva|s(?:ieg[ai][\s\xa0]*Liczb|\.[\s\xa0]*Liczb|[\s\xa0]*Liczb))|IV(?:\.[\s\xa0]*(?:kniha[\s\xa0]*Mojzisova|Ks(?:ieg[ai][\s\xa0]*Mojzeszowa|\.[\s\xa0]*Mojzeszowa|[\s\xa0]*Mojzeszowa)|Mo(?:oseksen[\s\xa0]*kirja|zes|jz(?:eszowa|isova)?|s(?:ebok)?))|[\s\xa0]*(?:kniha[\s\xa0]*Mojzisova|Ks(?:ieg[ai][\s\xa0]*Mojzeszowa|\.[\s\xa0]*Mojzeszowa|[\s\xa0]*Mojzeszowa)|Mo(?:oseksen[\s\xa0]*kirja|zes|j(?:z(?:eszowa|isova)?)?|s(?:ebok)?)))|C(?:tvrta[\s\xa0]*(?:kniha[\s\xa0]*Mojzisova|Mojzisova)|zwarta[\s\xa0]*(?:Ks(?:ieg[ai][\s\xa0]*Mojzeszowa|\.[\s\xa0]*Mojzeszowa|[\s\xa0]*Mojzeszowa)|Mojz(?:eszowa)?)|ysla)|B(?:[ae]midbar|rojevi|il)|Ennakamam|M(?:ga[\s\xa0]*(?:Bilang|Numeros?)|ozes[\s\xa0]*IV)|gan(?:tiko[\s\xa0]*pustak|ana)|Qo(?:odaabaa|d)|Tir(?:intii)?|4(?:\.[\s\xa0]*(?:kniha[\s\xa0]*Mojzisova|Ks(?:ieg[ai][\s\xa0]*Mojzeszowa|\.[\s\xa0]*Mojzeszowa|[\s\xa0]*Mojzeszowa)|Buch[\s\xa0]*Mose|Mo(?:oseksen[\s\xa0]*kirja|zes|jz(?:eszowa|isova)?|s(?:e(?:bo(?:g|k(?:en)?))?)?)?)|[\s\xa0]*(?:Ks(?:ieg[ai][\s\xa0]*Mojzeszowa|\.[\s\xa0]*Mojzeszowa|[\s\xa0]*Mojzeszowa)|k(?:niha[\s\xa0]*Mojzisova|\.[\s\xa0]*Mojzisova|[\s\xa0]*Mojzisova)|Buch[\s\xa0]*Mose|M(?:o(?:os(?:eksen[\s\xa0]*kirja)?|j(?:z(?:eszowa|isova)?)?|s(?:e(?:bo(?:g|k(?:en)?))?)?|z(?:es)?)?|z)))|Ginatee)|(?:IV(?:\.[\s\xa0]*Mooseksen|[\s\xa0]*Mooseksen)|4(?:\.[\s\xa0]*Mooseksen|[\s\xa0]*Mooseksen)|Resansman|gantiko|N(?:eljas[\s\xa0]*Mooseksen|umer(?:i|os?))|Liczb))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["Sus"],
        apocrypha: true,
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Fortellingen[\\s\\xa0]*om[\\s\\xa0]*Susanna|Opowiadaniem[\\s\\xa0]*o[\\s\\xa0]*Zuzannie|Historia[\\s\\xa0]*(?:de[\\s\\xa0]*Susana|Susannae)|Istoria[\\s\\xa0]*Susanei|Z(?:suz(?:s(?:anna[\\s\\xa0]*es[\\s\\xa0]*a[\\s\\xa0]*venek)?)?|uz(?:an(?:na|[ae]))?)|S(?:toria[\\s\\xa0]*di[\\s\\xa0]*Susanna|i[\\s\\xa0]*Susana|hoshana|wsanna|u(?:s(?:ann(?:e[\\s\\xa0]*(?:et[\\s\\xa0]*les[\\s\\xa0]*(?:deux[\\s\\xa0]*vieillards|vieillards)|au[\\s\\xa0]*bain)|a(?:[\\s\\xa0]*(?:und[\\s\\xa0]*die[\\s\\xa0]*Alten|ja[\\s\\xa0]*vanhimmat|i(?:[\\s\\xa0]*badet|m[\\s\\xa0]*Bade))|h)))?|z(?:an(?:ne[\\s\\xa0]*(?:et[\\s\\xa0]*les[\\s\\xa0]*(?:deux[\\s\\xa0]*vieillards|vieillards)|au[\\s\\xa0]*bain)|a))?)?))|(?:Zsuzsanna|Su(?:zanne|san(?:ei|n(?:e|ae?)|a))))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Sir"],
        apocrypha: true,
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:S(?:apienza[\\s\\xa0]*di[\\s\\xa0]*Sirac(?:ide|h)|yr(?:ak)?|i(?:r(?:a(?:c(?:hovec|id(?:es|as?))|k(?:[\\s\\xa0]*(?:bolcsessege|fia)|s(?:[\\s\\xa0]*(?:Bog|bok)|bok)|i(?:n[\\s\\xa0]*kirja|d[ae]s?))))?)?)|Ang[\\s\\xa0]*Karunungan[\\s\\xa0]*ni[\\s\\xa0]*Jesus(?:,[\\s\\xa0]*Anak[\\s\\xa0]*ni[\\s\\xa0]*Sirac|[\\s\\xa0]*Anak[\\s\\xa0]*ni[\\s\\xa0]*Sirac)|Madrosc[\\s\\xa0]*Syracha|Wijsheid[\\s\\xa0]*van[\\s\\xa0]*(?:J(?:ozua[\\s\\xa0]*Ben[\\s\\xa0]*Sirach|ezus[\\s\\xa0]*Sirach)|Ben[\\s\\xa0]*Sirach)|Oratio[\\s\\xa0]*Iesu[\\s\\xa0]*filii[\\s\\xa0]*Sirach|E(?:c(?:le(?:siastico|ziastic)|c(?:l(?:esiasti(?:que|c(?:ul|o))|us(?:iasticus)?)|s))|k(?:kle(?:s(?:[iy]astik(?:us|o))|ziastik)|l(?:e(?:s(?:[iy]astik(?:us|o))|zjastyka?)|i)))|L(?:a[\\s\\xa0]*Sagesse[\\s\\xa0]*de[\\s\\xa0]*Ben[\\s\\xa0]*Sira|iber[\\s\\xa0]*Ecclesiasticus)|The[\\s\\xa0]*Wisdom[\\s\\xa0]*of[\\s\\xa0]*Jesus(?:,[\\s\\xa0]*Son[\\s\\xa0]*of[\\s\\xa0]*Sirach|[\\s\\xa0]*(?:Son[\\s\\xa0]*of[\\s\\xa0]*Sirach|ben[\\s\\xa0]*Sirach))|Y(?:oshua[\\s\\xa0]*bin[\\s\\xa0]*Sira|bS)|K(?:arunungan[\\s\\xa0]*ng[\\s\\xa0]*Anak[\\s\\xa0]*ni[\\s\\xa0]*Sirac|itab[\\s\\xa0]*Yesus[\\s\\xa0]*bin[\\s\\xa0]*Sirakh|n(?:iha[\\s\\xa0]*(?:Ekleziastikus|Sirachov(?:ho[\\s\\xa0]*syna|c(?:ova|a)))|jiga[\\s\\xa0]*Sirahova)|\\.[\\s\\xa0]*(?:Ekleziastikus|Sirachov(?:ho[\\s\\xa0]*syna|c(?:ova|a)))|[\\s\\xa0]*(?:Ekleziastikus|Sirachov(?:ho[\\s\\xa0]*syna|c(?:ova|a))))|Cartea[\\s\\xa0]*intelepciunii[\\s\\xa0]*lui[\\s\\xa0]*Isus,[\\s\\xa0]*fiul[\\s\\xa0]*lui[\\s\\xa0]*Sirah|Je(?:esus[\\s\\xa0]*Siirakin[\\s\\xa0]*kirja|sus[\\s\\xa0]*S(?:yraks[\\s\\xa0]*vishet|i(?:irakin[\\s\\xa0]*kirja|rach))))|(?:Wisdom[\\s\\xa0]*of[\\s\\xa0]*Jesus(?:,[\\s\\xa0]*Son[\\s\\xa0]*of[\\s\\xa0]*Sirach|[\\s\\xa0]*(?:Son[\\s\\xa0]*of[\\s\\xa0]*Sirach|ben[\\s\\xa0]*Sirach))|Ecclesiasticus|Jezus[\\s\\xa0]*Sirach|Ben[\\s\\xa0]*Sira|S(?:agesse[\\s\\xa0]*de[\\s\\xa0]*Ben[\\s\\xa0]*Sira|yracha|i(?:irakin(?:[\\s\\xa0]*kirja)?|ra(?:k(?:in|h)?|c(?:ide|h(?:ovcova)?)?)?))))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["PrMan"],
        apocrypha: true,
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:La[\\s\\xa0]*(?:Oracion[\\s\\xa0]*de[\\s\\xa0]*Manases|Priere[\\s\\xa0]*de[\\s\\xa0]*Manasse)|Da(?:langin[\\s\\xa0]*ni[\\s\\xa0]*Manases|sal[\\s\\xa0]*ni[\\s\\xa0]*Manases)|Rugaciunea[\\s\\xa0]*(?:regelui[\\s\\xa0]*Manase|lui[\\s\\xa0]*Manase)|Pr(?:e(?:ghiera[\\s\\xa0]*di[\\s\\xa0]*Manasse|ce[\\s\\xa0]*de[\\s\\xa0]*Manasses)|\\.[\\s\\xa0]*Man(?:asse)?|[\\s\\xa0]*Man(?:asse)?|Man)|BMn|G(?:weddi[\\s\\xa0]*Manasse|eb(?:et[\\s\\xa0]*(?:des[\\s\\xa0]*Manasse|Manasses?)|[\\s\\xa0]*Man))|The[\\s\\xa0]*Pr(?:ayer(?:s[\\s\\xa0]*(?:of[\\s\\xa0]*Manasseh|Manasseh)|[\\s\\xa0]*(?:of[\\s\\xa0]*Manasseh|Manasseh))|[\\s\\xa0]*(?:of[\\s\\xa0]*Manasseh|Manasseh))|Or(?:a(?:zione[\\s\\xa0]*di[\\s\\xa0]*Manasse[\\s\\xa0]*Re[\\s\\xa0]*di[\\s\\xa0]*Giuda|tio[\\s\\xa0]*(?:regis[\\s\\xa0]*Manassae|Manassae))|\\.[\\s\\xa0]*Man|[\\s\\xa0]*Man)|M(?:odlit(?:wa[\\s\\xa0]*Manassesa|bu[\\s\\xa0]*Manasse)|an(?:as(?:esova[\\s\\xa0]*modlitba|s(?:ze[\\s\\xa0]*imaja|e(?:n[\\s\\xa0]*rukouksen|s(?:’[\\s\\xa0]*bon|[\\s\\xa0]*bon)|[\\s\\xa0]*(?:imadsaga|bon))))|[\\s\\xa0]*ru))|Ang[\\s\\xa0]*Panalangin[\\s\\xa0]*ni[\\s\\xa0]*Manases)|(?:Ora(?:zione[\\s\\xa0]*di[\\s\\xa0]*Manasse|cion[\\s\\xa0]*de[\\s\\xa0]*Manases)|P(?:analangin[\\s\\xa0]*ni[\\s\\xa0]*Manases|r(?:iere[\\s\\xa0]*de[\\s\\xa0]*Manasse|ayer(?:s[\\s\\xa0]*(?:of[\\s\\xa0]*Manasseh|Manasseh)|[\\s\\xa0]*(?:of[\\s\\xa0]*Manasseh|Manasseh))|[\\s\\xa0]*(?:of[\\s\\xa0]*Manasseh|Manasseh)))|Man(?:as(?:se|e))?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Acts"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Fapt(?:e(?:le[\\s\\xa0]*Apostolilor|[\\s\\xa0]*Apostolilor))?|(?:B(?:uhat[\\s\\xa0]*sa[\\s\\xa0]*mga[\\s\\xa0]*Apostoles|in)|A(?:ng[\\s\\xa0]*Mga[\\s\\xa0]*Binuhatan|k(?:syon[\\s\\xa0]*apot[\\s\\xa0]*yo|dezapot)|z[\\s\\xa0]*(?:apostolok[\\s\\xa0]*cselekedetei|ApCsel)|p(?:ost(?:l(?:enes(?:[\\s\\xa0]*(?:gjerninger|Gerninger)|-?gjerninge)|agarningarna)|elg(?:jerningene|eschichte)|olien[\\s\\xa0]*teot)|postalar[\\s\\xa0]*Pani|[\\s\\xa0]*(?:Csel|t)|\\.(?:[\\s\\xa0]*(?:Csel|t)|[Gt])|[Gt])|c(?:t(?:es[\\s\\xa0]*des[\\s\\xa0]*Apotres|us[\\s\\xa0]*Apostolorum|sss?|a(?:u['’]r[\\s\\xa0]*Apostolion)?)?)?|t(?:ti[\\s\\xa0]*degli[\\s\\xa0]*Apostoli|os[\\s\\xa0]*dos[\\s\\xa0]*Apostolos)?)|H(?:and(?:elingen[\\s\\xa0]*(?:van[\\s\\xa0]*de[\\s\\xa0]*apostelen|der[\\s\\xa0]*apostelen))?|ech?|nd|ch?)|Ebanghelyo[\\s\\xa0]*ng[\\s\\xa0]*Espiritu[\\s\\xa0]*Santo|Sk(?:utky[\\s\\xa0]*apostol(?:ske|ov|u))?|preritharuka[\\s\\xa0]*kam|Yesuusi[\\s\\xa0]*Kiittidoogeetu[\\s\\xa0]*Oosuwaa|T(?:he[\\s\\xa0]*Acts[\\s\\xa0]*of[\\s\\xa0]*the[\\s\\xa0]*Apostles|ravay[\\s\\xa0]*apot[\\s\\xa0]*yo)|P(?:raeriton[\\s\\xa0]*Ke[\\s\\xa0]*Kam|ostulasagan)|F(?:[\\s\\xa0]*Ap|\\.(?:[\\s\\xa0]*Ap|A)|a(?:l(?:imaha[\\s\\xa0]*Rasuullada)?|p)|A)|L(?:os[\\s\\xa0]*Hechos[\\s\\xa0]*de[\\s\\xa0]*los[\\s\\xa0]*Apostoles|elakone[\\s\\xa0]*Para[\\s\\xa0]*Rasul)|Vep(?:rat[\\s\\xa0]*e[\\s\\xa0]*Apostujve)?|G(?:awa[\\s\\xa0]*ng[\\s\\xa0]*Apostoles|w)|M(?:a(?:buting[\\s\\xa0]*Balita[\\s\\xa0]*(?:ayon[\\s\\xa0]*sa[\\s\\xa0]*Espiritu[\\s\\xa0]*Santo|ng[\\s\\xa0]*Espiritu[\\s\\xa0]*Santo)|tendo[\\s\\xa0]*ya[\\s\\xa0]*Mitume)|ga[\\s\\xa0]*Gawa(?:[\\s\\xa0]*ng[\\s\\xa0]*mga[\\s\\xa0]*A(?:postol(?:es)?|lagad)|in)|do)|Osu|Cselekedetek|D(?:ijannja[\\s\\xa0]*svjatyh[\\s\\xa0]*apostoliv|z(?:iej(?:ach[\\s\\xa0]*Apostolskich|e[\\s\\xa0]*Apost(?:olskie)?)|[\\s\\xa0]*Ap)|j(?:ela[\\s\\xa0]*apostolska)?))|(?:Skutky|Dz(?:ieje)?|A(?:ct(?:[ue]s|au|s(?:[\\s\\xa0]*of[\\s\\xa0]*the[\\s\\xa0]*Apostles)?)|t(?:os|ti)|p(?:ostolok(?:[\\s\\xa0]*cselekedetei)?|Csel|g))|M(?:ga[\\s\\xa0]*Gawa|atendo)|Los[\\s\\xa0]*Hechos|G(?:erninger|awa(?:[\\s\\xa0]*ng[\\s\\xa0]*mga[\\s\\xa0]*Apostol)?)|T(?:ravay|eot)|H(?:andelingen|echos(?:[\\s\\xa0]*de[\\s\\xa0]*los[\\s\\xa0]*Apostoles)?)|Veprat(?:[\\s\\xa0]*e[\\s\\xa0]*apostujve)?|Fapte(?:le)?|Para[\\s\\xa0]*Rasul|Binuhatan))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Rev"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Muuj(?:intii)?|O(?:ff(?:enbarung|b)|b(?:['’]javlennja[\\s\\xa0]*Ivana[\\s\\xa0]*Bohoslova|j(?:awienie[\\s\\xa0]*(?:sw(?:\\.[\\s\\xa0]*Jana|[\\s\\xa0]*Jana)|Jana))?)|tk(?:rivenje[\\s\\xa0]*Ivanovo)?|p(?:inberun(?:[\\s\\xa0]*Johannesar|arbok(?:[\\s\\xa0]*Johannesar|in))|enb(?:aring(?:[\\s\\xa0]*van[\\s\\xa0]*Johannes|en))?|b)?)|K(?:niha[\\s\\xa0]*Zjeveni|s(?:ieg(?:[ai][\\s\\xa0]*(?:Apokalipsy|Objawienia))|\\.[\\s\\xa0]*(?:Apokalipsy|Objawienia)|[\\s\\xa0]*(?:Apokalipsy|Objawienia))|itab[\\s\\xa0]*Wahyu)|Gipadayag|Dat(?:gudd(?:iad)?)?|J(?:anos[\\s\\xa0]*jelenesei|oh(?:anne(?:ksen[\\s\\xa0]*ilmestys|s(?:(?:['’][\\s\\xa0]*(?:Abenbaring|apenbaring))|apokalypsen|[\\s\\xa0]*(?:Uppenbarelse|apokalyps)))|s(?:\\.[\\s\\xa0]*Abenbaring|[\\s\\xa0]*Abenbaring))|el(?:enesek)?)|prakatikaran|R(?:e(?:belasyon|v(?:[ao]lations?|lations?|el(?:a(?:syon|tions?))?)?)|iv(?:elazione)?|v)|Velippatuttina[\\s\\xa0]*Vicetankal|U(?:pp(?:enbarelseboken)?|f(?:u(?:nu(?:a[\\s\\xa0]*wa[\\s\\xa0]*Yohana|o[\\s\\xa0]*wa[\\s\\xa0]*Yohan[ae]))?)?)|El[\\s\\xa0]*Apocalipsis|P(?:rakashaitavakya|a(?:medaran|h(?:ayag[\\s\\xa0]*kay[\\s\\xa0]*Juan)?))|Z(?:b(?:u(?:lesa)?)?|j(?:eveni[\\s\\xa0]*(?:svateho[\\s\\xa0]*Jana|Janovo)|av(?:enie[\\s\\xa0]*(?:Apostola[\\s\\xa0]*Jana|svateho[\\s\\xa0]*Jana|Jana))?|v)?)|Ilm(?:estyskirja)?|A(?:abenbaringen|benbaring(?:sbogen|en)|j(?:juutaa|u)|p(?:enbaring(?:sboken|en)|[ck]|o(?:kal(?:yps(?:en|a)|ips(?:is[\\s\\xa0]*ni[\\s\\xa0]*Juan|a[\\s\\xa0]*(?:Swietego[\\s\\xa0]*Jana|sw(?:\\.[\\s\\xa0]*Jana|[\\s\\xa0]*Jana))|zis)?)|c(?:al(?:i(?:sse[\\s\\xa0]*di[\\s\\xa0]*Giovanni|ps(?:a[\\s\\xa0]*lui[\\s\\xa0]*Ioan|is[\\s\\xa0]*ni[\\s\\xa0]*Juan|e[\\s\\xa0]*de[\\s\\xa0]*(?:Sao[\\s\\xa0]*Joao|Joao)))|yps(?:is[\\s\\xa0]*Ioannis[\\s\\xa0]*Apostoli|e[\\s\\xa0]*de[\\s\\xa0]*Jean)?))?)?)?))|(?:Velippatuttina|O(?:tkrivenje|bjawienie|penbaring)|Ap(?:o(?:kalips(?:is|a)|cal(?:i(?:ps(?:is|[ae])|sse)|yps(?:is(?:[\\s\\xa0]*Ioannis)?|e)))|enbaring)|Ilmestys|Pahayag|Zj(?:avenie|eveni)|Ufunuo|Wahyu))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["PrAzar"],
        apocrypha: true,
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:G(?:weddi[\\s\\xa0]*Asarias|eb(?:e(?:d[\\s\\xa0]*van[\\s\\xa0]*Azarja|t[\\s\\xa0]*des[\\s\\xa0]*Asarja)|[\\s\\xa0]*As))|A(?:ng[\\s\\xa0]*Panalangin[\\s\\xa0]*ni[\\s\\xa0]*Azarias|zar(?:jasova[\\s\\xa0]*modlitba|ias[\\s\\xa0]*ima(?:dsaga|ja))|sar(?:ias(?:’[\\s\\xa0]*bon|[\\s\\xa0]*bon)|ja(?:n[\\s\\xa0]*rukous|s(?:’[\\s\\xa0]*bon|[\\s\\xa0]*bon))|[\\s\\xa0]*ru))|Sal(?:mo[\\s\\xa0]*de[\\s\\xa0]*Azarias|[\\s\\xa0]*Azar)|Rugaciunea[\\s\\xa0]*lui[\\s\\xa0]*Azaria|P(?:iesn[\\s\\xa0]*Azariasza|r(?:eghiera[\\s\\xa0]*di[\\s\\xa0]*Azaria|\\.[\\s\\xa0]*Azar|[\\s\\xa0]*Azar|Az(?:ar|r)))|The[\\s\\xa0]*Pr(?:ayer(?:s[\\s\\xa0]*of[\\s\\xa0]*Azariah?|[\\s\\xa0]*of[\\s\\xa0]*Azariah?)|[\\s\\xa0]*of[\\s\\xa0]*Azariah?)|Modlitwa[\\s\\xa0]*Azariasza|La[\\s\\xa0]*Priere[\\s\\xa0]*d['’]Azaria[hs]|Or(?:a(?:cion[\\s\\xa0]*de[\\s\\xa0]*Azarias|tio[\\s\\xa0]*Azariae)|\\.[\\s\\xa0]*Azar|[\\s\\xa0]*Az(?:ar)?)|Cantico[\\s\\xa0]*de[\\s\\xa0]*Azarias)|(?:P(?:analangin[\\s\\xa0]*ni[\\s\\xa0]*Azarias|r(?:ayer(?:s[\\s\\xa0]*of[\\s\\xa0]*Azariah?|[\\s\\xa0]*of[\\s\\xa0]*Azariah?)|iere[\\s\\xa0]*d['’]Azaria[sh]|[\\s\\xa0]*of[\\s\\xa0]*Azariah?))|Azaria[sh]?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["SgThree"],
        apocrypha: true,
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])((?:Gezang[\s\xa0]*der[\s\xa0]*drie[\s\xa0]*mannen[\s\xa0]*in[\s\xa0]*het[\s\xa0]*vuur|L(?:obgesang[\s\xa0]*der[\s\xa0]*(?:drei[\s\xa0]*jungen[\s\xa0]*Manner[\s\xa0]*im[\s\xa0]*Feuerofen|3[\s\xa0]*jungen[\s\xa0]*Manner)|ied[\s\xa0]*van[\s\xa0]*de[\s\xa0]*drie[\s\xa0]*jongemannen|3J)|Pi(?:esen[\s\xa0]*mladencov[\s\xa0]*v[\s\xa0]*ohnivej[\s\xa0]*peci|sen[\s\xa0]*mladencu[\s\xa0]*v[\s\xa0]*horici[\s\xa0]*peci)|El[\s\xa0]*(?:Canto[\s\xa0]*de[\s\xa0]*los[\s\xa0]*(?:Tres[\s\xa0]*Jovenes[\s\xa0]*(?:Hebreos|Judios)|3[\s\xa0]*Jovenes[\s\xa0]*(?:Hebreos|Judios))|Himno[\s\xa0]*de[\s\xa0]*los[\s\xa0]*(?:Tres[\s\xa0]*Jovenes[\s\xa0]*(?:Hebreos|Judios)|3[\s\xa0]*Jovenes[\s\xa0]*(?:Hebreos|Judios)))|De(?:r[\s\xa0]*Gesang[\s\xa0]*der[\s\xa0]*Drei[\s\xa0]*Manner[\s\xa0]*im[\s\xa0]*feurigen[\s\xa0]*Ofen|[\s\xa0]*tre[\s\xa0]*m(?:annens[\s\xa0]*lovsang|enns[\s\xa0]*sang))|3[\s\xa0]*tineri|Aw(?:it[\s\xa0]*ng[\s\xa0]*(?:Tatlong[\s\xa0]*(?:Kabataan(?:g[\s\xa0]*Banal)?|B(?:anal[\s\xa0]*na[\s\xa0]*Kabataan|inata))|3[\s\xa0]*Kabataan)|[\s\xa0]*ng[\s\xa0]*3[\s\xa0]*Kab)|S(?:ong[\s\xa0]*Three|ng[\s\xa0]*Three|\.[\s\xa0]*(?:of[\s\xa0]*(?:Th(?:ree(?:\.[\s\xa0]*(?:Ch|Y)|[\s\xa0]*(?:Ch|Y))|\.[\s\xa0]*(?:Ch|Y)|[\s\xa0]*(?:Ch|Y))|3(?:\.[\s\xa0]*(?:Ch|Y)|[\s\xa0]*(?:Ch|Y)))|Th(?:ree(?:\.[\s\xa0]*(?:Ch|Y)|[\s\xa0]*(?:Ch|Y))|\.[\s\xa0]*(?:Ch|Y)|[\s\xa0]*(?:Ch|Y))|3(?:\.[\s\xa0]*(?:Ch|Y)|[\s\xa0]*(?:Ch|Y)))|g(?:Three|[\s\xa0]*Thr(?:ee)?)|[\s\xa0]*(?:of[\s\xa0]*(?:Th(?:ree(?:\.[\s\xa0]*(?:Ch|Y)|[\s\xa0]*(?:Ch|Y))|\.[\s\xa0]*(?:Ch|Y)|[\s\xa0]*(?:Ch|Y))|3(?:\.[\s\xa0]*(?:Ch|Y)|[\s\xa0]*(?:Ch|Y)))|Th(?:ree(?:\.[\s\xa0]*(?:Ch|Y)|[\s\xa0]*(?:Ch|Y))|\.[\s\xa0]*(?:Ch|Y)|[\s\xa0]*(?:Ch|Y))|3(?:\.[\s\xa0]*(?:Ch|Y)|[\s\xa0]*(?:Ch|Y))))|H(?:arom[\s\xa0]*fiatalember[\s\xa0]*eneke|ymnus[\s\xa0]*trium[\s\xa0]*puerorum)|T(?:r(?:aja[\s\xa0]*mladenci[\s\xa0]*v[\s\xa0]*rozpalenej[\s\xa0]*peci|i[\s\xa0]*muzi[\s\xa0]*v[\s\xa0]*rozpalene[\s\xa0]*peci)|he[\s\xa0]*Song[\s\xa0]*of[\s\xa0]*(?:Three[\s\xa0]*(?:Holy[\s\xa0]*Children|You(?:ng[\s\xa0]*Men|ths)|Jews)|the[\s\xa0]*(?:Three[\s\xa0]*(?:Holy[\s\xa0]*Children|You(?:ng[\s\xa0]*Men|ths)|Jews)|3[\s\xa0]*(?:Holy[\s\xa0]*Children|You(?:ng[\s\xa0]*Men|ths)|Jews))|3[\s\xa0]*(?:Holy[\s\xa0]*Children|You(?:ng[\s\xa0]*Men|ths)|Jews)))|Wimbo[\s\xa0]*wa[\s\xa0]*Vijana[\s\xa0]*Watatu|Kolmen[\s\xa0]*(?:nuoren[\s\xa0]*miehen[\s\xa0]*ollessa[\s\xa0]*tulisessa[\s\xa0]*patsissa|miehen[\s\xa0]*kiitosvirsi[\s\xa0]*tulessa)|C(?:an(?:t(?:area[\s\xa0]*celor[\s\xa0]*trei[\s\xa0]*(?:tineri|evrei)|i(?:que[\s\xa0]*des[\s\xa0]*(?:Trois[\s\xa0]*Enfants|3[\s\xa0]*Enfants)|co[\s\xa0]*d(?:ei[\s\xa0]*tre[\s\xa0]*(?:giovani[\s\xa0]*nella[\s\xa0]*fornace|fanciulli)|os[\s\xa0]*(?:Tres[\s\xa0]*Jovens|3[\s\xa0]*Jovens))))|[\s\xa0]*y[\s\xa0]*Tri[\s\xa0]*L(?:lanc|anc))|t[\s\xa0]*3[\s\xa0]*(?:Jo|E)|3J))|(?:T(?:atlong[\s\xa0]*Kabataan|re(?:s[\s\xa0]*Jovenes|i[\s\xa0]*tineri))|Lobgesang[\s\xa0]*der[\s\xa0]*drei[\s\xa0]*jungen[\s\xa0]*Manner|Der[\s\xa0]*Gesang[\s\xa0]*der[\s\xa0]*Drei|Kolmen[\s\xa0]*(?:nuoren[\s\xa0]*miehen|miehen(?:[\s\xa0]*kiitosvirsi)?)|3[\s\xa0]*Jovenes|Canto[\s\xa0]*de[\s\xa0]*los[\s\xa0]*(?:Tres[\s\xa0]*Jovenes(?:[\s\xa0]*(?:Hebreos|Judios))?|3[\s\xa0]*Jovenes(?:[\s\xa0]*(?:Hebreos|Judios))?)|Song[\s\xa0]*of[\s\xa0]*(?:Three[\s\xa0]*(?:Holy[\s\xa0]*Children|You(?:ng[\s\xa0]*Men|ths)|Jews)|the[\s\xa0]*(?:Three[\s\xa0]*(?:Holy[\s\xa0]*Children|You(?:ng[\s\xa0]*Men|ths)|Jews)|3[\s\xa0]*(?:Holy[\s\xa0]*Children|You(?:ng[\s\xa0]*Men|ths)|Jews))|3[\s\xa0]*(?:Holy[\s\xa0]*Children|You(?:ng[\s\xa0]*Men|ths)|Jews))|Himno[\s\xa0]*de[\s\xa0]*los[\s\xa0]*(?:Tres[\s\xa0]*Jovenes(?:[\s\xa0]*Judios)?|3[\s\xa0]*Jovenes(?:[\s\xa0]*(?:Hebreos|Judios))?)|Gesang[\s\xa0]*der[\s\xa0]*Drei))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["2Pet"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])(2[\s\xa0]*p(?:etracem|atr(?:usko|as))|(?:Masodik[\s\xa0]*Pet(?:er)?|Epistula[\s\xa0]*(?:II[\s\xa0]*Petri|Petri[\s\xa0]*II)|Zweite[\s\xa0]*Petrus|Se(?:gund(?:a[\s\xa0]*Pedro|o[\s\xa0]*(?:San[\s\xa0]*Pedro|Pedro))|cond(?:a[\s\xa0]*(?:lettera[\s\xa0]*di[\s\xa0]*Pietro|Pietro)|o[\s\xa0]*Pietro|[\s\xa0]*P(?:e(?:r|t(?:er?|r)?)?|tr?)?))|p(?:atrusko[\s\xa0]*dostro[\s\xa0]*patra|etracem[\s\xa0]*dusre[\s\xa0]*patra)|B(?:arua[\s\xa0]*ya[\s\xa0]*Pili[\s\xa0]*ya[\s\xa0]*Petro|utros[\s\xa0]*Labaad)|2(?:d(?:\.[\s\xa0]*Pierre|e(?:\.[\s\xa0]*Pierre|[\s\xa0]*Pierre)|[\s\xa0]*Pierre)|a(?:\.[\s\xa0]*Pedro|[\s\xa0]*Pedro)|o(?:\.[\s\xa0]*(?:San[\s\xa0]*Pedro|Pedro)|[\s\xa0]*(?:San[\s\xa0]*Pedro|Pedro))|e(?:me(?:\.[\s\xa0]*Pierre|[\s\xa0]*Pierre)|\.[\s\xa0]*P(?:ierre|et(?:r(?:us)?)?)|[\s\xa0]*P(?:ierre|et(?:r(?:us)?)?))|nd(?:\.[\s\xa0]*P(?:e(?:r|t(?:er?|r)?)?|tr?)?|[\s\xa0]*P(?:e(?:r|t(?:er?|r)?)?|tr?)?)|\.(?:o(?:\.[\s\xa0]*(?:San[\s\xa0]*Pedro|Pedro)|[\s\xa0]*(?:San[\s\xa0]*Pedro|Pedro))|[\s\xa0]*(?:List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Piotra|[\s\xa0]*Piotra)|Piotra)|list[\s\xa0]*Petruv|San[\s\xa0]*Pedro|patrusko|But(?:ros)?|P(?:ataras|jetrit|hia|i(?:otra?|e(?:rre|t(?:arin[\s\xa0]*kirje|ro))?)|ye|e(?:dro?|r|t(?:e(?:r(?:s(?:brev)?)?)?|r(?:i|o(?:v(?:a[\s\xa0]*Poslanica)?)?|u(?:s(?:brevet)?|v)?)?)?)?|tr?)?))|Pet|[\s\xa0]*(?:List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Piotra|[\s\xa0]*Piotra)|Piotra)|list[\s\xa0]*Petruv|San[\s\xa0]*Pedro|(?:[ei](?:\.[\s\xa0]*Pjetrit|[\s\xa0]*Pjetrit))|k(?:\.[\s\xa0]*Petrov|[\s\xa0]*Petrov)|But(?:ros)?|P(?:j(?:e(?:trit)?)?|[yH]e|ataras|d|e(?:d(?:ro?)?|r|t(?:uru|e(?:r(?:s(?:brev)?)?)?|r(?:i|o(?:v(?:a[\s\xa0]*Poslanica)?)?|u(?:s(?:brevet)?|v)?)?)?)?|hia|tr?|i(?:otra?|e(?:rre|t(?:arin[\s\xa0]*kirje|ro)?)?)?)?))|Waraka[\s\xa0]*wa[\s\xa0]*Pili[\s\xa0]*wa[\s\xa0]*Petro|P(?:et(?:uru[\s\xa0]*Elutiya[\s\xa0]*Irantavatu[\s\xa0]*Nirupam|ers[\s\xa0]*(?:Andet[\s\xa0]*Brev|andre[\s\xa0]*brev)|r(?:us[\s\xa0]*andra[\s\xa0]*brev|o[\s\xa0]*II))|ili[\s\xa0]*Pet(?:ro)?)|T(?:oinen[\s\xa0]*Pietarin[\s\xa0]*kirje|weede[\s\xa0]*Pet(?:r(?:us)?)?)|And(?:e(?:t[\s\xa0]*Petersbrev|n[\s\xa0]*Pet(?:er(?:sbrev)?)?)|r(?:a[\s\xa0]*Petrusbrevet|e[\s\xa0]*Pet(?:er(?:s(?:brev)?)?)?))|Naa77antto[\s\xa0]*PHeexiroosa|I(?:kalawang[\s\xa0]*Pedro|I(?:\.[\s\xa0]*(?:List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Piotra|[\s\xa0]*Piotra)|Piotra)|list[\s\xa0]*Petruv|San[\s\xa0]*Pedro|But(?:ros)?|P(?:hia|i(?:otra?|e(?:rre|t(?:arin[\s\xa0]*kirje|ro))?)|ye|e(?:dro?|r|t(?:er?|r(?:i|o(?:v(?:a[\s\xa0]*Poslanica)?)?|u[sv]?)?)?)?|tr?)?)|[\s\xa0]*(?:List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Piotra|[\s\xa0]*Piotra)|Piotra)|list[\s\xa0]*Petruv|San[\s\xa0]*Pedro|But(?:ros)?|P(?:hia|i(?:otra?|e(?:rre|t(?:arin[\s\xa0]*kirje|ro))?)|ye|e(?:dro?|r|t(?:er?|r(?:o(?:v(?:a[\s\xa0]*Poslanica)?)?|u[sv]?)?)?)?|tr?)?)))|D(?:e(?:uxieme(?:s[\s\xa0]*Pierre|[\s\xa0]*Pierre)|zyem[\s\xa0]*P[iy]e)|ru(?:g(?:a[\s\xa0]*(?:List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Piotra|[\s\xa0]*Piotra)|Piotra)|P(?:etrova[\s\xa0]*Poslanica|iotra?))|i[\s\xa0]*(?:List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Piotra|[\s\xa0]*Piotra)|Piotra)|Piotra?))|h(?:e[\s\xa0]*poslannja[\s\xa0]*apostola[\s\xa0]*Petra|a[\s\xa0]*(?:kniha[\s\xa0]*Petrov|list[\s\xa0]*Petruv|P(?:etr(?:ova?|uv)?|t)?)|y[\s\xa0]*(?:list[\s\xa0]*Petr[ou]v|P(?:etr(?:ov(?:[\s\xa0]*list|a)|uv)?|t)?)))))|(?:Toinen[\s\xa0]*Pietarin|Dru(?:ga[\s\xa0]*Petrova(?:[\s\xa0]*poslanica)?|hy[\s\xa0]*Petrov)|2(?:\.[\s\xa0]*P(?:ietarin|etrova)|[\s\xa0]*P(?:ietarin|etrova))|Petri[\s\xa0]*II|II(?:\.[\s\xa0]*P(?:ietarin|etrova)|[\s\xa0]*P(?:ietarin|etr(?:ova|i)))))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["1Pet"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])(1[\s\xa0]*p(?:etracem|atr(?:usko|as))|(?:1(?:re(?:\.[\s\xa0]*Pierre|[\s\xa0]*Pierre)|a(?:\.[\s\xa0]*Pedro|[\s\xa0]*Pedro)|o(?:\.[\s\xa0]*(?:San[\s\xa0]*Pedro|Pedro)|[\s\xa0]*(?:San[\s\xa0]*Pedro|Pedro))|e(?:r(?:\.[\s\xa0]*Pierre|e(?:\.[\s\xa0]*Pierre|[\s\xa0]*Pierre)|[\s\xa0]*Pierre)|\.[\s\xa0]*Pet(?:r(?:us)?)?|[\s\xa0]*Pet(?:r(?:us)?)?)|st(?:\.[\s\xa0]*P(?:e(?:r|t(?:er?|r)?)?|tr?)?|[\s\xa0]*P(?:e(?:r|t(?:er?|r)?)?|tr?)?)|\.(?:o(?:\.[\s\xa0]*(?:San[\s\xa0]*Pedro|Pedro)|[\s\xa0]*(?:San[\s\xa0]*Pedro|Pedro))|[\s\xa0]*(?:List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Piotra|[\s\xa0]*Piotra)|Piotra)|list[\s\xa0]*Petruv|San[\s\xa0]*Pedro|patrusko|But(?:ros)?|P(?:ataras|jetrit|hia|i(?:otra?|e(?:rre|t(?:arin[\s\xa0]*kirje|ro))?)|ye|e(?:dro?|r|t(?:e(?:r(?:s(?:brev)?)?)?|r(?:i|o(?:v(?:a[\s\xa0]*Poslanica)?)?|u(?:s(?:brevet)?|v)?)?)?)?|tr?)?))|Pet|[\s\xa0]*(?:List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Piotra|[\s\xa0]*Piotra)|Piotra)|list[\s\xa0]*Petruv|San[\s\xa0]*Pedro|(?:[ei](?:\.[\s\xa0]*Pjetrit|[\s\xa0]*Pjetrit))|k(?:\.[\s\xa0]*Petrov|[\s\xa0]*Petrov)|But(?:ros)?|P(?:j(?:e(?:trit)?)?|[yH]e|ataras|d|e(?:d(?:ro?)?|r|t(?:uru|e(?:r(?:s(?:brev)?)?)?|r(?:i|o(?:v(?:a[\s\xa0]*Poslanica)?)?|u(?:s(?:brevet)?|v)?)?)?)?|hia|tr?|i(?:otra?|e(?:rre|t(?:arin[\s\xa0]*kirje|ro)?)?)?)?))|Una(?:ng[\s\xa0]*Pedro|[\s\xa0]*Pedro)|E(?:nsimmainen[\s\xa0]*Pietarin[\s\xa0]*kirje|pistula[\s\xa0]*(?:I[\s\xa0]*Petri|Petri[\s\xa0]*I)|rste[\s\xa0]*Petrus|erste[\s\xa0]*Pet(?:r(?:us)?)?|lso[\s\xa0]*Pet(?:er)?)|Waraka[\s\xa0]*wa[\s\xa0]*Kwanza[\s\xa0]*wa[\s\xa0]*Petro|P(?:ierwsz(?:[aey][\s\xa0]*(?:List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Piotra|[\s\xa0]*Piotra)|Piotra)|Piotra?))|e(?:rse[\s\xa0]*poslannja[\s\xa0]*apostola[\s\xa0]*Petra|t(?:uru[\s\xa0]*Elutiya[\s\xa0]*Mutalavatu[\s\xa0]*Nirupam|ers[\s\xa0]*1(?:\.[\s\xa0]*Brev|[\s\xa0]*Brev)|r(?:us[\s\xa0]*forsta[\s\xa0]*brev|o[\s\xa0]*I)))|r(?:im(?:a[\s\xa0]*(?:lettera[\s\xa0]*di[\s\xa0]*Pietro|Pietro)|e(?:ir[ao][\s\xa0]*Pedro|r(?:o[\s\xa0]*(?:San[\s\xa0]*Pedro|Pedro)|[\s\xa0]*(?:San[\s\xa0]*Pedro|Pedro)))|o[\s\xa0]*Pietro)|em(?:ier(?:e(?:s[\s\xa0]*Pierre|[\s\xa0]*Pierre)|s[\s\xa0]*Pierre|[\s\xa0]*Pierre)|ye[\s\xa0]*P[iy]e)|v(?:y[\s\xa0]*(?:Petrov[\s\xa0]*list|list[\s\xa0]*Petrov)|a[\s\xa0]*(?:kniha[\s\xa0]*Petrov|Petrov(?:a[\s\xa0]*Poslanica)?)|ni[\s\xa0]*(?:list[\s\xa0]*Petruv|P(?:etr(?:ova|uv)?|t)?))))|p(?:atrusko[\s\xa0]*pahilo[\s\xa0]*patra|etracem[\s\xa0]*pahile[\s\xa0]*patra)|K(?:oiro[\s\xa0]*PHeexiroosa|wanza[\s\xa0]*Pet(?:ro)?)|B(?:arua[\s\xa0]*ya[\s\xa0]*Kwanza[\s\xa0]*ya[\s\xa0]*Petro|utros[\s\xa0]*Kowaad)|I(?:\.[\s\xa0]*(?:List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Piotra|[\s\xa0]*Piotra)|Piotra)|list[\s\xa0]*Petruv|San[\s\xa0]*Pedro|But(?:ros)?|P(?:hia|i(?:otra?|e(?:rre|t(?:arin[\s\xa0]*kirje|ro))?)|ye|e(?:dro?|r|t(?:er?|r(?:i|o(?:v(?:a[\s\xa0]*Poslanica)?)?|u[sv]?)?)?)?|tr?)?)|[\s\xa0]*(?:List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Piotra|[\s\xa0]*Piotra)|Piotra)|list[\s\xa0]*Petruv|San[\s\xa0]*Pedro|But(?:ros)?|P(?:hia|i(?:otra?|e(?:rre|t(?:arin[\s\xa0]*kirje|ro))?)|ye|e(?:dro?|r|t(?:er?|r(?:o(?:v(?:a[\s\xa0]*Poslanica)?)?|u[sv]?)?)?)?|tr?)?))|F(?:orsta[\s\xa0]*Petrusbrevet|yrra[\s\xa0]*(?:almenna[\s\xa0]*bref[\s\xa0]*Peturs|Petursbref)|irst[\s\xa0]*P(?:e(?:r|t(?:er?|r)?)?|tr?)?))|(?:Ensimmainen[\s\xa0]*Pietarin|1(?:\.[\s\xa0]*P(?:ietarin|etrova)|[\s\xa0]*P(?:ietarin|etrova))|I(?:\.[\s\xa0]*P(?:ietarin|etrova)|[\s\xa0]*P(?:ietarin|etr(?:ova|i)))|P(?:rv(?:a[\s\xa0]*Petrova(?:[\s\xa0]*poslanica)?|y[\s\xa0]*Petrov)|et(?:ri[\s\xa0]*I|er))))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["Rom"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(rom(?:iharulai[\\s\\xa0]*patra|karams[\\s\\xa0]*patra)|(?:P(?:oslannja[\\s\\xa0]*apostola[\\s\\xa0]*Pavla[\\s\\xa0]*do[\\s\\xa0]*rymljan|a(?:vlova[\\s\\xa0]*poslanica[\\s\\xa0]*Rimljanima|ulus['’][\\s\\xa0]*Brev[\\s\\xa0]*til[\\s\\xa0]*Romerne))|Waraka[\\s\\xa0]*kwa[\\s\\xa0]*War(?:oma|umi)|Epistula[\\s\\xa0]*ad[\\s\\xa0]*Romanos|Mga[\\s\\xa0]*Taga(?:[\\s\\xa0]*Roma|-?(?:[\\s\\xa0]*Roma|Roma))|B(?:ref[\\s\\xa0]*Pals[\\s\\xa0]*til[\\s\\xa0]*Romverja|arua[\\s\\xa0]*kwa[\\s\\xa0]*Waroma)|Sulat[\\s\\xa0]*sa[\\s\\xa0]*mga[\\s\\xa0]*Romano|L(?:ayang[\\s\\xa0]*Paulus[\\s\\xa0]*Roma|ettera[\\s\\xa0]*ai[\\s\\xa0]*Romani|ist[\\s\\xa0]*(?:do[\\s\\xa0]*Rzymian|Riman[ou]m))|R(?:pmans|huf(?:einiaid)?|im(?:skym)?|um|m(?:ns?|s)?|o(?:amns|emer|om(?:a(?:laiskirje)?|e)?|m(?:iyon|a(?:rbrevet|keve|i(?:akhoz|ns)|sn|n(?:ds|s)?)|e(?:inen(?:brief)?|n|r(?:brevet)?)|s)?|s)?|z(?:ym)?)?|Uromarukku[\\s\\xa0]*Elutiya[\\s\\xa0]*Nirupam|Kirje[\\s\\xa0]*roomalaisille)|(?:P(?:aulus’[\\s\\xa0]*brev[\\s\\xa0]*til[\\s\\xa0]*romerne|oslanica[\\s\\xa0]*Rimljanima)|Uromarukku|ad[\\s\\xa0]*Romanos|rom(?:iharulai|karams)|Taga(?:-?[\\s\\xa0]*Roma|[\\s\\xa0]*Roma)|War(?:oma|umi)|R(?:zymian|im(?:ljanima|an[ou]m)|o(?:omalaisille|m(?:erne|a(?:n(?:os?|i))?)))))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Song"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:C(?:hante[\\s\\xa0]*Salomon|an(?:iad(?:[\\s\\xa0]*Solomon|au)|t(?:i(?:que[\\s\\xa0]*des[\\s\\xa0]*Cantiques|c(?:um[\\s\\xa0]*Canticorum|o(?:s[\\s\\xa0]*dos[\\s\\xa0]*Canticos|[\\s\\xa0]*(?:Superlativo|d(?:os[\\s\\xa0]*Canticos|i[\\s\\xa0]*Salomone|e(?:i[\\s\\xa0]*Cantici|[\\s\\xa0]*Salomao))))))|\\.[\\s\\xa0]*Cantic|[\\s\\xa0]*Cantic|ar(?:e(?:[\\s\\xa0]*de[\\s\\xa0]*los[\\s\\xa0]*Cantares|a[\\s\\xa0]*(?:lui[\\s\\xa0]*Solomon|Cantarilor)|s[\\s\\xa0]*de[\\s\\xa0]*Salomao)|i)))?|nt|t)|H(?:o(?:he(?:lied[\\s\\xa0]*Salomonis|s(?:lied[\\s\\xa0]*Salomos|[\\s\\xa0]*Lied))|ga(?:[\\s\\xa0]*(?:visan|V)|v)|ogl(?:ied)?|js)|ld?)|gitratna|Gab(?:aygii[\\s\\xa0]*Sulaymaan)?|E(?:l[\\s\\xa0]*Cantar[\\s\\xa0]*de[\\s\\xa0]*los[\\s\\xa0]*Cantares|nekek[\\s\\xa0]*eneke)|Wim(?:bo[\\s\\xa0]*(?:Ulio[\\s\\xa0]*Bora|Bora))?|The[\\s\\xa0]*Song(?:s[\\s\\xa0]*of[\\s\\xa0]*S(?:alom[ao]ns?|o(?:lom[ao]ns?|ngs?))|[\\s\\xa0]*of[\\s\\xa0]*S(?:alom[ao]ns?|o(?:lom[ao]ns?|ngs?)))|L(?:aul(?:ujen[\\s\\xa0]*laulu|\\.[\\s\\xa0]*l|[\\s\\xa0]*l)|jl)|P(?:NP|i(?:es(?:n[\\s\\xa0]*(?:nad[\\s\\xa0]*Piesniami|Salomona)|en[\\s\\xa0]*(?:Salamunova|piesni))?|s(?:nja[\\s\\xa0]*nad[\\s\\xa0]*pisnjamy|en[\\s\\xa0]*(?:Salamounova|pisni))?)|j(?:esma[\\s\\xa0]*nad[\\s\\xa0]*pjesmama)?)|A(?:ng[\\s\\xa0]*Awit[\\s\\xa0]*n(?:g[\\s\\xa0]*mga[\\s\\xa0]*Awit|i[\\s\\xa0]*S[ao]lomon)|w(?:it[\\s\\xa0]*sa[\\s\\xa0]*mga[\\s\\xa0]*Awit|[\\s\\xa0]*ni[\\s\\xa0]*S))|V(?:elp(?:iesen[\\s\\xa0]*Salamunova)?|lp)|S(?:alamon[\\s\\xa0]*eneke|[\\s\\xa0]*of[\\s\\xa0]*S|i(?:iquwaa[\\s\\xa0]*Sabaa|q)|ngs?|S|gs?|o[Sln]?)|Unnatappattu|Reshthageet|Musthikaning[\\s\\xa0]*Kidung|K(?:idung[\\s\\xa0]*Agung|orkea[\\s\\xa0]*veisu|ant(?:i(?:d[\\s\\xa0]*de[\\s\\xa0]*Kantik|k(?:u(?:[\\s\\xa0]*i[\\s\\xa0]*Kantikeve|lo)|o)))?))|(?:Awit[\\s\\xa0]*n(?:g[\\s\\xa0]*mga[\\s\\xa0]*Awit|i[\\s\\xa0]*S[ao]lomon)|Velpiesen|Gabaygii|Ho(?:he(?:slied|lied)|ga(?:[\\s\\xa0]*v)?)|Song(?:s[\\s\\xa0]*of[\\s\\xa0]*S(?:alom[ao]ns?|o(?:lom[oa]ns?|ngs?))|[\\s\\xa0]*of[\\s\\xa0]*S(?:alom[oa]ns?|o(?:lom[oa]ns?|ngs?)))?|C(?:hante|ant(?:ar(?:[\\s\\xa0]*de[\\s\\xa0]*los[\\s\\xa0]*Cantares|e(?:a[\\s\\xa0]*cantarilor|s))|i(?:que(?:[\\s\\xa0]*des[\\s\\xa0]*cantiques|s)?|c(?:um[\\s\\xa0]*canticorum|o(?:[\\s\\xa0]*dei[\\s\\xa0]*cantici|s)?)))?)|P(?:i(?:esen|sen)|np)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Prov"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:P(?:ildele[\\s\\xa0]*lui[\\s\\xa0]*Solomon|o(?:slovice|rverb(?:ios|s)|verb(?:ios|s))|eld(?:abeszedek)?|r(?:ypovisti|everb(?:ios?|s)?|is(?:lovi(?:[\\s\\xa0]*Salomounova|a))?|o(?:b(?:verb(?:ios|s)|erb(?:ios|s))|v(?:e(?:b(?:ios|s)|rb(?:e(?:le[\\s\\xa0]*lui[\\s\\xa0]*Solomon|s)?|i(?:a|os?)?|s)?))?)?|v(?:erb(?:ios?|s)?|b(?:os?|s)?)?|z(?:y(?:p(?:owiesci[\\s\\xa0]*Salomonowych)?)?)?)?|[vw])|Fjalet[\\s\\xa0]*e[\\s\\xa0]*urta|Diar(?:hebion|ebion)?|hitopadesko[\\s\\xa0]*pustak|L(?:i(?:ber[\\s\\xa0]*Proverbiorum|v[\\s\\xa0]*Pwoveb[\\s\\xa0]*yo)|e(?:emiso|m))|Izr|O(?:r(?:overbs|ds(?:p(?:r(?:ak(?:sboken|ene)|ogene(?:s[\\s\\xa0]*Bog)?))?)?)|kv)|Wulang[\\s\\xa0]*Bebasan|N(?:eetivachan|itimolikal)|K(?:s(?:ieg[ai][\\s\\xa0]*Przypowiesci[\\s\\xa0]*Salomona|\\.[\\s\\xa0]*Przypowiesci[\\s\\xa0]*Salomona|[\\s\\xa0]*Przypowiesci[\\s\\xa0]*Salomona)|niha[\\s\\xa0]*prislovi|\\.[\\s\\xa0]*prislovi|[\\s\\xa0]*prislovi|aw)|S(?:a(?:lomos[\\s\\xa0]*Ordspr(?:ak|og)|nanl(?:asku(?:jen[\\s\\xa0]*kirja|t))?)|nl|pr(?:ichworter|euken|u(?:eche|che))?)|nitisutre|M(?:ga[\\s\\xa0]*(?:Panultihon|Kawikaan)|udre[\\s\\xa0]*izreke|aah(?:maahyadii)?|eth(?:ali)?|it(?:h(?:ali)?)?))|(?:Sananlaskujen|hitopadesko|Kawikaan|P(?:anultihon|r(?:overbele|islovi)|woveb)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Wis"],
        apocrypha: true,
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Vi(?:is(?:auden[\\s\\xa0]*kirja)?|s(?:d(?:ommen(?:s[\\s\\xa0]*(?:Bog|bok))?)?|h(?:eten(?:s[\\s\\xa0]*bok)?)?))|Intelepciunea[\\s\\xa0]*lui[\\s\\xa0]*Solomon|Liber[\\s\\xa0]*Sapientiae|S(?:peki[\\s\\xa0]*Salomons|Sal|a(?:gesse[\\s\\xa0]*de[\\s\\xa0]*Salomon|l(?:amon[\\s\\xa0]*bolcsessege|omo(?:n[\\s\\xa0]*viisaus|s[\\s\\xa0]*(?:Visdom|vishet)))|b(?:edoria[\\s\\xa0]*de[\\s\\xa0]*Salomao|iduria)?|p(?:ien(?:za[\\s\\xa0]*di[\\s\\xa0]*Salomone|t(?:ia[\\s\\xa0]*Salomonis)?))?)|b)|K(?:n(?:iha[\\s\\xa0]*Moudrosti|jiga[\\s\\xa0]*Mudrosti)|s(?:ieg[ai][\\s\\xa0]*Madrosci|\\.[\\s\\xa0]*Madrosci|[\\s\\xa0]*Madrosci)|a(?:wicaksanan[\\s\\xa0]*Salomo|r))|D(?:e[\\s\\xa0]*wijsheid[\\s\\xa0]*van[\\s\\xa0]*Salomo|oethineb[\\s\\xa0]*Solomon)|M(?:oudrost[\\s\\xa0]*Salomounova|adr(?:osc[\\s\\xa0]*Salomona)?|dr|ud(?:r(?:ost)?)?)|Cartea[\\s\\xa0]*intelepciunii[\\s\\xa0]*lui[\\s\\xa0]*Solomon|Weish(?:eit[\\s\\xa0]*Salomos)?|Bolcs(?:esseg)?|He(?:t[\\s\\xa0]*boek[\\s\\xa0]*der[\\s\\xa0]*wijsheid|k(?:ima[\\s\\xa0]*ya[\\s\\xa0]*Solomoni)?)|Ang[\\s\\xa0]*Karunungan[\\s\\xa0]*ni[\\s\\xa0]*S[ao]lomon|The[\\s\\xa0]*Wis(?:om[\\s\\xa0]*of[\\s\\xa0]*Solomon|d(?:om[\\s\\xa0]*of[\\s\\xa0]*Solomon|[\\s\\xa0]*of[\\s\\xa0]*Solomon)|[\\s\\xa0]*of[\\s\\xa0]*Solomon))|(?:Cartea[\\s\\xa0]*Intelepciunii|K(?:niha[\\s\\xa0]*moudrosti|a(?:wicaksanan|runungan(?:[\\s\\xa0]*ni[\\s\\xa0]*S[ao]lomon)?))|M(?:oudrost|udrosti)|S(?:olomon|a(?:bedoria|pien(?:tia|za)|gesse|lomon))|Hekima|W(?:eisheit|i(?:jsheid(?:[\\s\\xa0]*van[\\s\\xa0]*Salomo)?|s(?:om[\\s\\xa0]*of[\\s\\xa0]*Solomon|[\\s\\xa0]*of[\\s\\xa0]*Solomon|d(?:[\\s\\xa0]*of[\\s\\xa0]*Solomon|om(?:[\\s\\xa0]*of[\\s\\xa0]*Solomon)?)?)?))))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Joel"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])((?:Pro(?:roctwo[\s\xa0]*Ioelowe|phetia[\s\xa0]*Ioel)|Liv[\s\xa0]*Jowel[\s\xa0]*la|Ks(?:ieg[ai][\s\xa0]*Joela|\.[\s\xa0]*Joela|[\s\xa0]*Joela)|Gioe(?:le)?|Ioil|Y(?:u(?:u77eela|7e)|o(?:[av]el|le|o(?:['’]eel|l)|e(?:li?)?))|J(?:o(?:il|e(?:l(?:s[\s\xa0]*(?:Bog|bok)|i(?:n[\s\xa0]*kirja)?)?)?)|l))|(?:Jo(?:wel|el(?:in|a))|[yI]oel))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["Jonah"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Pro(?:roctwo[\\s\\xa0]*Ionaszowe|phetia[\\s\\xa0]*Ionae)|Liv[\\s\\xa0]*Jonas[\\s\\xa0]*la|Ks(?:ieg[ai][\\s\\xa0]*Jonasza|\\.[\\s\\xa0]*Jonasza|[\\s\\xa0]*Jonasza)|Ionas?|Gio(?:na)?|J(?:n[hs]|o(?:ona(?:n[\\s\\xa0]*kirja)?|n(?:a(?:s(?:['’][\\s\\xa0]*Bog|[\\s\\xa0]*bok)|[\\s\\xa0]*bok|h))?))|Y(?:unus|o(?:on(?:aasa|is)?|na?)))|(?:yona|Jo(?:onan|na(?:s(?:za)?)?)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Nah"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Pro(?:roctwo[\\s\\xa0]*Nahumowe|phetia[\\s\\xa0]*Nahum)|Liv[\\s\\xa0]*Nawoum[\\s\\xa0]*lan|Ks(?:ieg[ai][\\s\\xa0]*Nahuma|\\.[\\s\\xa0]*Nahuma|[\\s\\xa0]*Nahuma)|N(?:a(?:ahooma|-?hum|kum|ch|um|h(?:o(?:om)?|u(?:m(?:s[\\s\\xa0]*(?:Bog|bok)|i(?:n[\\s\\xa0]*kirja)?|u))?)?|w(?:oun)?|x(?:uum)?)|h))|Nahum(?:in|a)|(?:nahum|Na(?:woum|hum)?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["1John"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])(1[\s\xa0]*yohanacem|(?:1(?:re(?:\.[\s\xa0]*Jean|[\s\xa0]*Jean)|a(?:\.[\s\xa0]*Joao|[\s\xa0]*Joao)|o(?:\.[\s\xa0]*(?:San[\s\xa0]*J[au](?:[au]n)|J(?:[au](?:[au]n)|oao))|[\s\xa0]*(?:San[\s\xa0]*J[au](?:[au]n)|J(?:[au](?:[au]n)|oao)))|e(?:r(?:\.[\s\xa0]*Jean|e(?:\.[\s\xa0]*Jean|[\s\xa0]*Jean)|[\s\xa0]*Jean)|\.[\s\xa0]*Joh(?:annes)?|[\s\xa0]*Joh(?:annes)?)|st(?:\.[\s\xa0]*J(?:phn|h(?:[ho]n|n)?|n|o(?:phn|nh|on|h[mn]?)?)|[\s\xa0]*J(?:phn|h(?:[ho]n|n)?|n|o(?:phn|nh|on|h[mn]?)?))|John|\.(?:o(?:\.[\s\xa0]*(?:San[\s\xa0]*J[au](?:[au]n)|J[au](?:[au]n))|[\s\xa0]*(?:San[\s\xa0]*J[au](?:[au]n)|J[au](?:[au]n)))|[\s\xa0]*(?:list[\s\xa0]*Januv|List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Jana|[\s\xa0]*Jana)|Jana)|yuhannako|San[\s\xa0]*J[au](?:[au]n)|Yo(?:kanan|o(?:hanna|x(?:anaa)?)|h(?:an(?:a|es?))?)|G(?:jonit|i(?:o(?:vanni|an))?)|I(?:vanova[\s\xa0]*Poslanica|oan(?:nis)?|n)|J(?:ean|phn|u[au]n|a(?:[au]n|n(?:o(?:s|va?)|uv|a)?)|h(?:[ho]n|n)?|n|o(?:phn|ao|nh|on|h(?:anne(?:ksen[\s\xa0]*kirje|s(?:brev(?:et)?)?)|[mn])?)?)?))|[\s\xa0]*(?:San[\s\xa0]*J[au](?:[au]n)|yuhannako|Yo(?:kanan|van|o(?:hanna|x(?:anaa)?)|h(?:an(?:a|es?))?)|I(?:oan(?:nis)?|n|v(?:anova[\s\xa0]*Poslanica)?)|list[\s\xa0]*Januv|(?:[ei](?:\.[\s\xa0]*Gjonit|[\s\xa0]*Gjonit))|G(?:i(?:o(?:vanni|an))?|j(?:onit)?|v)|k(?:\.[\s\xa0]*Janov|[\s\xa0]*Janov)|J(?:ean|phn|u[au]n|a(?:[au]n|n(?:o(?:s|va?)|uv|a)?)|h(?:[ho]n|n)?|n|o(?:phn|ao|nh|on|h(?:anne(?:ksen[\s\xa0]*kirje|s(?:brev(?:et)?)?)|[mn])?)?)?|List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Jana|[\s\xa0]*Jana)|Jana)))|K(?:oiro[\s\xa0]*Yohaannisa|wanza[\s\xa0]*Yoh(?:an[ae])?)|J(?:ohannes(?:[\s\xa0]*forsta[\s\xa0]*brev|(?:['’][\s\xa0]*1(?:\.[\s\xa0]*Brev|[\s\xa0]*Brev)))|anos[\s\xa0]*I)|I(?:\.[\s\xa0]*(?:list[\s\xa0]*Januv|List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Jana|[\s\xa0]*Jana)|Jana)|San[\s\xa0]*J[au](?:[au]n)|Yo(?:kanan|ox(?:anaa)?|h(?:an(?:a|es?))?)|Gi(?:o(?:vanni|an))?|I(?:vanova[\s\xa0]*Poslanica|oan(?:nis)?|n)|J(?:ean|phn|u[au]n|a(?:[au]n|n(?:o(?:s|va?)|uv|a)?)|h(?:[ho]n|n)?|n|o(?:phn|ao|nh|on|h(?:anne(?:ksen[\s\xa0]*kirje|s)|[mn])?)?)?)|[\s\xa0]*(?:list[\s\xa0]*Januv|List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Jana|[\s\xa0]*Jana)|Jana)|San[\s\xa0]*J[au](?:[au]n)|Yo(?:kanan|ox(?:anaa)?|h(?:an(?:a|es?))?)|Gi(?:o(?:vanni|an))?|I(?:vanova[\s\xa0]*Poslanica|oan|n)|J(?:ean|phn|u[au]n|a(?:[au]n|n(?:o(?:s|va?)|uv|a)?)|h(?:[ho]n|n)?|n|o(?:phn|ao|nh|on|h(?:anne(?:ksen[\s\xa0]*kirje|s)|[mn])?)?)?))|Yo(?:van[\s\xa0]*Elutiya[\s\xa0]*Mutalavatu[\s\xa0]*Nirupam|oxanaa[\s\xa0]*Kowaad|hane[\s\xa0]*I)|Barua[\s\xa0]*ya[\s\xa0]*Kwanza[\s\xa0]*ya[\s\xa0]*Yohane|Una(?:ng[\s\xa0]*Juan|[\s\xa0]*Juan)|P(?:erse[\s\xa0]*poslannja[\s\xa0]*apostola[\s\xa0]*Ivana|ierwsz(?:[aey][\s\xa0]*(?:List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Jana|[\s\xa0]*Jana)|Jana)|Jana))|r(?:im(?:a[\s\xa0]*(?:lettera[\s\xa0]*di[\s\xa0]*Giovanni|Giovanni)|o[\s\xa0]*Giovanni|e(?:ir[ao][\s\xa0]*Joao|r(?:o[\s\xa0]*(?:San[\s\xa0]*J[au](?:[au]n)|J[au](?:[au]n))|[\s\xa0]*(?:San[\s\xa0]*J[au](?:[au]n)|J[au](?:[au]n)))))|em(?:ier(?:e(?:s[\s\xa0]*Jean|[\s\xa0]*Jean)|s[\s\xa0]*Jean|[\s\xa0]*Jean)|ye[\s\xa0]*Jan)|v(?:y[\s\xa0]*(?:Janov[\s\xa0]*list|list[\s\xa0]*Janov)|a[\s\xa0]*(?:Ivanova[\s\xa0]*Poslanica|kniha[\s\xa0]*Janov|Janov)|ni[\s\xa0]*(?:list[\s\xa0]*Januv|J(?:an(?:ova|uv)?)?))))|y(?:ohanacem[\s\xa0]*pahile[\s\xa0]*patra|uhannako[\s\xa0]*pahilo[\s\xa0]*patra)|F(?:orsta[\s\xa0]*Johannesbrevet|yrsta[\s\xa0]*(?:bref[\s\xa0]*Johannesar|Johannesarbref)|irst[\s\xa0]*J(?:phn|h(?:[ho]n|n)?|n|o(?:phn|nh|on|h[mn]?)?))|E(?:nsimmainen[\s\xa0]*Johanneksen[\s\xa0]*kirje|pistula[\s\xa0]*I(?:[\s\xa0]*Ioannis|oannis[\s\xa0]*I)|rste[\s\xa0]*Johannes|erste[\s\xa0]*Joh(?:annes)?|lso[\s\xa0]*J(?:anos|n))|Waraka[\s\xa0]*wa[\s\xa0]*Kwanza[\s\xa0]*wa[\s\xa0]*Yohane)|(?:Ensimmainen[\s\xa0]*Johanneksen|Prv(?:a[\s\xa0]*Ivanova(?:[\s\xa0]*poslanica)?|y[\s\xa0]*Janov)|1(?:\.[\s\xa0]*(?:Johanneksen|Ivanova)|[\s\xa0]*(?:Johanneksen|Ivanova))|I(?:\.[\s\xa0]*(?:Johanneksen|Ivanova)|oannis[\s\xa0]*I|[\s\xa0]*(?:Johanneksen|I(?:oannis|vanova)))))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["2John"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])(2[\s\xa0]*yohanacem|(?:Zweite[\s\xa0]*Johannes|Waraka[\s\xa0]*wa[\s\xa0]*Pili[\s\xa0]*wa[\s\xa0]*Yohane|Epistula[\s\xa0]*I(?:I[\s\xa0]*Ioannis|oannis[\s\xa0]*II)|y(?:uhannako[\s\xa0]*dostro[\s\xa0]*patra|ohanacem[\s\xa0]*dusre[\s\xa0]*patra)|2(?:a(?:\.[\s\xa0]*Joao|[\s\xa0]*Joao)|d(?:\.[\s\xa0]*Jean|e(?:\.[\s\xa0]*Jean|[\s\xa0]*Jean)|[\s\xa0]*Jean)|o(?:\.[\s\xa0]*(?:San[\s\xa0]*J[au](?:[au]n)|J(?:[au](?:[au]n)|oao))|[\s\xa0]*(?:San[\s\xa0]*J[au](?:[au]n)|J(?:[au](?:[au]n)|oao)))|e(?:me(?:\.[\s\xa0]*Jean|[\s\xa0]*Jean)|\.[\s\xa0]*J(?:ean|oh(?:annes)?)|[\s\xa0]*J(?:ean|oh(?:annes)?))|nd(?:\.[\s\xa0]*J(?:phn|h(?:[ho]n|n)?|n|o(?:phn|nh|on|h[mn]?)?)|[\s\xa0]*J(?:phn|h(?:[ho]n|n)?|n|o(?:phn|nh|on|h[mn]?)?))|John|\.(?:o(?:\.[\s\xa0]*(?:San[\s\xa0]*J[au](?:[au]n)|J[au](?:[au]n))|[\s\xa0]*(?:San[\s\xa0]*J[au](?:[au]n)|J[au](?:[au]n)))|[\s\xa0]*(?:list[\s\xa0]*Januv|List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Jana|[\s\xa0]*Jana)|Jana)|yuhannako|San[\s\xa0]*J[au](?:[au]n)|Yo(?:kanan|o(?:hanna|x(?:anaa)?)|h(?:an(?:a|es?))?)|G(?:jonit|i(?:o(?:vanni|an))?)|I(?:vanova[\s\xa0]*Poslanica|oan(?:nis)?|n)|J(?:ean|phn|u[au]n|a(?:[au]n|n(?:o(?:s|va?)|uv|a)?)|h(?:[ho]n|n)?|n|o(?:phn|ao|nh|on|h(?:anne(?:ksen[\s\xa0]*kirje|s(?:brev(?:et)?)?)|[mn])?)?)?))|[\s\xa0]*(?:San[\s\xa0]*J[au](?:[au]n)|yuhannako|Yo(?:kanan|van|o(?:hanna|x(?:anaa)?)|h(?:an(?:a|es?))?)|I(?:oan(?:nis)?|n|v(?:anova[\s\xa0]*Poslanica)?)|list[\s\xa0]*Januv|(?:[ei](?:\.[\s\xa0]*Gjonit|[\s\xa0]*Gjonit))|G(?:i(?:o(?:vanni|an))?|j(?:onit)?|v)|k(?:\.[\s\xa0]*Janov|[\s\xa0]*Janov)|J(?:ean|phn|u[au]n|a(?:[au]n|n(?:o(?:s|va?)|uv|a)?)|h(?:[ho]n|n)?|n|o(?:phn|ao|nh|on|h(?:anne(?:ksen[\s\xa0]*kirje|s(?:brev(?:et)?)?)|[mn])?)?)?|List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Jana|[\s\xa0]*Jana)|Jana)))|T(?:oinen[\s\xa0]*Joh(?:anneksen[\s\xa0]*kirje)?|weede[\s\xa0]*Joh(?:annes)?)|Masodik[\s\xa0]*J(?:anos|n)|Barua[\s\xa0]*ya[\s\xa0]*Pili[\s\xa0]*ya[\s\xa0]*Yohane|Yo(?:van[\s\xa0]*Elutiya[\s\xa0]*Irantavatu[\s\xa0]*Nirupam|oxanaa[\s\xa0]*Labaad|hane[\s\xa0]*II)|I(?:kalawang[\s\xa0]*Juan|I(?:\.[\s\xa0]*(?:list[\s\xa0]*Januv|List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Jana|[\s\xa0]*Jana)|Jana)|San[\s\xa0]*J[au](?:[au]n)|Yo(?:kanan|ox(?:anaa)?|h(?:an(?:a|es?))?)|Gi(?:o(?:vanni|an))?|I(?:vanova[\s\xa0]*Poslanica|oan(?:nis)?|n)|J(?:ean|phn|u[au]n|a(?:[au]n|n(?:o(?:s|va?)|uv|a)?)|h(?:[ho]n|n)?|n|o(?:phn|ao|nh|on|h(?:anne(?:ksen[\s\xa0]*kirje|s)|[mn])?)?)?)|[\s\xa0]*(?:list[\s\xa0]*Januv|List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Jana|[\s\xa0]*Jana)|Jana)|San[\s\xa0]*J[au](?:[au]n)|Yo(?:kanan|ox(?:anaa)?|h(?:an(?:a|es?))?)|Gi(?:o(?:vanni|an))?|I(?:vanova[\s\xa0]*Poslanica|oan|n)|J(?:ean|phn|u[au]n|a(?:[au]n|n(?:o(?:s|va?)|uv|a)?)|h(?:[ho]n|n)?|n|o(?:phn|ao|nh|on|h(?:anne(?:ksen[\s\xa0]*kirje|s)|[mn])?)?)?)))|D(?:e(?:uxieme(?:s[\s\xa0]*Jean|[\s\xa0]*Jean)|zyem[\s\xa0]*Jan)|ru(?:g(?:a[\s\xa0]*(?:Ivanova[\s\xa0]*Poslanica|List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Jana|[\s\xa0]*Jana)|Jana)|Jana)|i[\s\xa0]*(?:List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Jana|[\s\xa0]*Jana)|Jana)|Jana))|h(?:e[\s\xa0]*poslannja[\s\xa0]*apostola[\s\xa0]*Ivana|a[\s\xa0]*(?:kniha[\s\xa0]*Janov|list[\s\xa0]*Januv|J(?:an(?:ova?|uv)?)?)|y[\s\xa0]*(?:list[\s\xa0]*Jan[ou]v|J(?:an(?:ov(?:[\s\xa0]*list|a)|uv)?)?))))|Pili[\s\xa0]*Yoh(?:an[ae])?|Se(?:gund(?:a[\s\xa0]*Joao|o[\s\xa0]*(?:San[\s\xa0]*J[au](?:[au]n)|J(?:[au](?:[au]n)|oao)))|cond(?:a[\s\xa0]*(?:lettera[\s\xa0]*di[\s\xa0]*Giovanni|Giovanni)|o[\s\xa0]*Giovanni|[\s\xa0]*J(?:phn|h(?:[ho]n|n)?|n|o(?:phn|nh|on|h[mn]?)?)))|And(?:e(?:t[\s\xa0]*Johannesbrev|n[\s\xa0]*Joh(?:annes(?:brev)?)?)|r(?:a[\s\xa0]*Johannesbrevet|e[\s\xa0]*Joh(?:annes)?))|Naa77antto[\s\xa0]*Yohaannisa|J(?:ohannes(?:'[\s\xa0]*Andet[\s\xa0]*Brev|’[\s\xa0]*(?:Andet[\s\xa0]*Brev|andre[\s\xa0]*brev)|[\s\xa0]*andra[\s\xa0]*brev)|anos[\s\xa0]*II))|(?:Toinen[\s\xa0]*Johanneksen|Dru(?:ga[\s\xa0]*Ivanova(?:[\s\xa0]*poslanica)?|hy[\s\xa0]*Janov)|I(?:oannis[\s\xa0]*II|I(?:\.[\s\xa0]*(?:Johanneksen|Ivanova)|[\s\xa0]*(?:Johanneksen|I(?:oannis|vanova))))|2(?:\.[\s\xa0]*(?:Johanneksen|Ivanova)|[\s\xa0]*(?:Johanneksen|Ivanova))))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["3John"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])(3[\s\xa0]*yohanacem|(?:H(?:ezzantto[\s\xa0]*Yohaannisa|armadik[\s\xa0]*J(?:anos|n))|J(?:ohannes(?:[\s\xa0]*tredje[\s\xa0]*brev|(?:['’][\s\xa0]*(?:Tredje[\s\xa0]*Brev|3(?:\.[\s\xa0]*Brev|[\s\xa0]*Brev))))|anos[\s\xa0]*III)|Waraka[\s\xa0]*wa[\s\xa0]*Tatu[\s\xa0]*wa[\s\xa0]*Yohane|Yo(?:van[\s\xa0]*Elutiya[\s\xa0]*Munravatu[\s\xa0]*Nirupam|oxanaa[\s\xa0]*Saddexaad|hane[\s\xa0]*III)|3(?:a(?:\.[\s\xa0]*Joao|[\s\xa0]*Joao)|o(?:\.[\s\xa0]*(?:San[\s\xa0]*J[au](?:[au]n)|J(?:[au](?:[au]n)|oao))|[\s\xa0]*(?:San[\s\xa0]*J[au](?:[au]n)|J(?:[au](?:[au]n)|oao)))|e(?:me(?:\.[\s\xa0]*Jean|[\s\xa0]*Jean)|\.[\s\xa0]*J(?:ean|oh(?:annes(?:brevet)?)?)|[\s\xa0]*J(?:ean|oh(?:annes(?:brevet)?)?))|rd(?:\.[\s\xa0]*J(?:phn|h(?:[ho]n|n)?|n|o(?:phn|nh|on|h[mn]?)?)|[\s\xa0]*J(?:phn|h(?:[ho]n|n)?|n|o(?:phn|nh|on|h[mn]?)?))|John|\.(?:o(?:\.[\s\xa0]*(?:San[\s\xa0]*J[au](?:[au]n)|J[au](?:[au]n))|[\s\xa0]*(?:San[\s\xa0]*J[au](?:[au]n)|J[au](?:[au]n)))|[\s\xa0]*(?:list[\s\xa0]*Januv|List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Jana|[\s\xa0]*Jana)|Jana)|yuhannako|San[\s\xa0]*J[au](?:[au]n)|Yo(?:kanan|o(?:hanna|x(?:anaa)?)|h(?:an(?:a|es?))?)|G(?:jonit|i(?:o(?:vanni|an))?)|I(?:vanova[\s\xa0]*Poslanica|oan(?:nis)?|n)|J(?:ean|phn|u[au]n|a(?:[au]n|n(?:o(?:s|va?)|uv|a)?)|h(?:[ho]n|n)?|n|o(?:phn|ao|nh|on|h(?:anne(?:ksen[\s\xa0]*kirje|s(?:brev(?:et)?)?)|[mn])?)?)?))|[\s\xa0]*(?:San[\s\xa0]*J[au](?:[au]n)|yuhannako|Yo(?:kanan|van|o(?:hanna|x(?:anaa)?)|h(?:an(?:a|es?))?)|I(?:oan(?:nis)?|n|v(?:anova[\s\xa0]*Poslanica)?)|list[\s\xa0]*Januv|(?:[ei](?:\.[\s\xa0]*Gjonit|[\s\xa0]*Gjonit))|G(?:i(?:o(?:vanni|an))?|j(?:onit)?|v)|k(?:\.[\s\xa0]*Janov|[\s\xa0]*Janov)|J(?:ean|phn|u[au]n|a(?:[au]n|n(?:o(?:s|va?)|uv|a)?)|h(?:[ho]n|n)?|n|o(?:phn|ao|nh|on|h(?:anne(?:ksen[\s\xa0]*kirje|s(?:brev(?:et)?)?)|[mn])?)?)?|List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Jana|[\s\xa0]*Jana)|Jana)))|I(?:katlong[\s\xa0]*Juan|II(?:\.[\s\xa0]*(?:list[\s\xa0]*Januv|List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Jana|[\s\xa0]*Jana)|Jana)|San[\s\xa0]*J[au](?:[au]n)|Yo(?:kanan|ox(?:anaa)?|h(?:an(?:a|es?))?)|Gi(?:o(?:vanni|an))?|I(?:vanova[\s\xa0]*Poslanica|oan(?:nis)?|n)|J(?:ean|phn|u[au]n|a(?:[au]n|n(?:o(?:s|va?)|uv|a)?)|h(?:[ho]n|n)?|n|o(?:phn|ao|nh|on|h(?:anne(?:ksen[\s\xa0]*kirje|s)|[mn])?)?)?)|[\s\xa0]*(?:list[\s\xa0]*Januv|List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Jana|[\s\xa0]*Jana)|Jana)|San[\s\xa0]*J[au](?:[au]n)|Yo(?:kanan|ox(?:anaa)?|h(?:an(?:a|es?))?)|Gi(?:o(?:vanni|an))?|I(?:vanova[\s\xa0]*Poslanica|oan|n)|J(?:ean|phn|u[au]n|a(?:[au]n|n(?:o(?:s|va?)|uv|a)?)|h(?:[ho]n|n)?|n|o(?:phn|ao|nh|on|h(?:anne(?:ksen[\s\xa0]*kirje|s)|[mn])?)?)?)))|T(?:er(?:z(?:a[\s\xa0]*(?:lettera[\s\xa0]*di[\s\xa0]*Giovanni|Giovanni)|o[\s\xa0]*Giovanni)|ce(?:ir[ao][\s\xa0]*Joao|r(?:o[\s\xa0]*(?:San[\s\xa0]*J[au](?:[au]n)|J[au](?:[au]n))|[\s\xa0]*(?:San[\s\xa0]*J[au](?:[au]n)|J[au](?:[au]n)))))|atu[\s\xa0]*Yoh(?:an[ae])?|hird[\s\xa0]*J(?:phn|h(?:[ho]n|n)?|n|o(?:phn|nh|on|h[mn]?)?)|r(?:oisieme(?:s[\s\xa0]*Jean|[\s\xa0]*Jean)|zeci(?:a[\s\xa0]*(?:List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Jana|[\s\xa0]*Jana)|Jana)|Jana)|[\s\xa0]*(?:List[\s\xa0]*(?:sw(?:\.[\s\xa0]*Jana|[\s\xa0]*Jana)|Jana)|Jana))|e(?:ca[\s\xa0]*Ivanova[\s\xa0]*Poslanica|dje[\s\xa0]*Joh(?:annes(?:brev(?:et)?)?)?|t(?:je[\s\xa0]*poslannja[\s\xa0]*apostola[\s\xa0]*Ivana|i(?:a[\s\xa0]*(?:kniha[\s\xa0]*Janov|Janov)|[\s\xa0]*(?:list[\s\xa0]*Januv|J(?:an(?:ov(?:[\s\xa0]*list|a)|uv)?)?))))))|y(?:uhannako[\s\xa0]*testro[\s\xa0]*patra|ohanacem[\s\xa0]*tisre[\s\xa0]*patra)|Barua[\s\xa0]*ya[\s\xa0]*Tatu[\s\xa0]*ya[\s\xa0]*Yohane|Epistula[\s\xa0]*I(?:II[\s\xa0]*Ioannis|oannis[\s\xa0]*III)|D(?:ritte[\s\xa0]*Johannes|erde[\s\xa0]*Joh(?:annes)?)|Kolmas[\s\xa0]*Johanneksen[\s\xa0]*kirje)|(?:Johannes’[\s\xa0]*tredje[\s\xa0]*brev|Kolmas[\s\xa0]*Johanneksen|Tre(?:ca[\s\xa0]*Ivanova(?:[\s\xa0]*poslanica)?|ti[\s\xa0]*Janov)|I(?:oannis[\s\xa0]*III|II(?:\.[\s\xa0]*(?:Johanneksen|Ivanova)|[\s\xa0]*(?:Johanneksen|I(?:oannis|vanova))))|3(?:\.[\s\xa0]*(?:Johanneksen|Ivanova)|[\s\xa0]*(?:Johanneksen|Ivanova))))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["John"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Sulat[\\s\\xa0]*ni[\\s\\xa0]*San[\\s\\xa0]*Juan|y(?:uhannale|ohanane)|J(?:ano(?:vo[\\s\\xa0]*evangelium|s)|e(?:vanhelije[\\s\\xa0]*vid[\\s\\xa0]*Ivana|an)|o(?:hann(?:is[\\s\\xa0]*evangelium|e(?:ksen[\\s\\xa0]*evankeliumi|sevangeliet))|ao))|Vangelo[\\s\\xa0]*di[\\s\\xa0]*(?:San[\\s\\xa0]*Giovanni|Giovanni)|Ungjilli[\\s\\xa0]*i[\\s\\xa0]*Gjonit|I(?:njil(?:i[\\s\\xa0]*ya[\\s\\xa0]*Yohan[ae]|[\\s\\xa0]*Yohanes)|oan(?:nes)?|van)|E(?:banghelyo[\\s\\xa0]*(?:ayon[\\s\\xa0]*kay[\\s\\xa0]*(?:San[\\s\\xa0]*Juan|Juan)|ni[\\s\\xa0]*San[\\s\\xa0]*Juan)|van(?:keliumi[\\s\\xa0]*Johanneksen[\\s\\xa0]*mukaan|geli(?:e(?:[\\s\\xa0]*volgens[\\s\\xa0]*Johannes|t[\\s\\xa0]*etter[\\s\\xa0]*Johannes)|um[\\s\\xa0]*(?:secundum[\\s\\xa0]*Ioannem|podle[\\s\\xa0]*Jana))|jelium[\\s\\xa0]*Podla[\\s\\xa0]*Jana)|l[\\s\\xa0]*Evangelio[\\s\\xa0]*de[\\s\\xa0]*J[au](?:[au]n)|w(?:angelia[\\s\\xa0]*(?:wg[\\s\\xa0]*sw(?:\\.[\\s\\xa0]*Jana|[\\s\\xa0]*Jana)|Jana)|\\.[\\s\\xa0]*Jana|[\\s\\xa0]*Jana?))|The[\\s\\xa0]*Gospel[\\s\\xa0]*(?:according[\\s\\xa0]*to[\\s\\xa0]*(?:S(?:aint[\\s\\xa0]*J(?:phn|o(?:phn|nh|on|h[mn]?)|h(?:[ho]n|n)?|n)|t(?:\\.[\\s\\xa0]*J(?:phn|o(?:phn|nh|on|h[mn]?)|h(?:[ho]n|n)?|n)|[\\s\\xa0]*J(?:phn|o(?:phn|nh|on|h[mn]?)|h(?:[ho]n|n)?|n)))|J(?:phn|o(?:phn|nh|on|h[mn]?)|h(?:[ho]n|n)?|n))|of[\\s\\xa0]*(?:S(?:aint[\\s\\xa0]*J(?:phn|o(?:phn|nh|on|h[mn]?)|h(?:[ho]n|n)?|n)|t(?:\\.[\\s\\xa0]*J(?:phn|o(?:phn|nh|on|h[mn]?)|h(?:[ho]n|n)?|n)|[\\s\\xa0]*J(?:phn|o(?:phn|nh|on|h[mn]?)|h(?:[ho]n|n)?|n)))|J(?:phn|o(?:phn|nh|on|h[mn]?)|h(?:[ho]n|n)?|n)))|Mabuting[\\s\\xa0]*Balita[\\s\\xa0]*ayon[\\s\\xa0]*kay[\\s\\xa0]*(?:San[\\s\\xa0]*Juan|Juan)|Y(?:uhanna|o(?:van[\\s\\xa0]*Narceyti|kanan|ox(?:anaa)?|h(?:aannisa)?))|G(?:jo(?:ni)?|[gv]|i(?:oan)?))|(?:G(?:ospel[\\s\\xa0]*(?:according[\\s\\xa0]*to[\\s\\xa0]*(?:S(?:aint[\\s\\xa0]*J(?:phn|o(?:phn|nh|on|h[mn]?)|n|h(?:[ho]n|n)?)|t(?:\\.[\\s\\xa0]*J(?:phn|o(?:phn|nh|on|h[nm]?)|h(?:[oh]n|n)?|n)|[\\s\\xa0]*J(?:phn|o(?:phn|on|nh|h[nm]?)|h(?:[ho]n|n)?|n)))|J(?:phn|o(?:phn|on|nh|h[nm]?)|h(?:[ho]n|n)?|n))|of[\\s\\xa0]*(?:S(?:aint[\\s\\xa0]*J(?:phn|o(?:phn|nh|on|h[mn]?)|h(?:[oh]n|n)?|n)|t(?:\\.[\\s\\xa0]*J(?:phn|o(?:phn|nh|on|h[nm]?)|h(?:[oh]n|n)?|n)|[\\s\\xa0]*J(?:phn|o(?:phn|nh|on|h[mn]?)|h(?:[ho]n|n)?|n)))|J(?:phn|o(?:phn|nh|on|h[mn]?)|n|h(?:[oh]n|n)?)))|iovanni)|S(?:a(?:int[\\s\\xa0]*J(?:phn|o(?:phn|nh|on|h[mn]?)|h(?:[oh]n|n)?|n)|n[\\s\\xa0]*Juan)|t(?:\\.[\\s\\xa0]*J(?:phn|o(?:phn|nh|on|h[nm]?)|n|h(?:[ho]n|n)?)|[\\s\\xa0]*J(?:phn|o(?:phn|nh|on|h[mn]?)|h(?:[oh]n|n)?|n)))|Yo(?:han(?:a|es?)|van)|J(?:phn|u[au]n|a(?:[ua]n|na)|o(?:phn|on|nh|h(?:anne(?:ksen|s)|[mn])?)|h(?:[oh]n|n)?|n)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Josh"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Li(?:ber[\\s\\xa0]*Iosue|v[\\s\\xa0]*Jozye[\\s\\xa0]*a)|Ks(?:ieg[ai][\\s\\xa0]*Jozuego|\\.[\\s\\xa0]*Jozuego|[\\s\\xa0]*Jozuego)|yahos(?:uko[\\s\\xa0]*pustak|awa)|I(?:sus[\\s\\xa0]*Navyn|os(?:ua[\\s\\xa0]*Navi)?)|Y(?:usak|a(?:hoshoo|asu|sh(?:uuca)?)|o(?:cuva|s(?:hua|ua)?))|G(?:iosue|s(?:ua)?)|J(?:o(?:us(?:hua|ua)|os(?:uan[\\s\\xa0]*kirja)?|s(?:u(?:ova|a(?:bok|h)?|e)|va(?:s[\\s\\xa0]*(?:Bog|bok)|bog(?:en)?)?|h(?:ua)?)?|z(?:u(?:ova|a|eu?)|s(?:ue)?)?)|sh?))|(?:yahosuko|Iosu[ae]|Jo(?:osuan|svas|z(?:uego|ye))))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Judg"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:B(?:irak|arn(?:wyr)?)|Huk|Xaak(?:innada)?|Amu|Mga[\\s\\xa0]*(?:Maghuhukom|Hukom)|J(?:dgs?|ij|u(?:d(?:ecatorii?|g(?:es)?)|iz(?:es)?|e(?:c(?:es)?)?|g(?:es)?)|[cz]|gs?)|Iud|Para[\\s\\xa0]*Hakim|G(?:iudici|dc|jy(?:qtaret)?)|N(?:iyayatipatikal|yayiyon)|nyayakarttaharuko[\\s\\xa0]*pustak|S(?:oudcu|edz|u(?:ci|d(?:covia)?)|d[cz]?)|Tuom(?:arien[\\s\\xa0]*kirja)?|Quan|R(?:echt(?:ers)?|icht(?:er(?:en?)?)?)|Li(?:ber[\\s\\xa0]*Iudicum|v[\\s\\xa0]*Chef[\\s\\xa0]*yo)|D(?:a(?:annata|na)|om(?:ar(?:boken|abok(?:in)?)|mer(?:bogen|ne(?:s[\\s\\xa0]*bok)?)?)?)|saste|K(?:n(?:jiga[\\s\\xa0]*o[\\s\\xa0]*Sucima|yha[\\s\\xa0]*Suddiv)|s(?:ieg[ai][\\s\\xa0]*Sedziow|\\.[\\s\\xa0]*Sedziow|[\\s\\xa0]*Sedziow)|\\.[\\s\\xa0]*sudcov|[\\s\\xa0]*sudcov)|Waam(?:uzi)?)|(?:nyayakarttaharuko|Maghuhukom|Tuomarien|Dommernes|Iudicum|S(?:edziow|udcov)|Hukom))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["1Esd"],
        apocrypha: true,
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])((?:P(?:ierwsz[aey][\s\xa0]*(?:Ks(?:ieg(?:[ai][\s\xa0]*Ezdrasza|\.[\s\xa0]*Ezdrasza|[\s\xa0]*Ezdrasza)|Ezdrasza))|r(?:emier(?:e(?:s[\s\xa0]*Esdras|[\s\xa0]*Esdras)|s[\s\xa0]*Esdras|[\s\xa0]*Esdras)|im(?:e(?:ir[ao][\s\xa0]*Esdras|r(?:o[\s\xa0]*Esdras|[\s\xa0]*Esdras))|[ao][\s\xa0]*Esdras?)|v(?:ni[\s\xa0]*Ezdras|a[\s\xa0]*(?:kniha[\s\xa0]*Ezdras(?:ova)?|Ezdras(?:ova)?)|y[\s\xa0]*(?:list[\s\xa0]*Ezdras(?:ova)?|Ezdras(?:ova)?))))|F(?:orsta[\s\xa0]*Esra|irst[\s\xa0]*Esd(?:r(?:as)?)?)|K(?:itabu[\s\xa0]*cha[\s\xa0]*Kwanza[\s\xa0]*cha[\s\xa0]*Ezra|wanza[\s\xa0]*Ezra)|1(?:re(?:\.[\s\xa0]*Esdras|[\s\xa0]*Esdras)|(?:[ao](?:\.[\s\xa0]*Esdras|[\s\xa0]*Esdras))|e(?:r(?:\.[\s\xa0]*Esdras|e(?:\.[\s\xa0]*Esdras|[\s\xa0]*Esdras)|[\s\xa0]*Esdras)|\.[\s\xa0]*E(?:sdras|zra)|[\s\xa0]*E(?:sdras|zra))|st(?:\.[\s\xa0]*Esd(?:r(?:as)?)?|[\s\xa0]*Esd(?:r(?:as)?)?)|\.(?:o(?:\.[\s\xa0]*Esdras|[\s\xa0]*Esdras)|[\s\xa0]*(?:Ks(?:ieg[ai][\s\xa0]*Ezdrasza|\.[\s\xa0]*Ezdrasza|[\s\xa0]*Ezdrasza)|E(?:z(?:ra|d(?:ra(?:s(?:ova|za)?)?)?)|s(?:d(?:r(?:a(?:e|s(?:bog)?)?)?)?|ra?)?)))|[\s\xa0]*(?:Ks(?:ieg[ai][\s\xa0]*Ezdrasza|\.[\s\xa0]*Ezdrasza|[\s\xa0]*Ezdrasza)|k(?:\.[\s\xa0]*Ezdras(?:ova)?|[\s\xa0]*Ezdras(?:ova)?)|E(?:z(?:ra|d(?:ra(?:s(?:ova|za)?)?)?)|s(?:d(?:r(?:a(?:e|s(?:bog)?)?)?)?|ra?)?))|Esd)|E(?:nsimmainen[\s\xa0]*Esra|erste[\s\xa0]*E(?:sdras|zra)|sdra[\s\xa0]*greco|rste[\s\xa0]*Esra|lso[\s\xa0]*Ezd(?:ras)?|zdras[\s\xa0]*I)|Derde[\s\xa0]*E(?:sdras|zra)|3(?:\.[\s\xa0]*E(?:s(?:dra(?:s(?:bog)?)?|ra)|z(?:dra|ra))|e(?:\.[\s\xa0]*E(?:s(?:dras|ra)|zra)|[\s\xa0]*E(?:s(?:dras|ra)|zra))|[\s\xa0]*E(?:s(?:dra(?:s(?:bog)?)?|ra)|z(?:dra|ra)))|T(?:erz[ao][\s\xa0]*Esdra|redje[\s\xa0]*Es(?:drasbog|ra))|Una(?:ng[\s\xa0]*E(?:sdras|zra)|[\s\xa0]*E(?:sdras|zra))|I(?:II(?:\.[\s\xa0]*E(?:sdras?|z(?:dra|ra))|[\s\xa0]*E(?:sdras?|z(?:dra|ra)))|\.[\s\xa0]*(?:Ks(?:ieg[ai][\s\xa0]*Ezdrasza|\.[\s\xa0]*Ezdrasza|[\s\xa0]*Ezdrasza)|E(?:s(?:ra|d(?:r(?:a[es]?)?)?)|z(?:ra|d(?:ra(?:s(?:ova|za)?)?)?)))|[\s\xa0]*(?:Ks(?:ieg[ai][\s\xa0]*Ezdrasza|\.[\s\xa0]*Ezdrasza|[\s\xa0]*Ezdrasza)|E(?:s(?:ra|d(?:r(?:as?)?)?)|z(?:ra|d(?:ra(?:s(?:ova|za)?)?)?))))|Liber[\s\xa0]*(?:Esdrae[\s\xa0]*I|I[\s\xa0]*Esdrae))|Pierwsz(?:[aey][\s\xa0]*(?:Ks(?:\.[\s\xa0]*Ezdrasza|[\s\xa0]*Ezdrasza)|Ezdrasza))|I[\s\xa0]*Esdrae)(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["2Esd"],
        apocrypha: true,
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])((?:Kitabu[\s\xa0]*cha[\s\xa0]*Pili[\s\xa0]*cha[\s\xa0]*Ezra|Masodik[\s\xa0]*Ezd(?:ras)?|Ezdras[\s\xa0]*II|Quart[ao][\s\xa0]*Esdra|Fj(?:arde[\s\xa0]*Esra|erde[\s\xa0]*Es(?:drasbog|ra))|And(?:en[\s\xa0]*Esdrasbog|r(?:a[\s\xa0]*Esra|e[\s\xa0]*Es(?:dras|ra)))|D(?:euxieme(?:s[\s\xa0]*Esdras|[\s\xa0]*Esdras)|ru(?:g[ai][\s\xa0]*(?:Ks(?:ieg(?:[ai][\s\xa0]*Ezdrasza|\.[\s\xa0]*Ezdrasza|[\s\xa0]*Ezdrasza)|Ezdrasza))|h(?:a[\s\xa0]*(?:kniha[\s\xa0]*Ezdras(?:ova)?|Ezdras(?:ova)?)|y[\s\xa0]*(?:list[\s\xa0]*Ezdras(?:ova)?|Ezdras(?:ova)?))))|T(?:oinen[\s\xa0]*Esra|weede[\s\xa0]*E(?:sdras|zra))|Pili[\s\xa0]*Ezra|Zweite[\s\xa0]*Esra|I(?:kalawang[\s\xa0]*E(?:sdras|zra)|V(?:\.[\s\xa0]*E(?:sdras?|z(?:dra|ra))|[\s\xa0]*E(?:sdras?|z(?:dra|ra)))|I(?:\.[\s\xa0]*(?:Ks(?:ieg[ai][\s\xa0]*Ezdrasza|\.[\s\xa0]*Ezdrasza|[\s\xa0]*Ezdrasza)|E(?:s(?:ra|d(?:r(?:a[es]?)?)?)|z(?:ra|d(?:ra(?:s(?:ova|za)?)?)?)))|[\s\xa0]*(?:Ks(?:ieg[ai][\s\xa0]*Ezdrasza|\.[\s\xa0]*Ezdrasza|[\s\xa0]*Ezdrasza)|E(?:s(?:ra|d(?:r(?:as?)?)?)|z(?:ra|d(?:ra(?:s(?:ova|za)?)?)?)))))|Vierde[\s\xa0]*E(?:sdras|zra)|4(?:\.[\s\xa0]*E(?:s(?:dra(?:s(?:bog)?)?|ra)|z(?:dra|ra))|[\s\xa0]*E(?:s(?:dra(?:s(?:bog)?)?|ra)|z(?:dra|ra)))|Se(?:gund[ao][\s\xa0]*Esdras|cond(?:[ao][\s\xa0]*Esdras?|[\s\xa0]*Esd(?:r(?:as)?)?))|2(?:(?:[ao](?:\.[\s\xa0]*Esdras|[\s\xa0]*Esdras))|d(?:\.[\s\xa0]*Esdras|e(?:\.[\s\xa0]*Esdras|[\s\xa0]*Esdras)|[\s\xa0]*Esdras)|e(?:me(?:\.[\s\xa0]*Esdras|[\s\xa0]*Esdras)|\.[\s\xa0]*E(?:sdras|zra)|[\s\xa0]*E(?:sdras|zra))|nd(?:\.[\s\xa0]*Esd(?:r(?:as)?)?|[\s\xa0]*Esd(?:r(?:as)?)?)|\.(?:o(?:\.[\s\xa0]*Esdras|[\s\xa0]*Esdras)|[\s\xa0]*(?:Ks(?:ieg[ai][\s\xa0]*Ezdrasza|\.[\s\xa0]*Ezdrasza|[\s\xa0]*Ezdrasza)|E(?:z(?:ra|d(?:ra(?:s(?:ova|za)?)?)?)|s(?:d(?:r(?:a(?:e|s(?:bog)?)?)?)?|ra?)?)))|[\s\xa0]*(?:Ks(?:ieg[ai][\s\xa0]*Ezdrasza|\.[\s\xa0]*Ezdrasza|[\s\xa0]*Ezdrasza)|k(?:\.[\s\xa0]*Ezdras(?:ova)?|[\s\xa0]*Ezdras(?:ova)?)|E(?:z(?:ra|d(?:ra(?:s(?:ova|za)?)?)?)|s(?:d(?:r(?:a(?:e|s(?:bog)?)?)?)?|ra?)?))|Esd)|Liber[\s\xa0]*(?:Esdrae[\s\xa0]*II|II[\s\xa0]*Esdrae))|Drug(?:[ai][\s\xa0]*(?:Ks(?:\.[\s\xa0]*Ezdrasza|[\s\xa0]*Ezdrasza)|Ezdrasza))|II[\s\xa0]*Esdrae)(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["Isa"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Ks(?:ieg[ai][\\s\\xa0]*Izajasza|\\.[\\s\\xa0]*Izajasza|[\\s\\xa0]*Izajasza)|Li(?:ber[\\s\\xa0]*Isaiae|v[\\s\\xa0]*Ezayi[\\s\\xa0]*a)|Yesaya|yas(?:haayaah|aya)|E(?:caya|s(?:eia|a(?:jas['’][\\s\\xa0]*Bog|i(?:as['’][\\s\\xa0]*bok|e)?)?)|zs(?:aias)?)|Jes(?:a(?:ia|ja(?:n[\\s\\xa0]*kirja|s[\\s\\xa0]*bok|bok(?:en|a))?))?|I(?:-?sa(?:-?gia|i-?a)|a|s(?:sah|i(?:[ai](?:(?:[ai](?:(?:[ai]ha?|ha?))|ha?))|ha|y(?:aasa)?)|a(?:a(?:[ai](?:(?:[ai]ha?|ha?))|ha?)|[jy]a|ha?|i(?:i(?:[ai]ha?|ha?)|sha?|a(?:[ai]ha?|ha?|s)?|e|ha?)?)?|h(?:acyaah)?)?|z(?:a(?:i(?:as|ja)|jas))?))|(?:Jesajan|E(?:sa[ji]as|zayi)|I(?:zajasza|-?sa)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["2Sam"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])((?:S(?:am(?:eela[\s\xa0]*Maxaafaa[\s\xa0]*Naa77anttuwaa|u(?:u['’]eel[\s\xa0]*Labaad|el(?:i(?:s[\s\xa0]*II|[\s\xa0]*II)|[\s\xa0]*II)))|e(?:gund(?:[ao][\s\xa0]*(?:Reinos|Samuel))|cond(?:[ao][\s\xa0]*Samuele|[\s\xa0]*(?:Kingdoms|S(?:a(?:m(?:u[ae]l[ls]?)?)?|ma?)))))|Liber[\s\xa0]*II[\s\xa0]*Samuelis|And(?:en[\s\xa0]*(?:Kongerigernes[\s\xa0]*Bog|Sam(?:uel(?:sbog)?)?)|r(?:a[\s\xa0]*Samuelsboken|e[\s\xa0]*Sam(?:uel(?:sbok)?)?))|T(?:oinen[\s\xa0]*Samuelin[\s\xa0]*kirja|weede[\s\xa0]*Sam(?:uel)?)|Kitabu[\s\xa0]*cha[\s\xa0]*Pili[\s\xa0]*cha[\s\xa0]*Samueli|D(?:e(?:uxieme(?:s[\s\xa0]*Samuel|[\s\xa0]*Samuel)|zyem[\s\xa0]*(?:liv[\s\xa0]*Samyel[\s\xa0]*la|Samyel))|ru(?:g(?:a[\s\xa0]*(?:knjiga[\s\xa0]*o[\s\xa0]*Samuelu|Ks(?:ieg(?:[ai][\s\xa0]*Samuel(?:owa|a))|\.[\s\xa0]*Samuel(?:owa|a)|[\s\xa0]*Samuel(?:owa|a))|Samuelo(?:va[\s\xa0]*knjiga|wa))|i[\s\xa0]*(?:Ks(?:ieg(?:[ai][\s\xa0]*Samuel(?:owa|a))|\.[\s\xa0]*Samuel(?:owa|a)|[\s\xa0]*Samuel(?:owa|a))|Samuelowa))|h(?:a[\s\xa0]*(?:kniha[\s\xa0]*Samuelova|S(?:am(?:uel(?:ova)?)?)?)|y[\s\xa0]*(?:kniha[\s\xa0]*Samuelova|list[\s\xa0]*Samuelova|S(?:am(?:uel(?:ova)?)?)?))))|I(?:kalawang[\s\xa0]*Samuel|I(?:\.[\s\xa0]*(?:kniha[\s\xa0]*Samuelova|K(?:s(?:ieg(?:[ai][\s\xa0]*Samuel(?:owa|a))|\.[\s\xa0]*Samuel(?:owa|a)|[\s\xa0]*Samuel(?:owa|a))|ingdoms)|Re(?:g(?:norum|ilor)|inos)|S(?:a(?:m(?:weli|u(?:u['’]eel|al[ls]?|el(?:o[vw]a|[els]|i(?:n[\s\xa0]*kirja|s)?)?|il)|yel)?)?|ma?)?)|[\s\xa0]*(?:kniha[\s\xa0]*Samuelova|K(?:s(?:ieg(?:[ai][\s\xa0]*Samuel(?:owa|a))|\.[\s\xa0]*Samuel(?:owa|a)|[\s\xa0]*Samuel(?:owa|a))|ingdoms)|Re(?:g(?:norum|ilor)|inos)|S(?:a(?:m(?:weli|u(?:u['’]eel|al[ls]?|el(?:o[vw]a|[els]|i(?:n[\s\xa0]*kirja)?)?|il)|yel)?)?|ma?)?)))|Zweite[\s\xa0]*Samuel|Cartea[\s\xa0]*(?:a[\s\xa0]*doua[\s\xa0]*a[\s\xa0]*Regilor|II[\s\xa0]*a[\s\xa0]*(?:lui[\s\xa0]*Samuel|Regilor))|Masodik[\s\xa0]*Sam(?:uel)?|2(?:(?:[ao](?:\.[\s\xa0]*(?:Reinos|Samuel)|[\s\xa0]*(?:Reinos|Samuel)))|d(?:\.[\s\xa0]*Samuel|e(?:\.[\s\xa0]*Samuel|[\s\xa0]*Samuel)|[\s\xa0]*Samuel)|e(?:me(?:\.[\s\xa0]*Samuel|[\s\xa0]*Samuel)|\.[\s\xa0]*Sam(?:uel)?|[\s\xa0]*Sam(?:uel)?)|nd(?:\.[\s\xa0]*(?:Kingdoms|S(?:a(?:m(?:u[ae]l[ls]?)?)?|ma?))|[\s\xa0]*(?:Kingdoms|S(?:a(?:m(?:u[ae]l[ls]?)?)?|ma?)))|\.(?:o(?:\.[\s\xa0]*Samuel|[\s\xa0]*Samuel)|[\s\xa0]*(?:kniha[\s\xa0]*Samuelova|K(?:ongerigernes[\s\xa0]*Bog|s(?:ieg(?:[ai][\s\xa0]*Samuel(?:owa|a))|\.[\s\xa0]*Samuel(?:owa|a)|[\s\xa0]*Samuel(?:owa|a))|ingdoms)|samuelko|Re(?:g(?:norum|ilor)|inos)|S(?:hamooael|a(?:m(?:weli|u(?:u['’]eel|al[ls]?|el(?:o[vw]a|[el]|i(?:n[\s\xa0]*kirja|[st])?|s(?:bo(?:g|k(?:en)?))?)?|il)|yel)?)?|ma?)?))|Sam|[\s\xa0]*(?:k(?:niha[\s\xa0]*Samuelova|\.[\s\xa0]*Samuelova|[\s\xa0]*Samuelova)|(?:[ei](?:\.[\s\xa0]*Samuelit|[\s\xa0]*Samuelit))|K(?:ongerigernes[\s\xa0]*Bog|s(?:ieg(?:[ai][\s\xa0]*Samuel(?:owa|a))|\.[\s\xa0]*Samuel(?:owa|a)|[\s\xa0]*Samuel(?:owa|a))|ingdoms)|Camuvel|samu(?:elko|wel)|Re(?:g(?:norum|ilor)|inos)|S(?:hamooael|a(?:m(?:weli|u(?:u['’]eel|al[ls]?|el(?:o[vw]a|[el]|i(?:n[\s\xa0]*kirja|[st])?|s(?:bo(?:g|k(?:en)?))?)?|il)|yel)?)?|ma?)?))|Pili[\s\xa0]*Sam(?:[uw]eli)?)|(?:Druga[\s\xa0]*Samuelova|Toinen[\s\xa0]*Samuelin|II(?:\.[\s\xa0]*Samuelin|[\s\xa0]*Samueli[ns])|2(?:\.[\s\xa0]*Samuelin|[\s\xa0]*Samuelin)))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["1Sam"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])((?:I(?:\.[\s\xa0]*(?:kniha[\s\xa0]*Samuelova|K(?:s(?:ieg(?:[ai][\s\xa0]*Samuel(?:owa|a))|\.[\s\xa0]*Samuel(?:owa|a)|[\s\xa0]*Samuel(?:owa|a))|ingdoms)|Re(?:g(?:norum|ilor)|inos)|S(?:a(?:m(?:weli|u(?:u['’]eel|al[ls]?|el(?:o[vw]a|[els]|i(?:n[\s\xa0]*kirja|s)?)?|il)|yel)?)?|ma?)?)|[\s\xa0]*(?:kniha[\s\xa0]*Samuelova|K(?:s(?:ieg(?:[ai][\s\xa0]*Samuel(?:owa|a))|\.[\s\xa0]*Samuel(?:owa|a)|[\s\xa0]*Samuel(?:owa|a))|ingdoms)|Re(?:g(?:norum|ilor)|inos)|S(?:a(?:m(?:weli|u(?:u['’]eel|al[ls]?|el(?:o[vw]a|[els]|i(?:n[\s\xa0]*kirja)?)?|il)|yel)?)?|ma?)?))|samuelko[\s\xa0]*pustak|Cartea[\s\xa0]*(?:intai[\s\xa0]*a[\s\xa0]*Regilor|I[\s\xa0]*a[\s\xa0]*(?:lui[\s\xa0]*Samuel|Regilor))|E(?:nsimmainen[\s\xa0]*Samuelin[\s\xa0]*kirja|rste[\s\xa0]*Samuel|erste[\s\xa0]*Sam(?:uel)?|lso[\s\xa0]*Sam(?:uel)?)|Sam(?:eela[\s\xa0]*Maxaafaa[\s\xa0]*Koiruwaa|u(?:u['’]eel[\s\xa0]*Kowaad|el(?:i(?:s[\s\xa0]*I|[\s\xa0]*I)|[\s\xa0]*I)))|F(?:orsta[\s\xa0]*Samuelsboken|yrri[\s\xa0]*Samuelsbok|irst[\s\xa0]*(?:Kingdoms|S(?:a(?:m(?:u[ae]l[ls]?)?)?|ma?)))|K(?:itabu[\s\xa0]*cha[\s\xa0]*Kwanza[\s\xa0]*cha[\s\xa0]*Samueli|wanza[\s\xa0]*Sam(?:[uw]eli)?)|P(?:ierwsz(?:[aey][\s\xa0]*(?:Ks(?:ieg(?:[ai][\s\xa0]*Samuel(?:owa|a))|\.[\s\xa0]*Samuel(?:owa|a)|[\s\xa0]*Samuel(?:owa|a))|Samuelowa))|r(?:em(?:ier(?:e(?:s[\s\xa0]*Samuel|[\s\xa0]*Samuel)|s[\s\xa0]*Samuel|[\s\xa0]*Samuel)|ye[\s\xa0]*(?:liv[\s\xa0]*Samyel[\s\xa0]*la|Samyel))|im(?:[ao][\s\xa0]*Samuele|e(?:ir(?:[ao][\s\xa0]*(?:Reinos|Samuel))|r(?:o[\s\xa0]*Samuel|[\s\xa0]*Samuel)))|v(?:a[\s\xa0]*(?:Samuelova[\s\xa0]*knjiga|kn(?:jiga[\s\xa0]*o[\s\xa0]*Samuelu|iha[\s\xa0]*Samuelova))|y[\s\xa0]*(?:list[\s\xa0]*Samuelova|Samuelova)|ni[\s\xa0]*(?:kniha[\s\xa0]*Samuelova|S(?:am(?:uel(?:ova)?)?)?))))|Una(?:ng[\s\xa0]*Samuel|[\s\xa0]*Samuel)|Liber[\s\xa0]*I[\s\xa0]*Samuelis|1(?:re(?:\.[\s\xa0]*Samuel|[\s\xa0]*Samuel)|(?:[ao](?:\.[\s\xa0]*(?:Reinos|Samuel)|[\s\xa0]*(?:Reinos|Samuel)))|e(?:r(?:\.[\s\xa0]*Samuel|e(?:\.[\s\xa0]*Samuel|[\s\xa0]*Samuel)|[\s\xa0]*Samuel)|\.[\s\xa0]*Sam(?:uel)?|[\s\xa0]*Sam(?:uel)?)|st(?:\.[\s\xa0]*(?:Kingdoms|S(?:a(?:m(?:u[ae]l[ls]?)?)?|ma?))|[\s\xa0]*(?:Kingdoms|S(?:a(?:m(?:u[ae]l[ls]?)?)?|ma?)))|\.(?:o(?:\.[\s\xa0]*Samuel|[\s\xa0]*Samuel)|[\s\xa0]*(?:kniha[\s\xa0]*Samuelova|K(?:ongerigernes[\s\xa0]*Bog|s(?:ieg(?:[ai][\s\xa0]*Samuel(?:owa|a))|\.[\s\xa0]*Samuel(?:owa|a)|[\s\xa0]*Samuel(?:owa|a))|ingdoms)|samuelko|Re(?:g(?:norum|ilor)|inos)|S(?:hamooael|a(?:m(?:weli|u(?:u['’]eel|al[ls]?|el(?:o[vw]a|[el]|i(?:n[\s\xa0]*kirja|[st])?|s(?:bo(?:g|k(?:en)?))?)?|il)|yel)?)?|ma?)?))|Sam|[\s\xa0]*(?:k(?:niha[\s\xa0]*Samuelova|\.[\s\xa0]*Samuelova|[\s\xa0]*Samuelova)|(?:[ei](?:\.[\s\xa0]*Samuelit|[\s\xa0]*Samuelit))|K(?:ongerigernes[\s\xa0]*Bog|s(?:ieg(?:[ai][\s\xa0]*Samuel(?:owa|a))|\.[\s\xa0]*Samuel(?:owa|a)|[\s\xa0]*Samuel(?:owa|a))|ingdoms)|Camuvel|samu(?:elko|wel)|Re(?:g(?:norum|ilor)|inos)|S(?:hamooael|a(?:m(?:weli|u(?:u['’]eel|al[ls]?|el(?:o[vw]a|[el]|i(?:n[\s\xa0]*kirja|[st])?|s(?:bo(?:g|k(?:en)?))?)?|il)|yel)?)?|ma?)?)))|(?:Ensimmainen[\s\xa0]*Samuelin|Prva[\s\xa0]*Samuelova|1(?:\.[\s\xa0]*Samuelin|[\s\xa0]*Samuelin)|I(?:\.[\s\xa0]*Samuelin|[\s\xa0]*Samueli[ns])|Samu[ae]l[ls]?))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["2Chr"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])(2(?:\.[\s\xa0]*itihasko|[\s\xa0]*itihasko)|(?:2(?:d(?:\.[\s\xa0]*Chroniques|e(?:\.[\s\xa0]*Chroniques|[\s\xa0]*Chroniques)|[\s\xa0]*Chroniques)|(?:[ao](?:\.[\s\xa0]*Cronicas|[\s\xa0]*Cronicas))|e(?:me(?:\.[\s\xa0]*Chroniques|[\s\xa0]*Chroniques)|\.[\s\xa0]*(?:Chroniques|Kron(?:ieken)?)|[\s\xa0]*(?:Chroniques|Kron(?:ieken)?))|nd(?:\.[\s\xa0]*(?:Paralipomenon|C(?:oron[io]cles?|ron(?:[io]cles?)?|h(?:oron[io]cles?|r(?:n|o(?:n(?:ic(?:als|les?)|ocles?)?)?)?)))|[\s\xa0]*(?:Paralipomenon|C(?:oron[io]cles?|ron(?:[io]cles?)?|h(?:oron[io]cles?|r(?:n|o(?:n(?:ic(?:als|les?)|ocles?)?)?)?))))|\.(?:o(?:\.[\s\xa0]*Cronicas|[\s\xa0]*Cronicas)|[\s\xa0]*(?:C(?:oron[io]cles?|ron(?:ache|ocles?|i(?:c(?:as?|i(?:lor)?|l(?:es?)?)|ka))?|h(?:oron[io]cles?|r(?:n|o(?:n(?:ocles?|i(?:ques|c(?:als|les?)|k))?)?)?))|I(?:tihas|stwa)|M(?:ambo[\s\xa0]*ya[\s\xa0]*Nyakati|ga[\s\xa0]*[CK]roni(?:[ck]a))|Taar(?:iikhdii)?|Pa(?:r(?:alipomen(?:a|on?))?)?|Hroniky|L(?:jetopisa|etopisu)|Babad|kniha[\s\xa0]*kronik|K(?:s(?:ieg[ai][\s\xa0]*Kronik|\.[\s\xa0]*Kronik|[\s\xa0]*Kronik)|wonik|ro(?:n(?:i(?:eken|c(?:ka|a)|k(?:e(?:boken|l)|a(?:ve)?)?))?)?)|Aikakirja|Nya))|[\s\xa0]*(?:(?:[ie](?:\.[\s\xa0]*Kronika(?:ve)?|[\s\xa0]*Kronika(?:ve)?))|K(?:s(?:ieg[ai][\s\xa0]*Kronik|\.[\s\xa0]*Kronik|[\s\xa0]*Kronik)|wonik|r(?:n|o(?:n(?:i(?:eken|c(?:ka|a)|k(?:e(?:boken|l)|a(?:ve)?)?))?)?))|I(?:tihas|st(?:wa)?)|M(?:ambo[\s\xa0]*ya[\s\xa0]*Nyakati|ga[\s\xa0]*[CK]roni(?:[ck]a))|Taar(?:iikhdii)?|Pa(?:r(?:alipomen(?:a|on?))?)?|L(?:etopisu|jet(?:opisa)?)|Babad|Aik(?:ak(?:irja)?)?|N(?:alakamam|ya)|k(?:niha[\s\xa0]*kronik|\.[\s\xa0]*(?:Paralipomenon|Kroni(?:cka|k))|[\s\xa0]*(?:Paralipomenon|Kroni(?:cka|k)))|H(?:roniky|anO)|C(?:oron[io]cles?|h(?:oron[io]cles?|r(?:n|o(?:n(?:ocles?|i(?:ques|c(?:als|les?)|k))?)?)?)?|r(?:o(?:n(?:ache|ocles?|i(?:c(?:as?|i(?:lor)?|l(?:es?)?)|ka))?)?)?))|Chr)|Ma(?:mbo[\s\xa0]*ya[\s\xa0]*Nyakati[\s\xa0]*II|sodik[\s\xa0]*Kron(?:ika)?)|Kronikak[\s\xa0]*II|Zweite[\s\xa0]*Chronik|I(?:kalawang[\s\xa0]*(?:Paralipomeno|Mga[\s\xa0]*(?:Cronica|Kronika)|C(?:hronicle|ronica)|Kronik(?:el|a))|I(?:\.[\s\xa0]*(?:C(?:oron[io]cles?|ron(?:ache|ocles?|ic(?:as?|i(?:lor)?|l(?:es?)?))?|h(?:oron[io]cles?|r(?:n|o(?:n(?:i(?:ques|c(?:als|les?))|ocles?)?)?)?))|Taar(?:iikhdii)?|Istwa|M(?:ambo[\s\xa0]*ya[\s\xa0]*Nyakati|ga[\s\xa0]*(?:Cronica|Kronika))|Pa(?:r(?:alipomen(?:a|on?))?)?|Hroniky|L(?:jetopisa|etopisu)|K(?:s(?:ieg[ai][\s\xa0]*Kronik|\.[\s\xa0]*Kronik|[\s\xa0]*Kronik)|wonik|ro(?:n(?:i(?:eken|cka|k(?:el|a)?))?)?)|Babad|kniha[\s\xa0]*kronik|Aikakirja|Nya)|[\s\xa0]*(?:C(?:oron[io]cles?|ron(?:ache|ocles?|ic(?:as?|i(?:lor)?|l(?:es?)?))?|h(?:oron[io]cles?|r(?:n|o(?:n(?:i(?:ques|c(?:als|les?))|ocles?)?)?)?))|Taar(?:iikhdii)?|Istwa|Pa(?:r(?:alipomen[ao])?)?|M(?:ambo[\s\xa0]*ya[\s\xa0]*Nyakati|ga[\s\xa0]*(?:Cronica|Kronika))|Hroniky|L(?:jetopisa|etopisu)|K(?:s(?:ieg[ai][\s\xa0]*Kronik|\.[\s\xa0]*Kronik|[\s\xa0]*Kronik)|wonik|ro(?:n(?:i(?:eken|cka|k(?:el|a)?))?)?)|Babad|kniha[\s\xa0]*kronik|Aikakirja|Nya)))|Cartea[\s\xa0]*a[\s\xa0]*doua[\s\xa0]*Paralipomena|Se(?:gund[ao][\s\xa0]*Cronicas|cond(?:[ao][\s\xa0]*Cronache|[\s\xa0]*(?:Paralipomenon|C(?:oron[io]cles?|ron(?:[io]cles?)?|h(?:oron[io]cles?|r(?:n|o(?:n(?:ic(?:als|les?)|ocles?)?)?)?)))))|T(?:aariikhdii[\s\xa0]*Labaad|oinen[\s\xa0]*Aikakirja|weede[\s\xa0]*Kron(?:ieken)?)|And(?:ra[\s\xa0]*Kronikeboken|en[\s\xa0]*Kron)|Liber[\s\xa0]*II[\s\xa0]*Paralipomenon|Hanidabaa[\s\xa0]*Odiya[\s\xa0]*Naa77antto[\s\xa0]*Maxaafaa|P(?:aralipomenon[\s\xa0]*II|ili[\s\xa0]*(?:Mambo[\s\xa0]*ya[\s\xa0]*Nyakati|Nya))|D(?:e(?:uxieme(?:s[\s\xa0]*Chroniques|[\s\xa0]*Chroniques)|zyem[\s\xa0]*(?:liv[\s\xa0]*Kwonik[\s\xa0]*la|Kwonik|Istwa))|ru(?:g(?:a[\s\xa0]*(?:knjiga[\s\xa0]*Ljetopisa|Ljetopisa|K(?:s(?:ieg[ai][\s\xa0]*Kronik|\.[\s\xa0]*Kronik|[\s\xa0]*Kronik)|ronik))|i[\s\xa0]*K(?:s(?:ieg[ai][\s\xa0]*Kronik|\.[\s\xa0]*Kronik|[\s\xa0]*Kronik)|ronik))|h(?:a[\s\xa0]*(?:kniha[\s\xa0]*(?:Paralipomenon|Kroni(?:cka|k))|Letopisu|Kroni(?:cka|k)|Pa(?:ralipomenon)?)|y[\s\xa0]*(?:kniha[\s\xa0]*kronik|list[\s\xa0]*(?:Paralipomenon|Kroni(?:cka|k))|Letopisu|Kroni(?:cka|k)|Pa(?:ralipomenon)?)))))|(?:Druha[\s\xa0]*kniha[\s\xa0]*kronik|II[\s\xa0]*Paralipomenon|2[\s\xa0]*itihas))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["1Chr"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])(1(?:\.[\s\xa0]*itihasko|[\s\xa0]*itihasko)|(?:1(?:re(?:\.[\s\xa0]*Chroniques|[\s\xa0]*Chroniques)|(?:[ao](?:\.[\s\xa0]*Cronicas|[\s\xa0]*Cronicas))|e(?:r(?:\.[\s\xa0]*Chroniques|e(?:\.[\s\xa0]*Chroniques|[\s\xa0]*Chroniques)|[\s\xa0]*Chroniques)|\.[\s\xa0]*Kron(?:ieken)?|[\s\xa0]*Kron(?:ieken)?)|st(?:\.[\s\xa0]*(?:Paralipomenon|C(?:oron[io]cles?|ron(?:[io]cles?)?|h(?:oron(?:icles|ocles?)|r(?:n|o(?:n(?:ic(?:als|les?)|ocles?)?)?)?)))|[\s\xa0]*(?:Paralipomenon|C(?:oron[io]cles?|ron(?:[io]cles?)?|h(?:oron(?:icles|ocles?)|r(?:n|o(?:n(?:ic(?:als|les?)|ocles?)?)?)?))))|\.(?:o(?:\.[\s\xa0]*Cronicas|[\s\xa0]*Cronicas)|[\s\xa0]*(?:C(?:oron[io]cles?|ron(?:ache|ocles?|i(?:c(?:as?|i(?:lor)?|l(?:es?)?)|ka))?|h(?:oron(?:icles|ocles?)|r(?:n|o(?:n(?:ocles?|i(?:ques|c(?:als|les?)|k))?)?)?))|I(?:tihas|stwa)|M(?:ambo[\s\xa0]*ya[\s\xa0]*Nyakati|ga[\s\xa0]*[CK]roni(?:[ck]a))|Taar(?:iikhdii)?|Pa(?:r(?:alipomen(?:a|on?))?)?|Hroniky|L(?:jetopisa|etopisu)|Babad|kniha[\s\xa0]*kronik|K(?:s(?:ieg[ai][\s\xa0]*Kronik|\.[\s\xa0]*Kronik|[\s\xa0]*Kronik)|wonik|ro(?:n(?:i(?:eken|c(?:ka|a)|k(?:e(?:boken|l)|a(?:ve)?)?))?)?)|Aikakirja|Nya))|[\s\xa0]*(?:(?:[ie](?:\.[\s\xa0]*Kronika(?:ve)?|[\s\xa0]*Kronika(?:ve)?))|K(?:s(?:ieg[ai][\s\xa0]*Kronik|\.[\s\xa0]*Kronik|[\s\xa0]*Kronik)|wonik|r(?:n|o(?:n(?:i(?:eken|c(?:ka|a)|k(?:e(?:boken|l)|a(?:ve)?)?))?)?))|I(?:tihas|st(?:wa)?)|M(?:ambo[\s\xa0]*ya[\s\xa0]*Nyakati|ga[\s\xa0]*[CK]roni(?:[ck]a))|Taar(?:iikhdii)?|Pa(?:r(?:alipomen(?:a|on?))?)?|L(?:etopisu|jet(?:opisa)?)|Babad|Aik(?:ak(?:irja)?)?|N(?:alakamam|ya)|k(?:niha[\s\xa0]*kronik|\.[\s\xa0]*(?:Paralipomenon|Kroni(?:cka|k))|[\s\xa0]*(?:Paralipomenon|Kroni(?:cka|k)))|H(?:roniky|anO)|C(?:oron[io]cles?|h(?:oron(?:icles|ocles?)|r(?:n|o(?:n(?:ocles?|i(?:ques|c(?:als|les?)|k))?)?)?)?|r(?:o(?:n(?:ache|ocles?|i(?:c(?:as?|i(?:lor)?|l(?:es?)?)|ka))?)?)?))|Chr)|itihasko[\s\xa0]*pustak|Mambo[\s\xa0]*ya[\s\xa0]*Nyakati[\s\xa0]*I|C(?:artea[\s\xa0]*intai[\s\xa0]*Paralipomena|horonicle)|P(?:aralipomenon[\s\xa0]*I|ierwsz[aey][\s\xa0]*K(?:s(?:ieg(?:[ai][\s\xa0]*Kronik|\.[\s\xa0]*Kronik|[\s\xa0]*Kronik)|ronik))|r(?:im(?:e(?:ir[ao][\s\xa0]*Cronicas|r(?:o[\s\xa0]*Cronicas|[\s\xa0]*Cronicas))|[ao][\s\xa0]*Cronache)|em(?:ier(?:e(?:s[\s\xa0]*Chroniques|[\s\xa0]*Chroniques)|s[\s\xa0]*Chroniques|[\s\xa0]*Chroniques)|ye[\s\xa0]*(?:liv[\s\xa0]*Kwonik[\s\xa0]*la|Kwonik|Istwa))|v(?:a[\s\xa0]*(?:Paralipomenon|kn(?:jiga[\s\xa0]*Ljetopisa|iha[\s\xa0]*(?:Paralipomenon|Kroni(?:cka|k)))|Ljetopisa|Kroni(?:cka|k))|y[\s\xa0]*(?:Paralipomenon|list[\s\xa0]*(?:Paralipomenon|Kroni(?:cka|k))|Kroni(?:cka|k))|ni[\s\xa0]*(?:kniha[\s\xa0]*kronik|Letopisu|Kronik|Pa(?:ralipomenon)?))))|Una(?:ng[\s\xa0]*(?:Paralipomeno|Mga[\s\xa0]*(?:Cronica|Kronika)|C(?:hronicle|ronica)|Kronik(?:el|a))|[\s\xa0]*(?:Paralipomeno|Mga[\s\xa0]*(?:Cronica|Kronika)|C(?:hronicle|ronica)|Kronik(?:el|a)))|Liber[\s\xa0]*I[\s\xa0]*Paralipomenon|K(?:ronikak[\s\xa0]*I|wanza[\s\xa0]*(?:Mambo[\s\xa0]*ya[\s\xa0]*Nyakati|Nya))|I(?:\.[\s\xa0]*(?:C(?:oron[io]cles?|ron(?:ache|ocles?|ic(?:as?|i(?:lor)?|l(?:es?)?))?|h(?:oron(?:icles|ocles?)|r(?:n|o(?:n(?:i(?:ques|c(?:als|les?))|ocles?)?)?)?))|K(?:s(?:ieg[ai][\s\xa0]*Kronik|\.[\s\xa0]*Kronik|[\s\xa0]*Kronik)|wonik|ro(?:n(?:i(?:eken|cka|k(?:el)?))?)?)|Taar(?:iikhdii)?|Istwa|M(?:ambo[\s\xa0]*ya[\s\xa0]*Nyakati|ga[\s\xa0]*(?:Cronica|Kronika))|Pa(?:r(?:alipomen(?:a|on?))?)?|Hroniky|L(?:jetopisa|etopisu)|Babad|kniha[\s\xa0]*kronik|Aikakirja|Nya)|[\s\xa0]*(?:C(?:oron[io]cles?|ron(?:ache|ocles?|ic(?:as?|i(?:lor)?|l(?:es?)?))?|h(?:oron(?:icles|ocles?)|r(?:n|o(?:n(?:i(?:ques|c(?:als|les?))|ocles?)?)?)?))|K(?:s(?:ieg[ai][\s\xa0]*Kronik|\.[\s\xa0]*Kronik|[\s\xa0]*Kronik)|wonik|ro(?:n(?:i(?:eken|cka|k(?:el)?))?)?)|Taar(?:iikhdii)?|Istwa|Pa(?:r(?:alipomen[ao])?)?|M(?:ambo[\s\xa0]*ya[\s\xa0]*Nyakati|ga[\s\xa0]*(?:Cronica|Kronika))|Hroniky|L(?:jetopisa|etopisu)|Babad|kniha[\s\xa0]*kronik|Aikakirja|Nya))|E(?:nsimmainen[\s\xa0]*Aikakirja|rste[\s\xa0]*Chronik|erste[\s\xa0]*Kron(?:ieken)?|lso[\s\xa0]*Kron(?:ika)?)|Hanidabaa[\s\xa0]*Odiyaa[\s\xa0]*Koiro[\s\xa0]*Maxaafaa|Taariikhdii[\s\xa0]*Kowaad|F(?:orsta[\s\xa0]*Kronikeboken|yrri[\s\xa0]*Kronikubok|irst[\s\xa0]*(?:Paralipomenon|C(?:oron[io]cles?|ron(?:[io]cles?)?|h(?:oron(?:icles|ocles?)|r(?:n|o(?:n(?:ic(?:als|les?)|ocles?)?)?)?)))))|Pierwsz(?:[aey][\s\xa0]*K(?:s(?:\.[\s\xa0]*Kronik|[\s\xa0]*Kronik)|ronik))|(?:Paralipomenon|I(?:\.[\s\xa0]*Kronika|[\s\xa0]*(?:Paralipomenon|Kronika))|1[\s\xa0]*itihas|C(?:oron[io]cles?|h(?:oron(?:icles|ocles?)|ron(?:ocles?|ic(?:als|les?)))|ron[io]cles?)))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["Ezra"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Li(?:v[\\s\\xa0]*Esdras[\\s\\xa0]*la|ber[\\s\\xa0]*Esdrae)|K(?:njiga[\\s\\xa0]*Ezrina|s(?:ieg[ai][\\s\\xa0]*Ezdrasza|\\.[\\s\\xa0]*Ezdrasza|[\\s\\xa0]*Ezdrasza))|Aejra|edzra|Izira?|Ces(?:r(?:aa)?)?|E(?:s(?:d(?:ra?)?|r(?:a(?:n[\\s\\xa0]*kirja|s[\\s\\xa0]*bok|bok)?)?)|z(?:sd(?:ras)?|d(?:r(?:as?)?)?|r(?:a(?:s[\\s\\xa0]*Bog)?)?)|d))|E(?:zdrasza|s(?:dra[es]|ra[sn])))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Ruth"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Li(?:ber[\\s\\xa0]*Ruth|v[\\s\\xa0]*Rit[\\s\\xa0]*la)|K(?:itabu[\\s\\xa0]*cha[\\s\\xa0]*Ruth[iu]|njiga[\\s\\xa0]*o[\\s\\xa0]*Ruti|s(?:ieg(?:[ai][\\s\\xa0]*Rut(?:hy)?)|\\.[\\s\\xa0]*Rut(?:hy)?|[\\s\\xa0]*Rut(?:hy)?))|Uru(?:to)?|R(?:oot|th?|u(?:t(?:hs[\\s\\xa0]*Bog|s[\\s\\xa0]*bok|a(?:rbok)?|e)|u(?:d|t(?:in[\\s\\xa0]*kirja)?))?))|R(?:u(?:utin|t(?:s|h[iu]?)?)|it))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Neh"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(nahemyahko[\\s\\xa0]*pustak|Nahemyah|(?:K(?:njiga[\\s\\xa0]*Nehemijina|s(?:ieg[ai][\\s\\xa0]*Nehemiasza|\\.[\\s\\xa0]*Nehemiasza|[\\s\\xa0]*Nehemiasza))|Li(?:ber[\\s\\xa0]*Nehemiae|v[\\s\\xa0]*Neyemi[\\s\\xa0]*an)|nahemya|N(?:ahi(?:miyaa)?|e(?:kemiya|em(?:i(?:ja|as?)?)?|h(?:amiah?|em(?:eia|a(?:[ai](?:(?:[ai]h|h))|h)|i(?:i(?:[ai]h|h)|ja|a(?:n[\\s\\xa0]*kirja|s’[\\s\\xa0]*Bog|bok|[ai]h|h)?|[eh])|ja(?:s[\\s\\xa0]*bok)?|ya)|im(?:a(?:[ai](?:(?:[ai]h|h))|h)|i(?:i(?:[ai]h|h)|a(?:[ai]h|h)?|h)))?|x(?:emyaah)?)?))|(?:nahemyahko|Ne(?:hem(?:jas|ia(?:s(?:za)?|[ne]))|yemi)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["GkEsth"],
        apocrypha: true,
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Den[\\s\\xa0]*greske[\\s\\xa0]*Ester-?bok(?:en|a)|Kr(?:eikkalainen[\\s\\xa0]*Esterin[\\s\\xa0]*kirja|\\.[\\s\\xa0]*Est|[\\s\\xa0]*Est)|G(?:k(?:[\\s\\xa0]*Esth?|Esth)|r(?:aeca[\\s\\xa0]*Esther|e(?:cke[\\s\\xa0]*casti[\\s\\xa0]*knihy[\\s\\xa0]*Ester|ek[\\s\\xa0]*Est(?:h(?:er)?)?)|[\\s\\xa0]*Esth?|Est))|Es(?:zter[\\s\\xa0]*konyvenek[\\s\\xa0]*kiegeszitese|t(?:er(?:arbok[\\s\\xa0]*hin[\\s\\xa0]*griska|[\\s\\xa0]*(?:enligt[\\s\\xa0]*den[\\s\\xa0]*grekiska[\\s\\xa0]*texten|recke[\\s\\xa0]*(?:dodatky|casti)|greco|\\((?:versione[\\s\\xa0]*greca\\)|greco\\)|Gr(?:i(?:yego\\)|e(?:chisch\\)|ks\\)|go\\)))|yego\\)|eg[ao]\\)|\\)))|Gr(?:i(?:yego|ego)|yego|eg[ao])?))|h(?:er[\\s\\xa0]*(?:\\(Gre(?:ek\\)|c\\))|graeca|Gr(?:ec)?)|[\\s\\xa0]*Gr)|[\\s\\xa0]*(?:\\(Gr\\)|Gr)|g)))|(?:Kreikkalainen[\\s\\xa0]*Esterin|Est(?:er[\\s\\xa0]*(?:\\((?:Grie(?:chisch\\)|ks\\))|gr(?:iego\\)|ega\\)))|gr(?:iego|ega)?)|h(?:er[\\s\\xa0]*(?:\\(grec\\)|gr(?:ec)?)|[\\s\\xa0]*gr)|[\\s\\xa0]*(?:\\(Gr\\)|gr))))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Esth"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:estarko[\\s\\xa0]*pustak|Li(?:ber[\\s\\xa0]*Esther|v[\\s\\xa0]*Este[\\s\\xa0]*a)|Ks(?:ieg[ai][\\s\\xa0]*Estery|\\.[\\s\\xa0]*Estery|[\\s\\xa0]*Estery)|astar|A(?:ester|st(?:tiro)?)|E(?:s(?:zt(?:er)?|t(?:e(?:er|r(?:in[\\s\\xa0]*kirja|s[\\s\\xa0]*(?:Bog|bok)|ei|a(?:rbok)?)?)|[ah]r?)?)?|t))|Ester(?:in|[sy])|(?:est(?:arko|er)|Est(?:her|e)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Job"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Li(?:v[\\s\\xa0]*Job[\\s\\xa0]*la|ber[\\s\\xa0]*Iob)|K(?:itabu[\\s\\xa0]*cha[\\s\\xa0]*(?:Ayubu|Yobu)|n(?:jiga[\\s\\xa0]*o[\\s\\xa0]*Jobu|iha[\\s\\xa0]*Jobova)|\\.[\\s\\xa0]*Jobova|[\\s\\xa0]*Jobova|s(?:ieg(?:[ai][\\s\\xa0]*(?:Hioba|Ijoba|Joba))|\\.[\\s\\xa0]*(?:Hioba|Ijoba|Joba)|[\\s\\xa0]*(?:Hioba|Ijoba|Joba)))|I(?:job|y(?:yooba|ob)|ov)|Ay(?:yoob|u(?:ub|b)?)|ayyubko[\\s\\xa0]*pustak|J(?:o(?:b(?:s(?:[\\s\\xa0]*(?:Bog|bok)|bok)|i(?:n[\\s\\xa0]*kirja)?)|v)|b)|G(?:iobbe|b)|Yo(?:pu|b)|Hi(?:obi?)?)|(?:ayyubko|Ayubu|Hioba|Yobu|iyob|Iob|Job(?:in|[as])?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Mal"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Pro(?:roctwo[\\s\\xa0]*Malachyaszowe|phetia[\\s\\xa0]*Malachiae)|Ks(?:ieg[ai][\\s\\xa0]*Malachiasza|\\.[\\s\\xa0]*Malachiasza|[\\s\\xa0]*Malachiasza)|Liv[\\s\\xa0]*Malachi[\\s\\xa0]*a|M(?:ikiyaasa|a(?:-?la-?(?:chi|ki)|l(?:ea(?:[ck]hi|hi)|ichi|kiya|a(?:akii|hija|k(?:ee|i(?:s[\\s\\xa0]*bok|a(?:n[\\s\\xa0]*kirja|s’[\\s\\xa0]*Bog)?)?)|qu(?:ias)?|c(?:h(?:i(?:as?|e))?|i)?)?|ch?)?)|l))|(?:Mala(?:kia[ns]|chi(?:asza)?)|malaki))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Matt"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:matt(?:ayane|ile)|Injil(?:i[\\s\\xa0]*ya[\\s\\xa0]*Mathayo|[\\s\\xa0]*Matius)|M(?:a(?:buting[\\s\\xa0]*Balita[\\s\\xa0]*ayon[\\s\\xa0]*kay[\\s\\xa0]*(?:San[\\s\\xa0]*Mateo|Mateo)|atiyoosa|t(?:ayos?|ous(?:ovo[\\s\\xa0]*evangelium)?|t(?:e(?:i[\\s\\xa0]*evangelium|u(?:ksen[\\s\\xa0]*evankeliumi|sevangeliet)|yu[\\s\\xa0]*Narceyti|e)|h(?:a(?:eus|us)|eus|ieu)?)|us|ye|e(?:[ij]|u(?:sz?)?)?|h))|t[ht])|Ungjilli[\\s\\xa0]*i[\\s\\xa0]*Mateut|The[\\s\\xa0]*Gospel[\\s\\xa0]*(?:according[\\s\\xa0]*to[\\s\\xa0]*(?:S(?:aint[\\s\\xa0]*M(?:at(?:h(?:(?:[ht](?:(?:[ht](?:iew|ew))|iew|ew))|iew|ew)|t(?:h(?:(?:[ht](?:iew|ew))|iew|ew|we)|iew|t(?:h(?:iew|ew)|iew|ew)|ew|we)?)?|t)|t(?:\\.[\\s\\xa0]*M(?:at(?:h(?:(?:[ht](?:(?:[ht](?:iew|ew))|iew|ew))|iew|ew)|t(?:h(?:(?:[ht](?:iew|ew))|iew|ew|we)|iew|t(?:h(?:iew|ew)|iew|ew)|ew|we)?)?|t)|[\\s\\xa0]*M(?:at(?:h(?:(?:[ht](?:(?:[ht](?:iew|ew))|iew|ew))|iew|ew)|t(?:h(?:(?:[ht](?:iew|ew))|iew|ew|we)|iew|t(?:h(?:iew|ew)|iew|ew)|ew|we)?)?|t)))|M(?:at(?:h(?:(?:[ht](?:(?:[ht](?:iew|ew))|iew|ew))|iew|ew)|t(?:h(?:(?:[ht](?:iew|ew))|iew|ew|we)|iew|t(?:h(?:iew|ew)|iew|ew)|ew|we)?)?|t))|of[\\s\\xa0]*(?:S(?:aint[\\s\\xa0]*M(?:at(?:h(?:(?:[ht](?:(?:[ht](?:iew|ew))|iew|ew))|iew|ew)|t(?:h(?:(?:[ht](?:iew|ew))|iew|ew|we)|iew|t(?:h(?:iew|ew)|iew|ew)|ew|we)?)?|t)|t(?:\\.[\\s\\xa0]*M(?:at(?:h(?:(?:[ht](?:(?:[ht](?:iew|ew))|iew|ew))|iew|ew)|t(?:h(?:(?:[ht](?:iew|ew))|iew|ew|we)|iew|t(?:h(?:iew|ew)|iew|ew)|ew|we)?)?|t)|[\\s\\xa0]*M(?:at(?:h(?:(?:[ht](?:(?:[ht](?:iew|ew))|iew|ew))|iew|ew)|t(?:h(?:(?:[ht](?:iew|ew))|iew|ew|we)|iew|t(?:h(?:iew|ew)|iew|ew)|ew|we)?)?|t)))|M(?:at(?:h(?:(?:[ht](?:(?:[ht](?:iew|ew))|iew|ew))|iew|ew)|t(?:h(?:(?:[ht](?:iew|ew))|iew|ew|we)|iew|t(?:h(?:iew|ew)|iew|ew)|ew|we)?)?|t)))|E(?:van(?:keliumi[\\s\\xa0]*Matteuksen[\\s\\xa0]*mukaan|geli(?:e(?:[\\s\\xa0]*volgens[\\s\\xa0]*Matteus|t[\\s\\xa0]*etter[\\s\\xa0]*Matteus)|um[\\s\\xa0]*(?:secundum[\\s\\xa0]*Matthaeum|podle[\\s\\xa0]*Matouse))|jelium[\\s\\xa0]*Podla[\\s\\xa0]*Matusa)|l[\\s\\xa0]*Evangelio[\\s\\xa0]*de[\\s\\xa0]*Mateo|banghelyo[\\s\\xa0]*(?:ayon[\\s\\xa0]*kay[\\s\\xa0]*Mateo|ni[\\s\\xa0]*(?:San[\\s\\xa0]*Mateo|Mateo))|w(?:angelia[\\s\\xa0]*(?:wg[\\s\\xa0]*sw(?:\\.[\\s\\xa0]*Mateusza|[\\s\\xa0]*Mateusza)|Mateusza)|\\.[\\s\\xa0]*Mateusza|[\\s\\xa0]*Mat(?:eusza)?))|Jevanhelije[\\s\\xa0]*vid[\\s\\xa0]*Matvija|Vangelo[\\s\\xa0]*di[\\s\\xa0]*(?:San[\\s\\xa0]*Matteo|Matteo)|Sulat[\\s\\xa0]*ni[\\s\\xa0]*San[\\s\\xa0]*Mateo)|(?:Evangelio[\\s\\xa0]*de[\\s\\xa0]*Mateo|Gospel[\\s\\xa0]*(?:according[\\s\\xa0]*to[\\s\\xa0]*(?:S(?:aint[\\s\\xa0]*M(?:at(?:h(?:(?:[ht](?:(?:[th](?:iew|ew))|iew|ew))|iew|ew)|t(?:iew|t(?:iew|h(?:iew|ew)|ew)|h(?:(?:[ht](?:iew|ew))|iew|we|ew)|ew|we)?)?|t)|t(?:\\.[\\s\\xa0]*M(?:at(?:h(?:(?:[ht](?:(?:[th](?:iew|ew))|iew|ew))|iew|ew)|t(?:h(?:iew|(?:[ht](?:iew|ew))|ew|we)|t(?:h(?:iew|ew)|iew|ew)|iew|ew|we)?)?|t)|[\\s\\xa0]*M(?:at(?:h(?:iew|(?:[ht](?:(?:[th](?:iew|ew))|iew|ew))|ew)|t(?:t(?:h(?:iew|ew)|iew|ew)|iew|h(?:(?:[ht](?:iew|ew))|iew|we|ew)|ew|we)?)?|t)))|M(?:at(?:h(?:iew|(?:[th](?:(?:[ht](?:iew|ew))|iew|ew))|ew)|t(?:iew|h(?:(?:[ht](?:iew|ew))|iew|ew|we)|t(?:iew|h(?:iew|ew)|ew)|ew|we)?)?|t))|of[\\s\\xa0]*(?:S(?:aint[\\s\\xa0]*M(?:at(?:h(?:(?:[th](?:(?:[ht](?:iew|ew))|iew|ew))|iew|ew)|t(?:iew|t(?:iew|h(?:iew|ew)|ew)|h(?:iew|(?:[th](?:iew|ew))|ew|we)|we|ew)?)?|t)|t(?:\\.[\\s\\xa0]*M(?:at(?:h(?:(?:[th](?:iew|(?:[th](?:iew|ew))|ew))|iew|ew)|t(?:iew|t(?:h(?:iew|ew)|iew|ew)|h(?:(?:[th](?:iew|ew))|iew|we|ew)|ew|we)?)?|t)|[\\s\\xa0]*M(?:at(?:h(?:(?:[th](?:iew|(?:[ht](?:iew|ew))|ew))|iew|ew)|t(?:iew|t(?:iew|h(?:iew|ew)|ew)|h(?:(?:[ht](?:iew|ew))|iew|ew|we)|ew|we)?)?|t)))|M(?:at(?:h(?:(?:[ht](?:(?:[th](?:iew|ew))|iew|ew))|iew|ew)|t(?:t(?:iew|h(?:iew|ew)|ew)|h(?:iew|(?:[ht](?:iew|ew))|ew|we)|iew|ew|we)?)?|t)))|S(?:a(?:n[\\s\\xa0]*Mateo|int[\\s\\xa0]*M(?:at(?:h(?:(?:[th](?:iew|(?:[th](?:iew|ew))|ew))|iew|ew)|t(?:iew|t(?:iew|h(?:iew|ew)|ew)|h(?:iew|(?:[ht](?:iew|ew))|we|ew)|we|ew)?)?|t))|t(?:\\.[\\s\\xa0]*M(?:at(?:h(?:(?:[th](?:(?:[th](?:iew|ew))|iew|ew))|iew|ew)|t(?:iew|t(?:iew|h(?:iew|ew)|ew)|h(?:iew|(?:[ht](?:iew|ew))|ew|we)|ew|we)?)?|t)|[\\s\\xa0]*M(?:at(?:h(?:(?:[th](?:(?:[th](?:iew|ew))|iew|ew))|iew|ew)|t(?:t(?:iew|h(?:iew|ew)|ew)|h(?:(?:[th](?:iew|ew))|iew|ew|we)|iew|ew|we)?)?|t)))|M(?:at(?:h(?:iew|(?:[th](?:iew|(?:[th](?:iew|ew))|ew))|ayo|ew)|ius|usa|eo|t(?:iew|t(?:h(?:iew|ew)|iew|ew)|h(?:iew|(?:[th](?:iew|ew))|ew|we)|e(?:yu|u(?:ksen|s)|[ow])|we)?)?|t)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Ps"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Ca(?:rtea[\\s\\xa0]*Psalmilor|nkitam)|Li(?:b(?:ri[\\s\\xa0]*i[\\s\\xa0]*Psalmeve|er[\\s\\xa0]*Psalmorum)|v[\\s\\xa0]*Som[\\s\\xa0]*yo)|stotrasamhita|Thi|M(?:ga[\\s\\xa0]*(?:Salmo|Awit)|a(?:smur|z(?:amure)?))|Z(?:solt(?:arok)?|a(?:l(?:tar|my?)|b(?:uri?)?))?|K(?:niha[\\s\\xa0]*zalm(?:ov|u)|s(?:ieg[ai][\\s\\xa0]*Psalmow|\\.[\\s\\xa0]*Psalmow|[\\s\\xa0]*Psalmow)|\\.[\\s\\xa0]*zalmov|[\\s\\xa0]*zalmov)|S(?:a(?:buur(?:radii)?|l(?:m(?:a(?:rnir|u)|os|e(?:rne(?:s[\\s\\xa0]*Bog)?|ne(?:s[\\s\\xa0]*bok)?)?|[is])?)?)|lm?)|Jabur|P(?:a(?:l(?:[lm]s|sms?)|m[ls]s|s(?:lms?|m(?:ls|s)|ss))|l(?:a(?:as?|m(?:as|s)?|s(?:m(?:as?|s)?|s)?)|ms|s(?:a(?:ms?)?|ms?|s(?:s(?:ss?)?)?))|s(?:l(?:a(?:lms?|ms?)?|m(?:as|[ms])?)|a(?:a(?:lms?|ms|a)|l(?:taren|lms?|a(?:ms?|s)?|m(?:u[ls]|a[su]?|e[nt]?|i(?:en[\\s\\xa0]*kirja|[it])?|[lm]s?|[sy])?|s)?|m(?:as|l(?:[as]|ms?)?|ms?|s)?|u(?:mes?)?)?|m(?:a(?:l(?:ms?|s)?)?|ls?|m)?|sm?)?)|Bhjan)|(?:Psalmien|Awit|S(?:alm(?:enes|o)|om)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Eccl"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Juru[\\s\\xa0]*Kotbah|K(?:niha[\\s\\xa0]*kazatelova|\\.[\\s\\xa0]*kazatelova|[\\s\\xa0]*kazatelova|s(?:ieg(?:[ai][\\s\\xa0]*(?:Eklezjastesa|K(?:aznodziei[\\s\\xa0]*Salomona|oheleta)))|\\.[\\s\\xa0]*(?:Eklezjastesa|K(?:aznodziei[\\s\\xa0]*Salomona|oheleta))|[\\s\\xa0]*(?:Eklezjastesa|K(?:aznodziei[\\s\\xa0]*Salomona|oheleta)))|a(?:alam|z(?:n(?:odziei[\\s\\xa0]*Salomonowego)?)?)|oh(?:elet(?:[\\s\\xa0]*—[\\s\\xa0]*Kazatel|h))?)|Ang[\\s\\xa0]*Mangangaral|upadesak(?:ko[\\s\\xa0]*pustak)?|Wac(?:diyah(?:ii|a))?|Coelet|Fork(?:ynneren(?:s[\\s\\xa0]*bok)?)?|Sa(?:bhopadeshak|ar(?:n(?:aaja(?:n[\\s\\xa0]*kirja)?)?)?)|Qo(?:h(?:eleth?)?)?|E(?:k(?:kle(?:siastes|zijast)|l(?:e(?:s[iy]astes|z(?:yas[\\s\\xa0]*-?[\\s\\xa0]*Liv[\\s\\xa0]*Filozof[\\s\\xa0]*la|iastes))|is[iy]astes)?)|ra(?:nchchaa)?|c(?:c(?:l(?:es(?:s(?:[ai](?:[ai](?:stes?|tes?)))|a(?:stes|a(?:stes?|tes?)|i(?:astes|stes?|tes?))|i(?:stes|a(?:i(?:astes|stes)|a(?:stes|tes)|st(?:i(?:ces|es)|ul|e)?|tes?)|i(?:astes|stes?|tes?)|tes))?)?)?|l(?:is[iy]astes|e(?:ziast(?:ul)?|s(?:yastes|s(?:[ai](?:[ai](?:stes?|tes?)))|a(?:[ai](?:stes?|tes?))|i(?:stes|a(?:iastes|st(?:i(?:ces|es)|ul|es?)|tes?)|i(?:stes?|tes?)))?))?)?)|Liber[\\s\\xa0]*(?:Ecclesiastes|Qoelet)|P(?:iracanki|r(?:ad|e(?:d(?:i(?:ger|k(?:a(?:ntens[\\s\\xa0]*bok|r(?:boken|inn|en(?:s[\\s\\xa0]*bok)?)|tor)|uesi|er(?:ens?)?)))?|g(?:ethwr)?)|op(?:ovjednik)?))|M(?:a(?:gwawali|nga)|hu(?:biri)?))|(?:Liv[\\s\\xa0]*Filozof[\\s\\xa0]*la|Mangangaral|Saarnaajan|upadesakko|E(?:cclesiastes|klezyas)|Filozof|K(?:azatel|ohelet)|Qoelet))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Ezek"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Iezechiel|H(?:e(?:zechiel|s(?:ekiel(?:in[\\s\\xa0]*kirja|s[\\s\\xa0]*bok)?)?)|iz(?:qqeela)?)|yahedzkel|E(?:cekkiyel|x(?:[ei](?:(?:[ei]k(?:iel|el))|k(?:iel|el)))|s(?:e(?:c(?:iel)?|k(?:iel(?:s[\\s\\xa0]*bok)?|yel)?)|k)|z(?:i(?:(?:[ei](?:qu(?:iel|el)|k(?:iel|el)))|qu(?:iel|el)|k(?:iel|el))|e(?:(?:[ei](?:qu(?:iel|el)|k(?:iel|el)))|c(?:iel|h(?:iele?)?)?|k(?:i(?:al|el(?:s(?:’[\\s\\xa0]*Bog|[\\s\\xa0]*Bog)|i)?)|el)?|q(?:u(?:i[ae]l|el)?)?)?|[kq]))|Liv[\\s\\xa0]*Ezekyel[\\s\\xa0]*la|Prophetia[\\s\\xa0]*Ezechielis|Y(?:ahejakel|e(?:he[sz]kiel|x(?:esqeel)?))|Ks(?:ieg[ai][\\s\\xa0]*Ezechiela|\\.[\\s\\xa0]*Ezechiela|[\\s\\xa0]*Ezechiela)|Jezekiil['’])|(?:Hesekielin|Eze(?:chiela|kyel)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Hos"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])(Hose(?:ias?|a(?:s(?:’[\s\xa0]*Bog|[\s\xa0]*bok))?)|(?:Prophetia[\s\xa0]*Osee|Ks(?:ieg[ai][\s\xa0]*Ozeasza|\.[\s\xa0]*Ozeasza|[\s\xa0]*Ozeasza)|Liv[\s\xa0]*Oze[\s\xa0]*a|hosey?|H(?:o(?:zeas|os(?:e(?:an[\s\xa0]*kirja|7a)|h(?:eeca)?)?|s(?:ho)?)?|s)|O(?:ciya|s(?:ija|e(?:ia[hs]?|a[hs]?))?|z(?:eas)?))|(?:Ho(?:osean|seas)|O(?:see|ze(?:asza)?)))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["Obad"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Pro(?:roctwo[\\s\\xa0]*Abdyaszowe|phetia[\\s\\xa0]*Abdiae)|Liv[\\s\\xa0]*Abdyas[\\s\\xa0]*la|Ks(?:ieg[ai][\\s\\xa0]*Abdiasza|\\.[\\s\\xa0]*Abdiasza|[\\s\\xa0]*Abdiasza)|obadiya|Cob(?:ad(?:yaah)?)?|A(?:vdie|b(?:d(?:diyyu|i(?:jas|as?)?)?)?)|O(?:patiya|v(?:adia|dij)|b(?:edias|idah|a(?:ja|d(?:eia|hah|i(?:ja|a(?:s['’][\\s\\xa0]*Bog|h)?)|j(?:a(?:n[\\s\\xa0]*kirja|s[\\s\\xa0]*bok)?)?)?)?|d)?))|(?:Obad(?:ias|ja[ns])|Abd(?:iasza|yas)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Hag"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Pro(?:roctwo[\\s\\xa0]*Aggieuszowe|phetia[\\s\\xa0]*Aggaei)|Ks(?:ieg[ai][\\s\\xa0]*Aggeusza|\\.[\\s\\xa0]*Aggeusza|[\\s\\xa0]*Aggeusza)|Liv[\\s\\xa0]*Aje[\\s\\xa0]*a|haggay|Ohij|Xag(?:g(?:ay)?)?|A(?:-?gai|kay|g(?:heu|ai|e(?:[jo]|us?)|g(?:a(?:eus|us)|e(?:us|[eo]))?)?)|H(?:a(?:-?gai|g(?:a[ij]|e[jo]|g(?:ia[hi]|e(?:us|o)|a(?:ai|i(?:n[\\s\\xa0]*kirja|s[\\s\\xa0]*bok)?|j(?:s[\\s\\xa0]*Bog)?)?)?)?)|gg?))|(?:Haggain|A(?:ggeusza|je)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Hab"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Pro(?:roctwo[\\s\\xa0]*Abakukowe|phetia[\\s\\xa0]*Habacuc)|Liv[\\s\\xa0]*Abakik[\\s\\xa0]*la|Ks(?:ieg[ai][\\s\\xa0]*Habakuka|\\.[\\s\\xa0]*Habakuka|[\\s\\xa0]*Habakuka)|I(?:rmbbaaqooma|mba)|A(?:pakuk|va[ck]um|b(?:a(?:cuc|k(?:ouk|uka?)?)|k))|Hab(?:ba(?:c[au]c|k(?:k[au]kk?|[au]kk?))|a(?:c(?:uque|cuc|kuk|ac)?|k(?:k(?:ook|akk?|uk(?:s[\\s\\xa0]*(?:Bog|bok)|k)?)|akk?|uk(?:i(?:n[\\s\\xa0]*kirja)?|[ku])?)?)|[ck])?|Xab(?:aquuq)?)|(?:Haba(?:kuk(?:in|a)|cuc)|habak(?:kuk|uk)|Abakik))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Mic"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Prophetia[\\s\\xa0]*Michaeae|Ks(?:ieg[ai][\\s\\xa0]*Micheasza|\\.[\\s\\xa0]*Micheasza|[\\s\\xa0]*Micheasza)|Liv[\\s\\xa0]*Miche[\\s\\xa0]*a|M(?:eeka|yhej|i(?:-?ca|ik(?:a(?:n[\\s\\xa0]*kirja|ah)?)?|lk(?:kiyaasa)?|c(?:ah?|h(?:e(?:as?|e)|a(?:eas|as|h)?)?)?|h(?:e(?:ia|j))?|k(?:ieas|e(?:yas|as?)|ha|a(?:s[\\s\\xa0]*(?:Bog|bok)|h)?)?|q(?:ue(?:ias|as))?)|q))|(?:Mi(?:ikan|kas|che(?:asza)?)|mika))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Zech"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Zech[ae]ra(?:(?:[ai]h|h))|(?:Prophetia[\\s\\xa0]*Zachariae|Jakaryah|[jC]akariya|Ks(?:ieg[ai][\\s\\xa0]*Zachariasza|\\.[\\s\\xa0]*Zachariasza|[\\s\\xa0]*Zachariasza)|Xa-?cha-?ri-?a|Z(?:e(?:c(?:h(?:[ae]ri(?:ih|ah?|h))?)?|k(?:ariah?)?)|a(?:c(?:ar(?:ias)?|c(?:aria|h(?:arie)?)?|h(?:ar(?:jas|a(?:[ai]h|h)|i(?:ih|a[hs]?|[eh]))|er(?:a(?:[ai]h|h)|i(?:ih|ah?|h)))?)?|h(?:ari(?:a|ja?))?|k(?:haria|aria(?:s['’][\\s\\xa0]*Bog|h)?|k(?:aariyaasa)?)?)?|ch?)|S(?:a(?:c(?:arias|h(?:arja)?)|k(?:ar(?:ias?|ja(?:n[\\s\\xa0]*kirja|boken|s[\\s\\xa0]*bok)?))?)|e(?:ch(?:areia)?|k(?:aryaah)?))|Liv[\\s\\xa0]*Zakari[\\s\\xa0]*a)|(?:Sakarjan|Za(?:chariasza|kari(?:as)?)|Xa(?:-?cha-?ri)?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Zeph"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Pro(?:roctwo[\\s\\xa0]*Sofoniaszowe|phetia[\\s\\xa0]*Sophoniae)|Ks(?:ieg[ai][\\s\\xa0]*Sofoniasza|\\.[\\s\\xa0]*Sofoniasza|[\\s\\xa0]*Sofoniasza)|Liv[\\s\\xa0]*Sofoni[\\s\\xa0]*an|Ceppaniya|Tef(?:ania)?|S(?:apanyah|z(?:efanias|of(?:onias)?)|e(?:p(?:anias?|h)|f(?:an(?:yaah|i(?:ja|a(?:s['’][\\s\\xa0]*Bog)?)|ja(?:n[\\s\\xa0]*kirja|s[\\s\\xa0]*bok)?)|f(?:aneia)?)?)|o(?:ph(?:oni(?:as|e))?|f(?:o(?:n(?:aasa|jas|i(?:j[ae]|as?|e)))?)?)|f)|Z(?:ofonias|a(?:phaniah?|faniah?)|e(?:f(?:an(?:ia[hs]?|[jy]a))?|p(?:anias|h(?:an(?:aiah?|ia[hs]?|ja)?)?)?)|ph?))|(?:sapanyah|S(?:efan(?:ias|jan)|ofoni(?:asza)?)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Luke"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(luka(?:[ln]e)|(?:Ungjilli[\\s\\xa0]*i[\\s\\xa0]*Lukes|Jevanhelije[\\s\\xa0]*vid[\\s\\xa0]*Luky|L(?:ooka|ik|lu(?:ka)?|u(?:k(?:ka[\\s\\xa0]*Narceyti|a(?:s(?:ovo[\\s\\xa0]*evangelium|[\\s\\xa0]*evangelium|evangeliet)|cs))|-?ca|uk(?:kaan[\\s\\xa0]*evankeliumi|os)?|c|q(?:aasa)?)|c)?|The[\\s\\xa0]*Gospel[\\s\\xa0]*(?:according[\\s\\xa0]*to[\\s\\xa0]*(?:S(?:aint[\\s\\xa0]*L(?:k|u(?:ke?)?)|t(?:\\.[\\s\\xa0]*L(?:k|u(?:ke?)?)|[\\s\\xa0]*L(?:k|u(?:ke?)?)))|L(?:k|u(?:ke?)?))|of[\\s\\xa0]*(?:S(?:aint[\\s\\xa0]*L(?:k|u(?:ke?)?)|t(?:\\.[\\s\\xa0]*L(?:k|u(?:ke?)?)|[\\s\\xa0]*L(?:k|u(?:ke?)?)))|L(?:k|u(?:ke?)?)))|Sulat[\\s\\xa0]*ni[\\s\\xa0]*San[\\s\\xa0]*Lucas|Injil(?:i[\\s\\xa0]*ya[\\s\\xa0]*Luka|[\\s\\xa0]*Lukas)|Mabuting[\\s\\xa0]*Balita[\\s\\xa0]*ayon[\\s\\xa0]*kay[\\s\\xa0]*(?:San[\\s\\xa0]*Lu[ck]as|Lu[ck]as)|E(?:banghelyo[\\s\\xa0]*(?:ayon[\\s\\xa0]*kay[\\s\\xa0]*(?:San[\\s\\xa0]*Lu[ck]as|Lu[ck]as)|ni[\\s\\xa0]*San[\\s\\xa0]*Lu[ck]as)|van(?:keliumi[\\s\\xa0]*Luukkaan[\\s\\xa0]*mukaan|jelium[\\s\\xa0]*Podla[\\s\\xa0]*Lukasa|geli(?:um[\\s\\xa0]*(?:secundum[\\s\\xa0]*Lucam|podle[\\s\\xa0]*Lukase)|e(?:[\\s\\xa0]*volgens[\\s\\xa0]*Lu[ck]as|t[\\s\\xa0]*etter[\\s\\xa0]*Lukas)))|l[\\s\\xa0]*Evangelio[\\s\\xa0]*de[\\s\\xa0]*Lucas)|Vangelo[\\s\\xa0]*di[\\s\\xa0]*(?:San[\\s\\xa0]*Luca|Luca))|(?:Evangelio[\\s\\xa0]*de[\\s\\xa0]*Lucas|Gospel[\\s\\xa0]*(?:according[\\s\\xa0]*to[\\s\\xa0]*(?:S(?:aint[\\s\\xa0]*L(?:k|u(?:ke?)?)|t(?:\\.[\\s\\xa0]*L(?:u(?:ke?)?|k)|[\\s\\xa0]*L(?:u(?:ke?)?|k)))|L(?:k|u(?:ke?)?))|of[\\s\\xa0]*(?:S(?:aint[\\s\\xa0]*L(?:k|u(?:ke?)?)|t(?:\\.[\\s\\xa0]*L(?:k|u(?:ke?)?)|[\\s\\xa0]*L(?:u(?:ke?)?|k)))|L(?:u(?:ke?)?|k)))|S(?:a(?:n[\\s\\xa0]*Lucas|int[\\s\\xa0]*L(?:u(?:ke?)?|k))|t(?:\\.[\\s\\xa0]*L(?:k|u(?:ke?)?)|[\\s\\xa0]*L(?:u(?:ke?)?|k)))|L(?:u(?:ukkaan|cas?|k(?:ka|e|a(?:sa?)?)?)?|k)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Jer"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Yirmayah|(?:Sulat[\\s\\xa0]*ni[\\s\\xa0]*Jeremias|H[ei]r(?:[ei]m(?:[iy]as))|y(?:armiyako[\\s\\xa0]*pustak|irmaya)|Yer(?:em(?:yaah|ia))?|Aklat[\\s\\xa0]*ni[\\s\\xa0]*Jeremia[hs]|J(?:e(?:r(?:a(?:iah|m(?:a(?:ih|h)|i(?:ih|ah?|ha?)))|im(?:ah|i(?:[ai]h|h))|m[im]ah|e(?:m(?:eia|jas|a(?:i(?:ah|h)|h)|i(?:ih|ja|a(?:n[\\s\\xa0]*kirja|s(?:['’][\\s\\xa0]*Bog|[\\s\\xa0]*bok))?|e|ha?))?)?)?)?|r)|Ks(?:ieg[ai][\\s\\xa0]*Jeremiasza|\\.[\\s\\xa0]*Jeremiasza|[\\s\\xa0]*Jeremiasza)|G(?:er(?:emia)?|r)|Li(?:ber[\\s\\xa0]*Ieremiae|v[\\s\\xa0]*Jeremi[\\s\\xa0]*an)|Ier(?:emias?)?|Er(?:emiya|m(?:maasa)?))|(?:yarmiyako|Jeremi(?:a(?:[nh]|s(?:za)?))?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["2Cor"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])(2(?:\.[\s\xa0]*Korinterbrevet|[\s\xa0]*Korinterbrevet)|(?:Wa(?:raka[\s\xa0]*wa[\s\xa0]*Pili[\s\xa0]*kwa[\s\xa0]*Wakorint(?:ho|o)|korintho[\s\xa0]*II)|D(?:e(?:uxieme(?:s[\s\xa0]*Corinthiens|[\s\xa0]*Corinthiens)|zyem[\s\xa0]*Kor(?:entyen|int))|ru(?:g(?:a[\s\xa0]*(?:list[\s\xa0]*do[\s\xa0]*Koryntian|Kor(?:incanima[\s\xa0]*Poslanica|ynt(?:ian|ow)))|i[\s\xa0]*(?:list[\s\xa0]*do[\s\xa0]*Koryntian|Korynt(?:ian|ow)))|h(?:e[\s\xa0]*poslannja[\s\xa0]*apostola[\s\xa0]*Pavla[\s\xa0]*do[\s\xa0]*korynfjan|a(?:[\s\xa0]*(?:kniha[\s\xa0]*Korint(?:anom|skym)|list[\s\xa0]*Korin(?:tskym|skym)|K(?:orint(?:anom|skym))?)|K)|y(?:[\s\xa0]*(?:list[\s\xa0]*Korin(?:t(?:anom|skym)|skym)|K(?:orint(?:anom|skym))?)|K))))|Barua[\s\xa0]*ya[\s\xa0]*Pili[\s\xa0]*kwa[\s\xa0]*Wakorintho|And(?:e(?:t[\s\xa0]*Korintherbrev|n[\s\xa0]*Kor(?:int(?:herbrev|erne))?)|r(?:a[\s\xa0]*Korint(?:h(?:ierbrevet|erbrevet)|ierbrevet|erbrevet)|e[\s\xa0]*(?:korinterbrev|Kor(?:int(?:ierne|er))?)))|S(?:ECOND[\s\xa0]*Sulat[\s\xa0]*sa[\s\xa0]*mga[\s\xa0]*Corint(?:io|o)|e(?:gund[ao][\s\xa0]*Corintios|cond(?:a[\s\xa0]*(?:lettera[\s\xa0]*ai[\s\xa0]*Corinzi|Corinzi)|o[\s\xa0]*Corinzi|[\s\xa0]*C(?:hor(?:anthians|i(?:nth(?:ains|i(?:ans|ns))|thians)|nthians)|o(?:r(?:anthians|ri(?:nth(?:ains|ians)|th(?:ains|ians))|n(?:i(?:nth(?:ians|a(?:ins|ns))|th(?:ians|a(?:i(?:ans|ns)|ns)))|th(?:ains|i(?:ians|ans|ns)))|i(?:inthi(?:ians|ans)|th(?:oans|a(?:ins|ns)|i(?:ians|ans|ns))|n(?:[an]thians|ith(?:i(?:ans|nas)|a(?:ins|ns))|t(?:i[ao]ns|h(?:o(?:ians|ans)|a(?:i(?:ans|ns)|ns)|i(?:ians|ons|a(?:[ai]ns|n(?:[ao]s|s)?)|n(?:as|s)))?)?)?)|th(?:ians?)?)?)?))))|I(?:ka(?:-?[\s\xa0]*2[\s\xa0]*Sulat[\s\xa0]*sa[\s\xa0]*mga[\s\xa0]*Corint(?:io|o)|[\s\xa0]*2[\s\xa0]*Sulat[\s\xa0]*sa[\s\xa0]*mga[\s\xa0]*Corint(?:io|o)|lawang[\s\xa0]*(?:Mga[\s\xa0]*Taga(?:-?[\s\xa0]*Corinto|[\s\xa0]*Corinto)|(?:[CK]orint(?:io|o))))|I(?:\.[\s\xa0]*(?:Mga[\s\xa0]*Taga(?:-?[\s\xa0]*Corinto|[\s\xa0]*Corinto)|list[\s\xa0]*(?:do[\s\xa0]*Koryntian|Korin(?:tskym|skym))|Wakorint(?:ho|o)|K(?:irje[\s\xa0]*korinttilaisille|or(?:entyen|ynt(?:ian|ow)|in(?:canima[\s\xa0]*Poslanica|t(?:t(?:olaiskirje|ilaisille)|skym|h(?:iers?|us(?:iakhoz)?|e)|i(?:ers?|o)|usi?|a(?:nom)?|os?)?))?)|C(?:hor(?:anthians|i(?:nth(?:ains|i(?:ans|ns))|thians)|nthians)|o(?:r(?:anthians|ri(?:nth(?:ains|ians)|th(?:ains|ians))|n(?:i(?:nth(?:ians|a(?:ins|ns))|th(?:ians|a(?:i(?:ans|ns)|ns)))|th(?:ains|i(?:ians|ans|ns)))|i(?:inthi(?:ians|ans)|th(?:oans|a(?:ins|ns)|i(?:ians|ans|ns))|n(?:[an]thians|ith(?:i(?:ans|nas)|a(?:ins|ns))|zi|t(?:eni|i(?:ans|e(?:ni|rs?)|o(?:ns|s)?)|h(?:o(?:ians|ans)|a(?:i(?:ans|ns)|ns)|i(?:ians|a(?:ans|i(?:ns|d)|n(?:[ao]s|s)?)|e(?:ns|rs?)|n(?:as|s)|o(?:ns|s))|e)?|o)?)?)|th(?:ians?)?)?)?))|[\s\xa0]*(?:Mga[\s\xa0]*Taga(?:-?[\s\xa0]*Corinto|[\s\xa0]*Corinto)|list[\s\xa0]*(?:do[\s\xa0]*Koryntian|Korin(?:tskym|skym))|Wakorint(?:ho|o)|K(?:irje[\s\xa0]*korinttilaisille|or(?:entyen|ynt(?:ian|ow)|in(?:canima[\s\xa0]*Poslanica|t(?:t(?:olaiskirje|ilaisille)|skym|h(?:iers?|us(?:iakhoz)?|e)|i(?:ers?|o)|usi?|a(?:nom)?|os?)?))?)|C(?:hor(?:anthians|i(?:nth(?:ains|i(?:ans|ns))|thians)|nthians)|o(?:r(?:anthians|ri(?:nth(?:ains|ians)|th(?:ains|ians))|n(?:i(?:nth(?:ians|a(?:ins|ns))|th(?:ians|a(?:i(?:ans|ns)|ns)))|th(?:ains|i(?:ians|ans|ns)))|i(?:inthi(?:ians|ans)|th(?:oans|a(?:ins|ns)|i(?:ians|ans|ns))|n(?:[an]thians|ith(?:i(?:ans|nas)|a(?:ins|ns))|zi|t(?:eni|i(?:ans|e(?:ni|rs?)|o(?:ns|s)?)|h(?:o(?:ians|ans)|a(?:i(?:ans|ns)|ns)|i(?:ians|a(?:ans|i(?:ns|d)|n(?:[ao]s|s)?)|e(?:ns|rs?)|n(?:as|s)|o(?:ns|s))|e)?|o)?)?)|th(?:ians?)?)?)?))))|P(?:a(?:vlova[\s\xa0]*druga[\s\xa0]*poslanica[\s\xa0]*Korincanima|ulus(?:'[\s\xa0]*Andet[\s\xa0]*Brev[\s\xa0]*til[\s\xa0]*Korintherne|’[\s\xa0]*(?:Andet[\s\xa0]*Brev[\s\xa0]*til[\s\xa0]*Korintherne|andre[\s\xa0]*brev[\s\xa0]*til[\s\xa0]*korinterne)))|ili[\s\xa0]*(?:Wakorint(?:ho|o)|Kor))|Zweite[\s\xa0]*Korinther|Korint(?:iyarukku[\s\xa0]*Elutiya[\s\xa0]*Irantavatu[\s\xa0]*Nirupam|os[\s\xa0]*Labaad)|Naa77antto[\s\xa0]*Qoronttoosa|Epistula[\s\xa0]*(?:II[\s\xa0]*ad[\s\xa0]*Corinthios|ad[\s\xa0]*Corinthios[\s\xa0]*II)|T(?:oinen[\s\xa0]*K(?:irje[\s\xa0]*korinttilaisille|orintt(?:olaiskirje|ilaisille))|weede[\s\xa0]*(?:Corint(?:iers?|h(?:iers?|e))|Kor(?:int(?:iers?|h(?:iers?|e)))?))|Masodik[\s\xa0]*Kor(?:int(?:hus(?:iakhoz)?|usi))?|2(?:nd(?:\.[\s\xa0]*C(?:hor(?:anthians|i(?:nth(?:ains|i(?:ans|ns))|thians)|nthians)|o(?:r(?:anthians|ri(?:nth(?:ains|ians)|th(?:ains|ians))|n(?:i(?:nth(?:ians|a(?:ins|ns))|th(?:ians|a(?:i(?:ans|ns)|ns)))|th(?:ains|i(?:ians|ans|ns)))|i(?:inthi(?:ians|ans)|th(?:oans|a(?:ins|ns)|i(?:ians|ans|ns))|n(?:[an]thians|ith(?:i(?:ans|nas)|a(?:ins|ns))|t(?:i[ao]ns|h(?:o(?:ians|ans)|a(?:i(?:ans|ns)|ns)|i(?:ians|ons|a(?:[ai]ns|n(?:[ao]s|s)?)|n(?:as|s)))?)?)?)|th(?:ians?)?)?)?)|[\s\xa0]*C(?:hor(?:anthians|i(?:nth(?:ains|i(?:ans|ns))|thians)|nthians)|o(?:r(?:anthians|ri(?:nth(?:ains|ians)|th(?:ains|ians))|n(?:i(?:nth(?:ians|a(?:ins|ns))|th(?:ians|a(?:i(?:ans|ns)|ns)))|th(?:ains|i(?:ians|ans|ns)))|i(?:inthi(?:ians|ans)|th(?:oans|a(?:ins|ns)|i(?:ians|ans|ns))|n(?:[an]thians|ith(?:i(?:ans|nas)|a(?:ins|ns))|t(?:i[ao]ns|h(?:o(?:ians|ans)|a(?:i(?:ans|ns)|ns)|i(?:ians|ons|a(?:[ai]ns|n(?:[ao]s|s)?)|n(?:as|s)))?)?)?)|th(?:ians?)?)?)?))|\.(?:o(?:\.[\s\xa0]*Corintios|[\s\xa0]*Corintios)|[\s\xa0]*(?:Mga[\s\xa0]*Taga(?:[\s\xa0]*Corinto|-?(?:[\s\xa0]*Corinto|Corinto))|list[\s\xa0]*(?:do[\s\xa0]*Koryntian|Korin(?:tskym|skym))|Taga-?Corinto|korinterbrev|Wakorint(?:ho|o)|K(?:irje[\s\xa0]*korinttilaisille|urinthiayon|or(?:entyen|ynt(?:ian|ow)|i(?:tasve|n(?:canima[\s\xa0]*Poslanica|t(?:t(?:olaiskirje|ilaisille)|skym|er(?:ne)?|h(?:ier(?:brevet|s)?|us(?:iakhoz)?|e(?:r(?:brev(?:et)?)?)?)|i(?:er(?:brevet|ne|s)?|o)|usi?|a(?:nom|sve)?|os?)?)))?)|C(?:hor(?:anthians|i(?:nth(?:ains|i(?:ans|ns))|thians)|nthians)|o(?:r(?:anthians|ri(?:nth(?:ains|ians)|th(?:ains|ians))|n(?:i(?:nth(?:ians|a(?:ins|ns))|th(?:ians|a(?:i(?:ans|ns)|ns)))|th(?:ains|i(?:ians|ans|ns)))|i(?:inthi(?:ians|ans)|th(?:oans|a(?:ins|ns)|i(?:ians|ans|ns))|n(?:[an]thians|ith(?:i(?:ans|nas)|a(?:ins|ns))|zi|t(?:eni|i(?:ans|e(?:ni|rs?)|o(?:ns|s)?)|h(?:o(?:ians|ans)|a(?:i(?:ans|ns)|ns)|i(?:ians|a(?:ans|i(?:ns|d)|n(?:[ao]s|s)?)|e(?:ns|rs?)|n(?:as|s)|o(?:ns|s))|e)?|o)?)?)|th(?:ians?)?)?)?)))|[\s\xa0]*(?:Qor|list[\s\xa0]*(?:do[\s\xa0]*Koryntian|Korin(?:tskym|skym))|k(?:\.[\s\xa0]*Korint(?:anom|skym)|[\s\xa0]*Korint(?:anom|skym)|orinterbrev)|Wakorint(?:ho|o)|C(?:hor(?:anthians|i(?:nth(?:ains|i(?:ans|ns))|thians)|nthians)|o(?:r(?:anthians|ri(?:nth(?:ains|ians)|th(?:ains|ians))|n(?:i(?:nth(?:ians|a(?:ins|ns))|th(?:ians|a(?:i(?:ans|ns)|ns)))|th(?:ains|i(?:ians|ans|ns)))|i(?:inthi(?:ians|ans)|th(?:oans|a(?:ins|ns)|i(?:ians|ans|ns))|n(?:[an]thians|zi|i(?:th(?:i(?:ans|nas)|a(?:ins|ns)))?|t(?:eni|h(?:o(?:ians|ans)|a(?:i(?:ans|ns)|ns)|i(?:ians|a(?:ans|i(?:ns|d)|n(?:[ao]s|s)?)|e(?:ns|rs?)|n(?:as|s)|o(?:ns|s))|e)?|i(?:ans|e(?:ni|rs?)|o(?:ns|s)?)?|o)?)?)|th(?:ians?)?)?)?)|K(?:irje[\s\xa0]*korinttilaisille|urinthiayon|or(?:entyen|ynt(?:ian|ow)|i(?:tasve|n(?:canima[\s\xa0]*Poslanica|t(?:t(?:olaiskirje|ilaisille)|skym|er(?:ne)?|h(?:ier(?:brevet|s)?|us(?:iakhoz)?|e(?:r(?:brev(?:et)?)?)?)|i(?:yarukku|er(?:brevet|ne|s)?|o)|usi?|a(?:nom|sve)?|os?)?)))?)|Mga[\s\xa0]*Taga(?:[\s\xa0]*Corinto|-?(?:[\s\xa0]*Corinto|Corinto))|Taga-?Corinto|(?:[ie](?:\.[\s\xa0]*Kori(?:ntasve|tasve)|[\s\xa0]*Kori(?:ntasve|tasve))))|d(?:\.[\s\xa0]*Corinthiens|e(?:\.[\s\xa0]*Corinthiens|[\s\xa0]*Corinthiens)|[\s\xa0]*Corinthiens)|(?:[oa](?:\.[\s\xa0]*Corintios|[\s\xa0]*Corintios))|[KC]or|e(?:me(?:\.[\s\xa0]*Corinthiens|[\s\xa0]*Corinthiens)|\.[\s\xa0]*(?:Corint(?:iers?|h(?:ie(?:ns|rs?)|e))|Kor(?:int(?:iers?|h(?:iers?|e)))?)|[\s\xa0]*(?:Corint(?:iers?|h(?:ie(?:ns|rs?)|e))|Kor(?:int(?:iers?|h(?:iers?|e)))?))))|(?:Druga[\s\xa0]*(?:poslanica[\s\xa0]*Korincanima|Korincanima)|ad[\s\xa0]*Corinthios[\s\xa0]*II|II(?:\.[\s\xa0]*Korincanima|[\s\xa0]*Korincanima)|2(?:\.[\s\xa0]*Korincanima|[\s\xa0]*Korincanima)|Corinthios[\s\xa0]*II))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["1Cor"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])(1(?:\.[\s\xa0]*Korinterbrevet|[\s\xa0]*Korinterbrevet)|(?:E(?:nsimmainen[\s\xa0]*K(?:irje[\s\xa0]*korinttilaisille|orintt(?:olaiskirje|ilaisille))|pistula[\s\xa0]*(?:I[\s\xa0]*ad[\s\xa0]*Corinthios|ad[\s\xa0]*Corinthios[\s\xa0]*I)|rste[\s\xa0]*Korinther|erste[\s\xa0]*(?:Corint(?:iers?|h(?:iers?|e))|Kor(?:int(?:iers?|h(?:iers?|e)))?)|lso[\s\xa0]*Kor(?:int(?:hus(?:iakhoz)?|usi))?)|F(?:orsta[\s\xa0]*Korint(?:h(?:ierbrevet|erbrevet)|ierbrevet|erbrevet)|yrra[\s\xa0]*(?:bref[\s\xa0]*Pals[\s\xa0]*til[\s\xa0]*Korin(?:tumanna)?|Korintubref)|irst[\s\xa0]*C(?:hor(?:anthians|i(?:nth(?:ains|i(?:ans|ns))|thians)|nthians)|o(?:r(?:anthians|ri(?:nth(?:ains|ians)|th(?:ains|ians))|n(?:i(?:nth(?:ians|a(?:ins|ns))|th(?:ians|a(?:i(?:ans|ns)|ns)))|th(?:ains|i(?:ians|ans|ns)))|i(?:inthi(?:ians|ans)|th(?:oans|a(?:ins|ns)|i(?:ians|ans|ns))|n(?:[an]thians|ith(?:i(?:ans|nas)|a(?:ins|ns))|t(?:i[ao]ns|h(?:o(?:ians|ans)|a(?:i(?:ans|ns)|ns)|i(?:ians|ons|a(?:[ai]ns|n(?:[ao]s|s)?)|n(?:as|s)))?)?)?)|th(?:ians?)?)?)?))|I(?:ka(?:-?[\s\xa0]*1[\s\xa0]*Sulat[\s\xa0]*sa[\s\xa0]*mga[\s\xa0]*Corint(?:io|o)|[\s\xa0]*1[\s\xa0]*Sulat[\s\xa0]*sa[\s\xa0]*mga[\s\xa0]*Corint(?:io|o))|\.[\s\xa0]*(?:Sulat[\s\xa0]*sa[\s\xa0]*mga[\s\xa0]*Corint(?:io|o)|Mga[\s\xa0]*Taga(?:-?[\s\xa0]*Corinto|[\s\xa0]*Corinto)|list[\s\xa0]*(?:do[\s\xa0]*Koryntian|Korin(?:tskym|skym))|Wakorint(?:ho|o)|K(?:irje[\s\xa0]*korinttilaisille|or(?:entyen|ynt(?:ian|ow)|in(?:canima[\s\xa0]*Poslanica|t(?:t(?:olaiskirje|ilaisille)|skym|h(?:iers?|us(?:iakhoz)?|e)|i(?:ers?|o)|usi?|a(?:nom)?|os?)?))?)|C(?:hor(?:anthians|i(?:nth(?:ains|i(?:ans|ns))|thians)|nthians)|o(?:r(?:anthians|ri(?:nth(?:ains|ians)|th(?:ains|ians))|n(?:i(?:nth(?:ians|a(?:ins|ns))|th(?:ians|a(?:i(?:ans|ns)|ns)))|th(?:ains|i(?:ians|ans|ns)))|i(?:inthi(?:ians|ans)|th(?:oans|a(?:ins|ns)|i(?:ians|ans|ns))|n(?:[an]thians|ith(?:i(?:ans|nas)|a(?:ins|ns))|zi|t(?:eni|i(?:ans|e(?:ni|rs?)|o(?:ns|s)?)|h(?:o(?:ians|ans)|a(?:i(?:ans|ns)|ns)|i(?:ians|a(?:ans|i(?:ns|d)|n(?:[ao]s|s)?)|e(?:ns|rs?)|n(?:as|s)|o(?:ns|s))|e)?|o)?)?)|th(?:ians?)?)?)?))|[\s\xa0]*(?:Sulat[\s\xa0]*sa[\s\xa0]*mga[\s\xa0]*Corint(?:io|o)|Mga[\s\xa0]*Taga(?:-?[\s\xa0]*Corinto|[\s\xa0]*Corinto)|list[\s\xa0]*(?:do[\s\xa0]*Koryntian|Korin(?:tskym|skym))|Wakorint(?:ho|o)|K(?:irje[\s\xa0]*korinttilaisille|or(?:entyen|ynt(?:ian|ow)|in(?:canima[\s\xa0]*Poslanica|t(?:t(?:olaiskirje|ilaisille)|skym|h(?:iers?|us(?:iakhoz)?|e)|i(?:ers?|o)|usi?|a(?:nom)?|os?)?))?)|C(?:hor(?:anthians|i(?:nth(?:ains|i(?:ans|ns))|thians)|nthians)|o(?:r(?:anthians|ri(?:nth(?:ains|ians)|th(?:ains|ians))|n(?:i(?:nth(?:ians|a(?:ins|ns))|th(?:ians|a(?:i(?:ans|ns)|ns)))|th(?:ains|i(?:ians|ans|ns)))|i(?:inthi(?:ians|ans)|th(?:oans|a(?:ins|ns)|i(?:ians|ans|ns))|n(?:[an]thians|ith(?:i(?:ans|nas)|a(?:ins|ns))|zi|t(?:eni|i(?:ans|e(?:ni|rs?)|o(?:ns|s)?)|h(?:o(?:ians|ans)|a(?:i(?:ans|ns)|ns)|i(?:ians|a(?:ans|i(?:ns|d)|n(?:[ao]s|s)?)|e(?:ns|rs?)|n(?:as|s)|o(?:ns|s))|e)?|o)?)?)|th(?:ians?)?)?)?)))|K(?:o(?:iro[\s\xa0]*Qoronttoosa|rint(?:iyarukku[\s\xa0]*Elutiya[\s\xa0]*Mutalavatu[\s\xa0]*Nirupam|os[\s\xa0]*Kowaad))|wanza[\s\xa0]*(?:Wakorint(?:ho|o)|Kor))|P(?:erse[\s\xa0]*poslannja[\s\xa0]*apostola[\s\xa0]*Pavla[\s\xa0]*do[\s\xa0]*korynfjan|a(?:vlova[\s\xa0]*prva[\s\xa0]*poslanica[\s\xa0]*Korincanima|ulus(?:['’][\s\xa0]*1(?:\.[\s\xa0]*Brev[\s\xa0]*til[\s\xa0]*Korintherne|[\s\xa0]*Brev[\s\xa0]*til[\s\xa0]*Korintherne)))|ierwsz(?:[aey][\s\xa0]*(?:list[\s\xa0]*do[\s\xa0]*Koryntian|Korynt(?:ian|ow)))|r(?:em(?:ier(?:e(?:s[\s\xa0]*Corinthiens|[\s\xa0]*Corinthiens)|s[\s\xa0]*Corinthiens|[\s\xa0]*Corinthiens)|ye[\s\xa0]*Kor(?:entyen|int))|im(?:e(?:ir[ao][\s\xa0]*Corintios|r(?:o[\s\xa0]*Corintios|[\s\xa0]*Corintios))|a[\s\xa0]*(?:lettera[\s\xa0]*ai[\s\xa0]*Corinzi|Corinzi)|o[\s\xa0]*Corinzi)|v(?:a[\s\xa0]*(?:kniha[\s\xa0]*Korint(?:anom|skym)|Korin(?:canima[\s\xa0]*Poslanica|t(?:anom|skym)))|y[\s\xa0]*(?:list[\s\xa0]*Korint(?:anom|skym)|Korint(?:anom|skym))|ni(?:[\s\xa0]*(?:list[\s\xa0]*Korin(?:tskym|skym)|K(?:or(?:intskym)?)?)|K))))|Una(?:ng[\s\xa0]*(?:Sulat[\s\xa0]*sa[\s\xa0]*mga[\s\xa0]*Corint(?:io|o)|Mga[\s\xa0]*Taga(?:-?[\s\xa0]*Corinto|[\s\xa0]*Corinto)|(?:[CK]orint(?:io|o)))|[\s\xa0]*(?:Sulat[\s\xa0]*sa[\s\xa0]*mga[\s\xa0]*Corint(?:io|o)|Mga[\s\xa0]*Taga(?:-?[\s\xa0]*Corinto|[\s\xa0]*Corinto)|(?:[CK]orint(?:io|o))))|Wa(?:raka[\s\xa0]*wa[\s\xa0]*Kwanza[\s\xa0]*kwa[\s\xa0]*Wakorint(?:ho|o)|korintho[\s\xa0]*I)|1(?:re(?:\.[\s\xa0]*Corinthiens|[\s\xa0]*Corinthiens)|(?:[ao](?:\.[\s\xa0]*Corintios|[\s\xa0]*Corintios))|e(?:r(?:\.[\s\xa0]*Corinthiens|e(?:\.[\s\xa0]*Corinthiens|[\s\xa0]*Corinthiens)|[\s\xa0]*Corinthiens)|\.[\s\xa0]*(?:Corint(?:iers?|h(?:iers?|e))|Kor(?:int(?:iers?|h(?:iers?|e)))?)|[\s\xa0]*(?:Corint(?:iers?|h(?:iers?|e))|Kor(?:int(?:iers?|h(?:iers?|e)))?))|st(?:\.[\s\xa0]*C(?:hor(?:anthians|i(?:nth(?:ains|i(?:ans|ns))|thians)|nthians)|o(?:r(?:anthians|ri(?:nth(?:ains|ians)|th(?:ains|ians))|n(?:i(?:nth(?:ians|a(?:ins|ns))|th(?:ians|a(?:i(?:ans|ns)|ns)))|th(?:ains|i(?:ians|ans|ns)))|i(?:inthi(?:ians|ans)|th(?:oans|a(?:ins|ns)|i(?:ians|ans|ns))|n(?:[an]thians|ith(?:i(?:ans|nas)|a(?:ins|ns))|t(?:i[ao]ns|h(?:o(?:ians|ans)|a(?:i(?:ans|ns)|ns)|i(?:ians|ons|a(?:[ai]ns|n(?:[ao]s|s)?)|n(?:as|s)))?)?)?)|th(?:ians?)?)?)?)|[\s\xa0]*C(?:hor(?:anthians|i(?:nth(?:ains|i(?:ans|ns))|thians)|nthians)|o(?:r(?:anthians|ri(?:nth(?:ains|ians)|th(?:ains|ians))|n(?:i(?:nth(?:ians|a(?:ins|ns))|th(?:ians|a(?:i(?:ans|ns)|ns)))|th(?:ains|i(?:ians|ans|ns)))|i(?:inthi(?:ians|ans)|th(?:oans|a(?:ins|ns)|i(?:ians|ans|ns))|n(?:[an]thians|ith(?:i(?:ans|nas)|a(?:ins|ns))|t(?:i[ao]ns|h(?:o(?:ians|ans)|a(?:i(?:ans|ns)|ns)|i(?:ians|ons|a(?:[ai]ns|n(?:[ao]s|s)?)|n(?:as|s)))?)?)?)|th(?:ians?)?)?)?))|\.(?:o(?:\.[\s\xa0]*Corintios|[\s\xa0]*Corintios)|[\s\xa0]*(?:Sulat[\s\xa0]*sa[\s\xa0]*mga[\s\xa0]*Corint(?:io|o)|Mga[\s\xa0]*Taga(?:[\s\xa0]*Corinto|-?(?:[\s\xa0]*Corinto|Corinto))|list[\s\xa0]*(?:do[\s\xa0]*Koryntian|Korin(?:tskym|skym))|Taga-?Corinto|korinterbrev|Wakorint(?:ho|o)|K(?:irje[\s\xa0]*korinttilaisille|urinthiayon|or(?:entyen|ynt(?:ian|ow)|i(?:tasve|n(?:canima[\s\xa0]*Poslanica|t(?:t(?:olaiskirje|ilaisille)|skym|er(?:ne)?|h(?:ier(?:brevet|s)?|us(?:iakhoz)?|e(?:r(?:brev(?:et)?)?)?)|i(?:er(?:brevet|ne|s)?|o)|usi?|a(?:nom|sve)?|os?)?)))?)|C(?:hor(?:anthians|i(?:nth(?:ains|i(?:ans|ns))|thians)|nthians)|o(?:r(?:anthians|ri(?:nth(?:ains|ians)|th(?:ains|ians))|n(?:i(?:nth(?:ians|a(?:ins|ns))|th(?:ians|a(?:i(?:ans|ns)|ns)))|th(?:ains|i(?:ians|ans|ns)))|i(?:inthi(?:ians|ans)|th(?:oans|a(?:ins|ns)|i(?:ians|ans|ns))|n(?:[an]thians|ith(?:i(?:ans|nas)|a(?:ins|ns))|zi|t(?:eni|i(?:ans|e(?:ni|rs?)|o(?:ns|s)?)|h(?:o(?:ians|ans)|a(?:i(?:ans|ns)|ns)|i(?:ians|a(?:ans|i(?:ns|d)|n(?:[ao]s|s)?)|e(?:ns|rs?)|n(?:as|s)|o(?:ns|s))|e)?|o)?)?)|th(?:ians?)?)?)?)))|[\s\xa0]*(?:Qor|list[\s\xa0]*(?:do[\s\xa0]*Koryntian|Korin(?:tskym|skym))|k(?:\.[\s\xa0]*Korint(?:anom|skym)|[\s\xa0]*Korint(?:anom|skym)|orinterbrev)|Wakorint(?:ho|o)|C(?:hor(?:anthians|i(?:nth(?:ains|i(?:ans|ns))|thians)|nthians)|o(?:r(?:anthians|ri(?:nth(?:ains|ians)|th(?:ains|ians))|n(?:i(?:nth(?:ians|a(?:ins|ns))|th(?:ians|a(?:i(?:ans|ns)|ns)))|th(?:ains|i(?:ians|ans|ns)))|i(?:inthi(?:ians|ans)|th(?:oans|a(?:ins|ns)|i(?:ians|ans|ns))|n(?:[an]thians|zi|i(?:th(?:i(?:ans|nas)|a(?:ins|ns)))?|t(?:eni|h(?:o(?:ians|ans)|a(?:i(?:ans|ns)|ns)|i(?:ians|a(?:ans|i(?:ns|d)|n(?:[ao]s|s)?)|e(?:ns|rs?)|n(?:as|s)|o(?:ns|s))|e)?|i(?:ans|e(?:ni|rs?)|o(?:ns|s)?)?|o)?)?)|th(?:ians?)?)?)?)|K(?:irje[\s\xa0]*korinttilaisille|urinthiayon|or(?:entyen|ynt(?:ian|ow)|i(?:tasve|n(?:canima[\s\xa0]*Poslanica|t(?:t(?:olaiskirje|ilaisille)|skym|er(?:ne)?|h(?:ier(?:brevet|s)?|us(?:iakhoz)?|e(?:r(?:brev(?:et)?)?)?)|i(?:yarukku|er(?:brevet|ne|s)?|o)|usi?|a(?:nom|sve)?|os?)?)))?)|Mga[\s\xa0]*Taga(?:[\s\xa0]*Corinto|-?(?:[\s\xa0]*Corinto|Corinto))|Taga-?Corinto|(?:[ie](?:\.[\s\xa0]*Kori(?:ntasve|tasve)|[\s\xa0]*Kori(?:ntasve|tasve))))|Cor)|Barua[\s\xa0]*ya[\s\xa0]*Kwanza[\s\xa0]*kwa[\s\xa0]*Wakorintho)|(?:Prva[\s\xa0]*(?:poslanica[\s\xa0]*Korincanima|Korincanima)|ad[\s\xa0]*Corinthios[\s\xa0]*I|1(?:\.[\s\xa0]*Korincanima|[\s\xa0]*(?:Sulat[\s\xa0]*sa[\s\xa0]*mga[\s\xa0]*Corint(?:io|o)|Korincanima))|I(?:\.[\s\xa0]*Korincanima|[\s\xa0]*Korincanima)|C(?:hor(?:anthians|i(?:thians|nth(?:ains|i(?:ans|ns)))|nthians)|or(?:ri(?:nth(?:ains|ians)|th(?:ains|ians))|i(?:inthi(?:ians|ans)|n(?:[na]thians|ith(?:i(?:nas|ans)|a(?:ins|ns))|t(?:i[ao]ns|h(?:o(?:ians|ans)|i(?:ians|o(?:s[\s\xa0]*I|ns)|a(?:[ai]ns|n(?:[ao]s|s)?)|n(?:as|s))|a(?:i(?:ans|ns)|ns))))|th(?:oans|i(?:ians|ans|ns)|a(?:ins|ns)))|n(?:i(?:nth(?:ians|a(?:ins|ns))|th(?:ians|a(?:i(?:ans|ns)|ns)))|th(?:ains|i(?:ians|ans|ns)))))))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["Gal"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:K(?:alattiyarukku[\\s\\xa0]*Elutiya[\\s\\xa0]*Nirupam|irje[\\s\\xa0]*galatalaisille)|B(?:re(?:f[\\s\\xa0]*Pals[\\s\\xa0]*til[\\s\\xa0]*Galatamanna|vet[\\s\\xa0]*til[\\s\\xa0]*Galaterne)|arua[\\s\\xa0]*kwa[\\s\\xa0]*Wagalatia)|Sulat[\\s\\xa0]*sa[\\s\\xa0]*mga[\\s\\xa0]*(?:taga[\\s\\xa0]*Galacia|Galacia)|P(?:oslannja[\\s\\xa0]*apostola[\\s\\xa0]*Pavla[\\s\\xa0]*do[\\s\\xa0]*halativ|a(?:vlova[\\s\\xa0]*poslanica[\\s\\xa0]*Galacanima|ulus['’][\\s\\xa0]*Brev[\\s\\xa0]*til[\\s\\xa0]*Galaterne))|galati(?:harulai[\\s\\xa0]*patra|karams[\\s\\xa0]*patra)|G(?:a(?:-?la-?ti|l(?:lati(?:[ao]ns|ns)|a(?:atiyaa|s(?:y(?:ano|en)|ia?)|t(?:i(?:i(?:[ao]ns|ns)|a(?:ans|i(?:ns|d)|n(?:[ai]s|s)?|s)|n(?:a(?:ns|s)|s)|o(?:ans|n(?:[an]s|s)|s)|y(?:on|a))|o(?:ans|ns)|e(?:n(?:brief|i)?|r(?:bre(?:fvet|vet))?|s)|ns|a(?:laiskirj|khoz|[ao]ns|i(?:[ao]ns|ns)|sve|ns)?)?)?)?)|l)|L(?:ayang[\\s\\xa0]*Paulus[\\s\\xa0]*Galatia|ettera[\\s\\xa0]*ai[\\s\\xa0]*Galati|ist[\\s\\xa0]*(?:do[\\s\\xa0]*Gala(?:cjan|tow)|Galat(?:anom|skym)))|Mga[\\s\\xa0]*Taga(?:[\\s\\xa0]*Galasya|-?(?:[\\s\\xa0]*Gala(?:cia|sya)|Galacia))|Epistula[\\s\\xa0]*ad[\\s\\xa0]*Galatas)|(?:P(?:aulus’[\\s\\xa0]*brev[\\s\\xa0]*til[\\s\\xa0]*galaterne|oslanica[\\s\\xa0]*Galacanima)|Mga[\\s\\xa0]*Taga[\\s\\xa0]*Galacia|Kalattiyarukku|galati(?:harulai|karams)|Taga(?:-?(?:[\\s\\xa0]*Galacia|Galacia)|[\\s\\xa0]*Galacia)|ad[\\s\\xa0]*Galatas|Wagalatia|Ga(?:la(?:c(?:anima|jan|ia)|t(?:skym|erne|ow|a(?:laisille|nom|s)|ia?)))?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Eph"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:L(?:ayang[\\s\\xa0]*Paulus[\\s\\xa0]*Efesus|ettera[\\s\\xa0]*agli[\\s\\xa0]*Efesini|ist[\\s\\xa0]*(?:do[\\s\\xa0]*Efezjan|Efez(?:an[ou]m|skym)))|Mga[\\s\\xa0]*Taga(?:[\\s\\xa0]*E(?:[fp]es(?:io|o))|-?(?:[\\s\\xa0]*E(?:[fp]es(?:io|o))|Efeso))|B(?:ref[\\s\\xa0]*Pals[\\s\\xa0]*til[\\s\\xa0]*Efesusmanna|arua[\\s\\xa0]*kwa[\\s\\xa0]*Waefeso)|Kirje[\\s\\xa0]*efesolaisille|Waraka[\\s\\xa0]*kwa[\\s\\xa0]*Waefeso|Iafisiyon|P(?:oslannja[\\s\\xa0]*apostola[\\s\\xa0]*Pavla[\\s\\xa0]*do[\\s\\xa0]*efesjan|a(?:vlova[\\s\\xa0]*poslanica[\\s\\xa0]*Efezanima|ulus['’][\\s\\xa0]*Brev[\\s\\xa0]*til[\\s\\xa0]*Efeserne))|Sulat[\\s\\xa0]*sa[\\s\\xa0]*mga[\\s\\xa0]*E(?:[fp]es(?:io|o))|E(?:sphesians|hp(?:[ei]sians)?|f(?:is(?:oona)?|e(?:s(?:i(?:erbrevet|aneve|os)|kym|o(?:laiskirje|s)|e(?:rbrevet|ni)?)?|z(?:iers|yen|ow|us(?:iakhoz)?)?)?|f(?:esiaid)?)?|p(?:istula[\\s\\xa0]*ad[\\s\\xa0]*Ephesios|e(?:ciyarukku[\\s\\xa0]*Elutiya[\\s\\xa0]*Nirupam|hesians|sians)|h(?:isians?|e(?:s(?:zosziakhoz|ains?|i(?:[eo]ns|a(?:id|n[ds]?))|er)?)?|s(?:ians?)?)?)?))|(?:P(?:aulus’[\\s\\xa0]*brev[\\s\\xa0]*til[\\s\\xa0]*efeserne|oslanica[\\s\\xa0]*Efezanima)|ad[\\s\\xa0]*Ephesios|Taga(?:[\\s\\xa0]*E(?:[fp]es(?:io|o))|-?(?:[\\s\\xa0]*E(?:[pf]es(?:io|o))|Efeso))|Mga[\\s\\xa0]*E(?:[fp]es(?:io|o))|Waefeso|E(?:p(?:eciyarukku|hesios)|fe(?:z(?:skym|an(?:ima|om)|jan)|s(?:erne|ini|us|o(?:laisille)?)))))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Col"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:kalass(?:aikarams[\\s\\xa0]*patra|iharulai[\\s\\xa0]*patra)|K(?:irje[\\s\\xa0]*kolossalaisille|ulussaiyon|o(?:l(?:o(?:ceyarukku[\\s\\xa0]*Elutiya[\\s\\xa0]*Nirupam|s(?:ianeve|ens(?:kym|ow)|yen|ay|s(?:alaiskirje|ze(?:beliekhez|ieknek)|e(?:iakhoz|n(?:s(?:er(?:brevet|n)|kym)|zen)|r(?:brevet)?)?))?))?)?)|Qol(?:asiyaasa)?|P(?:oslannja[\\s\\xa0]*apostola[\\s\\xa0]*Pavla[\\s\\xa0]*do[\\s\\xa0]*kolosjan|a(?:vlova[\\s\\xa0]*poslanica[\\s\\xa0]*Kolosanima|ulus(?:'[\\s\\xa0]*Brev[\\s\\xa0]*til[\\s\\xa0]*Kolossenserne|’[\\s\\xa0]*(?:Brev[\\s\\xa0]*til[\\s\\xa0]*Kolossenserne|brev[\\s\\xa0]*til[\\s\\xa0]*kolosserne))))|Mga[\\s\\xa0]*Taga(?:[\\s\\xa0]*[CK]olosas|-?(?:[\\s\\xa0]*[CK]olosas|Colosas))|Waraka[\\s\\xa0]*kwa[\\s\\xa0]*Wakolosai|C(?:al(?:l(?:asi[ao]ns|os(?:sians|i[ao]ns))|[ao]s(?:si(?:[ao]ns|i[ao]ns)))|l|o(?:l(?:l[ao]si(?:[ao]ns)|as(?:si[ao]ns|i[ao]ns)|os(?:i(?:a(?:id|ns)|ons)|en(?:ses|i)|s(?:enzen|ans|i(?:[eo]ns|a(?:id|ns?)))?)?)?)?)|B(?:ref[\\s\\xa0]*Pals[\\s\\xa0]*til[\\s\\xa0]*Kolossumanna?|arua[\\s\\xa0]*kwa[\\s\\xa0]*Wakolosai)|Epistula[\\s\\xa0]*ad[\\s\\xa0]*Colossenses|L(?:ayang[\\s\\xa0]*Paulus[\\s\\xa0]*Kolose|ettera[\\s\\xa0]*ai[\\s\\xa0]*Colossesi|ist[\\s\\xa0]*(?:do[\\s\\xa0]*Kolosan|Kolos(?:an[ou]m|kym)))|Sulat[\\s\\xa0]*sa[\\s\\xa0]*mga[\\s\\xa0]*(?:[CK]olo(?:nsense|sense)))|Cal[ao]si(?:[ao]ns)|(?:Poslanica[\\s\\xa0]*Kolosanima|ad[\\s\\xa0]*Colossenses|kalass(?:iharulai|aikarams)|Mga[\\s\\xa0]*(?:[CK]olo(?:nsense|sense))|Taga(?:[\\s\\xa0]*Colosas|-?(?:[\\s\\xa0]*Colosas|Colosas))|Wakolosai|Colos(?:se(?:nses|si)|as)|Kolo(?:ceyarukku|s(?:s(?:alaisille|e(?:nserne|rne))|kym|an(?:ima|[ou]m)?|e))))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["2Tim"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])((?:I(?:kalawang[\s\xa0]*(?:Kay[\s\xa0]*Timoteo|Timoteo)|I(?:\.[\s\xa0]*(?:List[\s\xa0]*do[\s\xa0]*Tymoteusza|list[\s\xa0]*Tim[eo]teovi|K(?:irje[\s\xa0]*Timoteukselle|ay[\s\xa0]*Timoteo)|T(?:ymoteusza|himot(?:hy|y)|omothy|i(?:m(?:ot(?:ius|e(?:j(?:u[\s\xa0]*Poslanica|ovi)|yos|u(?:kselle|s(?:kirje|hoz|nak)?)|i|o(?:vi)?)?|h(?:e(?:u[ms]|e|o(?:sz)?)|y)?|y))?)?|m))|[\s\xa0]*(?:List[\s\xa0]*do[\s\xa0]*Tymoteusza|list[\s\xa0]*Tim[eo]teovi|K(?:irje[\s\xa0]*Timoteukselle|ay[\s\xa0]*Timoteo)|T(?:ymoteusza|himot(?:hy|y)|omothy|i(?:m(?:ot(?:ius|e(?:j(?:u[\s\xa0]*Poslanica|ovi)|yos|u(?:kselle|s(?:kirje|hoz|nak)?)|i|o(?:vi)?)?|h(?:e(?:u[ms]|e|o(?:sz)?)|y)?|y))?)?|m))))|T(?:oinen[\s\xa0]*(?:Kirje[\s\xa0]*Timoteukselle|Timoteu(?:kselle|skirje))|imot(?:teyuvukku[\s\xa0]*Elutiya[\s\xa0]*Irantavatu[\s\xa0]*Nirupam|eyos[\s\xa0]*Labaad|heo[\s\xa0]*II)|weede[\s\xa0]*Tim(?:ot(?:heus|eus))?)|P(?:a(?:vlova[\s\xa0]*druga[\s\xa0]*poslanica[\s\xa0]*Timoteju|ulus(?:'[\s\xa0]*Andet[\s\xa0]*Brev[\s\xa0]*til[\s\xa0]*Timotheus|’[\s\xa0]*(?:Andet[\s\xa0]*Brev[\s\xa0]*til[\s\xa0]*Timotheus|andre[\s\xa0]*brev[\s\xa0]*til[\s\xa0]*Timoteus)))|ili[\s\xa0]*Tim(?:otheo)?)|2(?:d(?:\.[\s\xa0]*Timothee|e(?:\.[\s\xa0]*Timothee|[\s\xa0]*Timothee)|[\s\xa0]*Timothee)|(?:[ao](?:\.[\s\xa0]*Timoteo|[\s\xa0]*Timoteo))|e(?:me(?:\.[\s\xa0]*Timothee|[\s\xa0]*Timothee)|\.[\s\xa0]*Tim(?:ot(?:eus|he(?:us|e)))?|[\s\xa0]*Tim(?:ot(?:eus|he(?:us|e)))?)|nd(?:\.[\s\xa0]*T(?:himot(?:hy|y)|omothy|i(?:m(?:ot(?:hy?|y))?)?|m)|[\s\xa0]*T(?:himot(?:hy|y)|omothy|i(?:m(?:ot(?:hy?|y))?)?|m))|\.(?:o(?:\.[\s\xa0]*Timoteo|[\s\xa0]*Timoteo)|[\s\xa0]*(?:List[\s\xa0]*do[\s\xa0]*Tymoteusza|list[\s\xa0]*Tim[eo]teovi|K(?:irje[\s\xa0]*Timoteukselle|a(?:ng[\s\xa0]*Timoteo|y[\s\xa0]*Timoteo))|T(?:eemuathaiyus|ymoteusza|himot(?:hy|y)|omothy|i(?:m(?:ot(?:ius|e(?:j(?:u[\s\xa0]*Poslanica|ovi)|yos|u(?:kselle|s(?:kirje|brev(?:et)?|hoz|nak)?|t)|i|o(?:vi)?)?|h(?:e(?:u(?:m|s(?:brev)?)|e|o(?:s(?:brevet|z))?)|y)?|y))?)?|m)))|[\s\xa0]*(?:List[\s\xa0]*do[\s\xa0]*Tymoteusza|list[\s\xa0]*Tim[eo]teovi|K(?:irje[\s\xa0]*Timoteukselle|a(?:ng[\s\xa0]*Timoteo|y[\s\xa0]*Timoteo))|k(?:\.[\s\xa0]*Timote(?:jovi|ovi)|[\s\xa0]*Timote(?:jovi|ovi))|(?:[ei](?:\.[\s\xa0]*Timoteut|[\s\xa0]*Timoteut))|Xim|T(?:eemuathaiyus|himot(?:hy|y)|omothy|ym(?:oteusza)?|i(?:m(?:ot(?:teyuvukku|ius|e(?:j(?:u[\s\xa0]*Poslanica|ovi)|yos|u(?:kselle|s(?:kirje|brev(?:et)?|hoz|nak)?|t)|i|o(?:vi)?)?|h(?:e(?:u(?:m|s(?:brev)?)|e|o(?:s(?:brevet|z))?)|y)?|y))?)?|m))|Tim)|Masodik[\s\xa0]*Tim(?:ot(?:heosz|eus(?:hoz|nak)?))?|Zweite[\s\xa0]*Timotheus|Epistula[\s\xa0]*(?:II[\s\xa0]*ad[\s\xa0]*Timotheum|ad[\s\xa0]*Timotheum[\s\xa0]*II)|Naa77antto[\s\xa0]*Ximootiyoosa|D(?:e(?:uxieme(?:s[\s\xa0]*Timothee|[\s\xa0]*Timothee)|zyem[\s\xa0]*Timote)|ru(?:g(?:a[\s\xa0]*(?:List[\s\xa0]*do[\s\xa0]*Tymoteusza|T(?:imoteju[\s\xa0]*Poslanica|ymoteusza))|i[\s\xa0]*(?:List[\s\xa0]*do[\s\xa0]*Tymoteusza|Tymoteusza))|h(?:e[\s\xa0]*poslannja[\s\xa0]*apostola[\s\xa0]*Pavla[\s\xa0]*do[\s\xa0]*Tymofija|a[\s\xa0]*(?:kniha[\s\xa0]*Timote(?:jovi|ovi)|list[\s\xa0]*Tim[eo]teovi|T(?:im(?:ote(?:jovi|ovi|us))?|m))|y[\s\xa0]*(?:list[\s\xa0]*Tim(?:eteovi|ote(?:jovi|ovi))|T(?:im(?:ote(?:jovi|ovi|us))?|m)))))|Se(?:gund[ao][\s\xa0]*Timoteo|cond(?:a[\s\xa0]*(?:lettera[\s\xa0]*a[\s\xa0]*Timoteo|Timoteo)|o[\s\xa0]*Timoteo|[\s\xa0]*T(?:himot(?:hy|y)|omothy|i(?:m(?:ot(?:hy?|y))?)?|m)))|Barua[\s\xa0]*ya[\s\xa0]*Pili[\s\xa0]*kwa[\s\xa0]*Timotheo|Waraka[\s\xa0]*wa[\s\xa0]*Pili[\s\xa0]*kwa[\s\xa0]*Timotheo|And(?:e(?:t[\s\xa0]*Timotheusbrev|n[\s\xa0]*Tim(?:ot(?:heusbrev|eus))?)|r(?:a[\s\xa0]*Timot(?:heosbrevet|eusbrevet)|e[\s\xa0]*Tim(?:oteus(?:brev)?)?)))|(?:ad[\s\xa0]*Timotheum[\s\xa0]*II|Druga[\s\xa0]*(?:poslanica[\s\xa0]*Timoteju|Timoteju)|Timotheum[\s\xa0]*II|II(?:\.[\s\xa0]*Timoteju|[\s\xa0]*Timoteju)|2(?:\.[\s\xa0]*Timoteju|[\s\xa0]*Timoteju)))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["1Tim"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])((?:E(?:nsimmainen[\s\xa0]*(?:Kirje[\s\xa0]*Timoteukselle|Timoteu(?:kselle|skirje))|pistula[\s\xa0]*(?:I[\s\xa0]*ad[\s\xa0]*Timotheum|ad[\s\xa0]*Timotheum[\s\xa0]*I)|rste[\s\xa0]*Timotheus|erste[\s\xa0]*Tim(?:ot(?:heus|eus))?|lso[\s\xa0]*Tim(?:ot(?:heosz|eus(?:hoz|nak)?))?)|P(?:erse[\s\xa0]*poslannja[\s\xa0]*apostola[\s\xa0]*Pavla[\s\xa0]*do[\s\xa0]*Tymofija|a(?:vlova[\s\xa0]*prva[\s\xa0]*poslanica[\s\xa0]*Timoteju|ulus(?:['’][\s\xa0]*1(?:\.[\s\xa0]*Brev[\s\xa0]*til[\s\xa0]*Timotheus|[\s\xa0]*Brev[\s\xa0]*til[\s\xa0]*Timotheus)))|ierwsz(?:[aey][\s\xa0]*(?:List[\s\xa0]*do[\s\xa0]*Tymoteusza|Tym(?:oteusza)?))|r(?:em(?:ier(?:e(?:s[\s\xa0]*Timothee|[\s\xa0]*Timothee)|s[\s\xa0]*Timothee|[\s\xa0]*Timothee)|ye[\s\xa0]*Timote)|im(?:e(?:ir[ao][\s\xa0]*Timoteo|r(?:o[\s\xa0]*Timoteo|[\s\xa0]*Timoteo))|a[\s\xa0]*(?:lettera[\s\xa0]*a[\s\xa0]*Timoteo|Timoteo)|o[\s\xa0]*Timoteo)|v(?:a[\s\xa0]*(?:kniha[\s\xa0]*Timote(?:jovi|ovi)|Timote(?:j(?:u[\s\xa0]*Poslanica|ovi)|ovi))|y[\s\xa0]*(?:list[\s\xa0]*Timote(?:jovi|ovi)|Timote(?:jovi|ovi))|ni[\s\xa0]*(?:list[\s\xa0]*Tim[eo]teovi|T(?:im(?:ote(?:ovi|us))?|m)))))|Timot(?:teyuvukku[\s\xa0]*Elutiya[\s\xa0]*Mutalavatu[\s\xa0]*Nirupam|eyos[\s\xa0]*Kowaad|heo[\s\xa0]*I)|Una(?:ng[\s\xa0]*(?:Kay[\s\xa0]*Timoteo|Timoteo)|[\s\xa0]*(?:Kay[\s\xa0]*Timoteo|Timoteo))|K(?:oiro[\s\xa0]*Ximootiyoosa|wanza[\s\xa0]*Tim(?:otheo)?)|Barua[\s\xa0]*ya[\s\xa0]*Kwanza[\s\xa0]*kwa[\s\xa0]*Timotheo|1(?:re(?:\.[\s\xa0]*Timothee|[\s\xa0]*Timothee)|(?:[ao](?:\.[\s\xa0]*Timoteo|[\s\xa0]*Timoteo))|e(?:r(?:\.[\s\xa0]*Timothee|e(?:\.[\s\xa0]*Timothee|[\s\xa0]*Timothee)|[\s\xa0]*Timothee)|\.[\s\xa0]*Tim(?:ot(?:heus|eus))?|[\s\xa0]*Tim(?:ot(?:heus|eus))?)|st(?:\.[\s\xa0]*T(?:himot(?:hy|y)|omothy|i(?:m(?:ot(?:hy?|y))?)?|m)|[\s\xa0]*T(?:himot(?:hy|y)|omothy|i(?:m(?:ot(?:hy?|y))?)?|m))|\.(?:o(?:\.[\s\xa0]*Timoteo|[\s\xa0]*Timoteo)|[\s\xa0]*(?:List[\s\xa0]*do[\s\xa0]*Tymoteusza|list[\s\xa0]*Tim[eo]teovi|K(?:irje[\s\xa0]*Timoteukselle|a(?:ng[\s\xa0]*Timoteo|y[\s\xa0]*Timoteo))|T(?:eemuathaiyus|himot(?:hy|y)|omothy|ym(?:oteusza)?|i(?:m(?:ot(?:ius|e(?:j(?:u[\s\xa0]*Poslanica|ovi)|yos|u(?:kselle|s(?:kirje|brev(?:et)?|hoz|nak)?|t)|i|o(?:vi)?)?|h(?:e(?:u(?:m|s(?:brev)?)|e|o(?:s(?:brevet|z))?)|y)?|y))?)?|m)))|[\s\xa0]*(?:List[\s\xa0]*do[\s\xa0]*Tymoteusza|list[\s\xa0]*Tim[eo]teovi|K(?:irje[\s\xa0]*Timoteukselle|a(?:ng[\s\xa0]*Timoteo|y[\s\xa0]*Timoteo))|k(?:\.[\s\xa0]*Timote(?:jovi|ovi)|[\s\xa0]*Timote(?:jovi|ovi))|(?:[ei](?:\.[\s\xa0]*Timoteut|[\s\xa0]*Timoteut))|Xim|T(?:eemuathaiyus|himot(?:hy|y)|omothy|ym(?:oteusza)?|i(?:m(?:ot(?:teyuvukku|ius|e(?:j(?:u[\s\xa0]*Poslanica|ovi)|yos|u(?:kselle|s(?:kirje|brev(?:et)?|hoz|nak)?|t)|i|o(?:vi)?)?|h(?:e(?:u(?:m|s(?:brev)?)|e|o(?:s(?:brevet|z))?)|y)?|y))?)?|m))|Tim)|Waraka[\s\xa0]*wa[\s\xa0]*Kwanza[\s\xa0]*kwa[\s\xa0]*Timotheo|I(?:\.[\s\xa0]*(?:List[\s\xa0]*do[\s\xa0]*Tymoteusza|list[\s\xa0]*Tim[eo]teovi|K(?:irje[\s\xa0]*Timoteukselle|ay[\s\xa0]*Timoteo)|T(?:himot(?:hy|y)|omothy|ym(?:oteusza)?|i(?:m(?:ot(?:ius|e(?:j(?:u[\s\xa0]*Poslanica|ovi)|yos|u(?:kselle|s(?:kirje|hoz|nak)?)|i|o(?:vi)?)?|h(?:e(?:u[ms]|e|o(?:sz)?)|y)?|y))?)?|m))|[\s\xa0]*(?:List[\s\xa0]*do[\s\xa0]*Tymoteusza|list[\s\xa0]*Tim[eo]teovi|K(?:irje[\s\xa0]*Timoteukselle|ay[\s\xa0]*Timoteo)|T(?:himot(?:hy|y)|omothy|ym(?:oteusza)?|i(?:m(?:ot(?:ius|e(?:j(?:u[\s\xa0]*Poslanica|ovi)|yos|u(?:kselle|s(?:kirje|hoz|nak)?)|i|o(?:vi)?)?|h(?:e(?:u[ms]|e|o(?:sz)?)|y)?|y))?)?|m)))|F(?:orsta[\s\xa0]*Timot(?:heosbrevet|eusbrevet)|yrra[\s\xa0]*(?:bref[\s\xa0]*Pals[\s\xa0]*til[\s\xa0]*Timot(?:eusar)?|Timoteusarbref)|irst[\s\xa0]*T(?:himot(?:hy|y)|omothy|i(?:m(?:ot(?:hy?|y))?)?|m)))|(?:ad[\s\xa0]*Timotheum[\s\xa0]*I|Prva[\s\xa0]*(?:poslanica[\s\xa0]*Timoteju|Timoteju)|(?:[I1](?:\.[\s\xa0]*Timoteju|[\s\xa0]*Timoteju))|Timoth(?:eum[\s\xa0]*I|y)?))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["Deut"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])((?:F(?:immta[\s\xa0]*(?:bok[\s\xa0]*Mose|Mosebok)|unfte[\s\xa0]*(?:Buch[\s\xa0]*Mose|Mose)|emte[\s\xa0]*Mos(?:ebo(?:g|k(?:en)?))?)|anuwad|P(?:o(?:vtorennja[\s\xa0]*Zakonu|novljeni[\s\xa0]*zakon)|a(?:ngandharing[\s\xa0]*Toret|ta[\s\xa0]*(?:kniha[\s\xa0]*Mojzisova|Mojzisova))|iata[\s\xa0]*(?:kniha[\s\xa0]*Mojzisova|Ks(?:ieg[ai][\s\xa0]*Mojzeszowa|\.[\s\xa0]*Mojzeszowa|[\s\xa0]*Mojzeszowa)|Mojz(?:eszowa|isova)?)|nz|wt)|Li(?:ber[\s\xa0]*Deuteronomii|gji[\s\xa0]*i[\s\xa0]*Perterire|P)|V(?:yavasthaavivaran|i(?:ides[\s\xa0]*Mooseksen[\s\xa0]*kirja|jfde[\s\xa0]*Mozes)|\.[\s\xa0]*(?:kniha[\s\xa0]*Mojzisova|Ks(?:ieg[ai][\s\xa0]*Mojzeszowa|\.[\s\xa0]*Mojzeszowa|[\s\xa0]*Mojzeszowa)|Mo(?:oseksen[\s\xa0]*kirja|zes|jz(?:eszowa|isova)?|s(?:ebok)?))|[\s\xa0]*(?:kniha[\s\xa0]*Mojzisova|Ks(?:ieg[ai][\s\xa0]*Mojzeszowa|\.[\s\xa0]*Mojzeszowa|[\s\xa0]*Mojzeszowa)|Mo(?:oseksen[\s\xa0]*kirja|zes|j(?:z(?:eszowa|isova)?)?|s(?:ebok)?)))|Andharaning[\s\xa0]*Toret|K(?:itabu[\s\xa0]*cha[\s\xa0]*Tano[\s\xa0]*cha[\s\xa0]*Musa|s(?:ieg(?:[ai][\s\xa0]*Powt(?:orzonego[\s\xa0]*Prawa|[\s\xa0]*Prawa))|\.[\s\xa0]*Powt(?:orzonego[\s\xa0]*Prawa|[\s\xa0]*Prawa)|[\s\xa0]*Powt(?:orzonego[\s\xa0]*Prawa|[\s\xa0]*Prawa))|um(?:b(?:ukumbu[\s\xa0]*la[\s\xa0]*(?:Sheria|Torati))?)?)|D(?:iyuteronomyo|yuteronomyo|u(?:ut(?:(?:[eo]ron(?:omy|my))|ron(?:omy|my))|et(?:eron(?:om(?:io|y)|my)|oron(?:omy|my)|ron(?:omy|my))?)|e(?:zyem[\s\xa0]*liv[\s\xa0]*Lalwa[\s\xa0]*a|yuteronomyo|et(?:(?:[eo]ron(?:omy|my))|ron(?:omy|my))|wariem|t(?:e[rw]onom)?|u(?:t(?:eron(?:m(?:io|y)|om(?:ul|[ae]|i(?:um|y[ao]|[ao])?|ya?)?)|oron(?:om(?:io|y)|m(?:io|y))|ron(?:om(?:io|y)|m(?:io|y)))?)?)?|tn?)|Sharci(?:ga[\s\xa0]*Kunoqoshadiisa)?|M(?:asodik[\s\xa0]*torvenykonyv|ozes[\s\xa0]*(?:otodik[\s\xa0]*konyve|V)|Torv)|Upakamam|5(?:\.[\s\xa0]*(?:kniha[\s\xa0]*Mojzisova|Ks(?:ieg[ai][\s\xa0]*Mojzeszowa|\.[\s\xa0]*Mojzeszowa|[\s\xa0]*Mojzeszowa)|Buch[\s\xa0]*Mose|Mo(?:oseksen[\s\xa0]*kirja|zes|jz(?:eszowa|isova)?|s(?:e(?:bo(?:g|k(?:en)?))?)?)?)|[\s\xa0]*(?:Ks(?:ieg[ai][\s\xa0]*Mojzeszowa|\.[\s\xa0]*Mojzeszowa|[\s\xa0]*Mojzeszowa)|k(?:niha[\s\xa0]*Mojzisova|\.[\s\xa0]*Mojzisova|[\s\xa0]*Mojzisova)|Buch[\s\xa0]*Mose|M(?:o(?:os(?:eksen[\s\xa0]*kirja)?|j(?:z(?:eszowa|isova)?)?|s(?:e(?:bo(?:g|k(?:en)?))?)?|z(?:es)?)?|z)?))|Za(?:arettido[\s\xa0]*Wogaa|rW))|(?:V(?:iides[\s\xa0]*Mooseksen|\.[\s\xa0]*Mooseksen|[\s\xa0]*Mooseksen)|5(?:\.[\s\xa0]*Mooseksen|[\s\xa0]*Mooseksen)|Kumbukumbu))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["Titus"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:P(?:oslannja[\\s\\xa0]*apostola[\\s\\xa0]*Pavla[\\s\\xa0]*do[\\s\\xa0]*Tyta|a(?:ulus['’][\\s\\xa0]*Brev[\\s\\xa0]*til[\\s\\xa0]*Titus|vlova[\\s\\xa0]*poslanica[\\s\\xa0]*Titu))|Epistula[\\s\\xa0]*ad[\\s\\xa0]*Titum|Waraka[\\s\\xa0]*kwa[\\s\\xa0]*Tito|B(?:re(?:f[\\s\\xa0]*Pals[\\s\\xa0]*til[\\s\\xa0]*Titusar|vet[\\s\\xa0]*til(?:l[\\s\\xa0]*Titus|[\\s\\xa0]*Titus))|arua[\\s\\xa0]*kwa[\\s\\xa0]*Tito)|tita(?:slai[\\s\\xa0]*patra|la[\\s\\xa0]*patra)|L(?:ettera[\\s\\xa0]*a[\\s\\xa0]*Tito|ist[\\s\\xa0]*(?:do[\\s\\xa0]*Tytusa|Titovi))|K(?:irje[\\s\\xa0]*Titukselle|a(?:ng[\\s\\xa0]*Tito|y[\\s\\xa0]*Tito))|T(?:eetus|yt|i(?:it(?:os|u)?|t(?:tuvukku[\\s\\xa0]*Elutiya[\\s\\xa0]*Nirupam|us(?:arbref|brevet|hoz|z(?:hoz)?)|e|it?)?)?|t))|(?:P(?:aulus’[\\s\\xa0]*brev[\\s\\xa0]*til[\\s\\xa0]*Titus|oslanica[\\s\\xa0]*Titu)|ad[\\s\\xa0]*Titum|tita(?:slai|la)|T(?:ytusa|it(?:tuvukku|o(?:vi)?|u(?:kselle|[sm])?))))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Heb"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Z(?:sid(?:ok(?:hoz[\\s\\xa0]*irt[\\s\\xa0]*level)?)?|id(?:om)?|yd|d)|Ibra(?:a(?:aniyon|we))?|B(?:revet[\\s\\xa0]*til[\\s\\xa0]*hebreerne|arua[\\s\\xa0]*kwa[\\s\\xa0]*Waebrania)|Mga[\\s\\xa0]*(?:Hebr(?:ohanon|eo)|Ebreo)|E(?:pi(?:reyarukku[\\s\\xa0]*Elutiya[\\s\\xa0]*Nirupam|stula[\\s\\xa0]*ad[\\s\\xa0]*Hebraeos)|vr(?:ei)?|b(?:re?)?)|hibruharuko[\\s\\xa0]*nimti[\\s\\xa0]*patra|H(?:w(?:(?:[ew]brew(?:ws|s))|brew(?:ws|s))|br(?:ew(?:ws|s))?|e(?:(?:[ew]brew(?:ws|s))|pr(?:ealaiskirje)?|b(?:w(?:ers|res)|e(?:w[erw]s|[eo](?:(?:[eor]s|s))|r(?:[\\s\\xa0]*level|[eorw]s|s)|s)|o(?:[eor](?:(?:[eor]s|s))|s)|r(?:ae(?:er|r)|e(?:njve|aid|e(?:rbrevet|en|s)|o(?:hanon|s)|rs|u[sx]|s|w(?:ws|s)?)|o(?:[eor]s|s)|r(?:[eorw]s|s)|w(?:es|s)|s)?)?)?)|L(?:ettera[\\s\\xa0]*agli[\\s\\xa0]*Ebrei|ayang[\\s\\xa0]*Ibrani|ist[\\s\\xa0]*(?:Hebrej[ou]m|do[\\s\\xa0]*(?:Hebrajczykow|Zydow)|Zidum))|P(?:avlova[\\s\\xa0]*poslanica[\\s\\xa0]*Hebrejima|oslannja[\\s\\xa0]*do[\\s\\xa0]*jevreiv)|ibri[\\s\\xa0]*lokams[\\s\\xa0]*patra|Cib(?:raaniyada)?|Waraka[\\s\\xa0]*kwa[\\s\\xa0]*Waebrania|Kirje[\\s\\xa0]*he[bp]realaisille)|(?:Z(?:sidokhoz|ydow|idum)|Ibrani|hibruharuko[\\s\\xa0]*nimti|E(?:pireyarukku|brei)|ad[\\s\\xa0]*Hebraeos|ibri[\\s\\xa0]*lokams|Waebrania|Poslanica[\\s\\xa0]*Hebrejima|He(?:prealaisille|br(?:a(?:jczykow|eos)|e(?:erne|j(?:ima|[ou]m)|o)))))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Phil"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Sulat[\\s\\xa0]*sa[\\s\\xa0]*mga[\\s\\xa0]*(?:Filipense|Pilip(?:ense|yano))|L(?:ayang[\\s\\xa0]*Paulus[\\s\\xa0]*Filipi|ettera[\\s\\xa0]*ai[\\s\\xa0]*Filippesi|ist[\\s\\xa0]*(?:do[\\s\\xa0]*Filipian|Filip(?:anom|skym)))|Mga[\\s\\xa0]*Taga(?:[\\s\\xa0]*[FP]ilipos|-?(?:[\\s\\xa0]*[FP]ilipos|Filipos))|Epistula[\\s\\xa0]*ad[\\s\\xa0]*Philippenses|Kirje[\\s\\xa0]*filippilaisille|F(?:ili(?:boy|p(?:ianeve|en(?:s(?:kym|es|ow)|i)|yen|p(?:aiyon|e(?:rbrevet|n(?:serne|zen))|i(?:laiskirje|ekhez)?))?)?|l(?:ippiekhez|p)?|p)|B(?:ref[\\s\\xa0]*Pals[\\s\\xa0]*til[\\s\\xa0]*Filippimanna?|arua[\\s\\xa0]*kwa[\\s\\xa0]*Wafilipi)|P(?:oslannja[\\s\\xa0]*apostola[\\s\\xa0]*Pavla[\\s\\xa0]*do[\\s\\xa0]*fylyp['’]jan|a(?:vlova[\\s\\xa0]*poslanica[\\s\\xa0]*Filipljanima|ulus['’][\\s\\xa0]*Brev[\\s\\xa0]*til[\\s\\xa0]*Filipperne)|il(?:ip(?:piyarukku[\\s\\xa0]*Elutiya[\\s\\xa0]*Nirupam|hphisiyuusa)|p)|h(?:l(?:ip(?:ians|p(?:ians)?)?|pp?)|i(?:l(?:l(?:l(?:ip(?:pians|i(?:ians|ans?))|p(?:pians|ians))|p(?:pians?|ans|i(?:ens|ans?))|i(?:p(?:p(?:pians|a(?:ins|ns)|eans?|i(?:[ei]ans|a(?:ins|ns?)|ns))|eans?|i(?:ians|e(?:ans|ns)|a(?:[ai]ns|ns?)|ns)|a(?:i(?:ans|ns?)|ns?))?)?)|i(?:p(?:e(?:ans|ns)|i(?:ians|ens|a(?:id|ns?)|ns)|a(?:i(?:ans|ns?)|ns?)|p(?:pians?|a(?:i(?:ans|ns)|ns?)|e(?:ans?|r)|i(?:beliekhez|ians|ens|a(?:[ai]ns|ns?)|ns?))?)?)?|p(?:eans|i(?:ans?|ns)|a(?:ins|n)|p(?:pians|i(?:ians|ans?))?)?)?)?|p))|Waraka[\\s\\xa0]*kwa[\\s\\xa0]*Wafilipi)|(?:ad[\\s\\xa0]*Philippenses|Mga[\\s\\xa0]*(?:Filipense|Pilip(?:ense|yano))|Taga(?:-?(?:[\\s\\xa0]*[FP]ilipos|Filipos)|[\\s\\xa0]*[FP]ilipos)|P(?:aulus’[\\s\\xa0]*brev[\\s\\xa0]*til[\\s\\xa0]*filipperne|oslanica[\\s\\xa0]*Filipljanima|ilippiyarukku|hilippenses)|Wafilipi|Filip(?:ljanima|anom|skym|p(?:ilaisille|e(?:rne|si))|os|i(?:an)?)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Dan"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Prophetia[\\s\\xa0]*Danielis|daniyalko[\\s\\xa0]*pustak|Liv[\\s\\xa0]*Danyel[\\s\\xa0]*la|Ks(?:ieg[ai][\\s\\xa0]*Daniela|\\.[\\s\\xa0]*Daniela|[\\s\\xa0]*Daniela)|Taniyel|D(?:haniel|a(?:an(?:iyyel|eela|yeel)?|n(?:i(?:al|el(?:s[\\s\\xa0]*(?:Bog|bok)|e|i(?:n[\\s\\xa0]*kirja)?)?)|yil|e)?)?|[ln]))|Daniel(?:in|a)|(?:dani(?:yalko|el)|Danyel))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Jude"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:L(?:ettera[\\s\\xa0]*di[\\s\\xa0]*Giuda|ayang[\\s\\xa0]*Yudas|ist[\\s\\xa0]*(?:sw(?:\\.[\\s\\xa0]*Judy|[\\s\\xa0]*Judy)|Jud(?:uv|y)))|Y(?:ahooda|ihu(?:daa)?|u(?:ta[\\s\\xa0]*Elutiya[\\s\\xa0]*Nirupam|ud(?:as)?|d))|San[\\s\\xa0]*Judas|Gd|Barua[\\s\\xa0]*ya[\\s\\xa0]*Yuda|Poslan(?:ica[\\s\\xa0]*Jude[\\s\\xa0]*apostola|nja[\\s\\xa0]*apostola[\\s\\xa0]*Judy)|yahuda(?:cem[\\s\\xa0]*patra|ko[\\s\\xa0]*patra)|Hudas|J(?:u(?:d(?:ina[\\s\\xa0]*poslanica|ov(?:[\\s\\xa0]*List|a)|a(?:s(?:['’][\\s\\xa0]*Brev|arbref|brevet|[\\s\\xa0]*(?:epistel|brev)))?)|ud(?:aksen[\\s\\xa0]*kirje)?)|d(?:as|e)|id|wd(?:as)?)|Epistula[\\s\\xa0]*Iudae|Iuda)|(?:yahuda(?:cem|ko)|Giuda|Iudae|Ju(?:udaksen|d(?:ina|as(?:’[\\s\\xa0]*brev)?|ov|[ye]))|Yu(?:das?|ta)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["2Macc"],
        apocrypha: true,
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])((?:I(?:kalawang[\s\xa0]*M(?:ga[\s\xa0]*Macabeo|acabeos?)|I(?:\.[\s\xa0]*(?:makkabilaiskirja|Ks(?:ieg[ai][\s\xa0]*Machabejska|\.[\s\xa0]*Machabejska|[\s\xa0]*Machabejska)|Wamakabayo|M(?:ga[\s\xa0]*Macabeo|a(?:c(?:hab(?:aeorum|ejcov)|ab(?:aeorum|b(?:be(?:e[es]?|s)?|e(?:e(?:[eo]s?|s)?|os?|s)?)|e(?:aid|us|e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be[es]?|e(?:e(?:[es]|os?)?|os?|s)?)|e(?:e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?)?|k(?:abe(?:j(?:cov|ska))?|k(?:abe(?:usok|een))?)?)))|[\s\xa0]*(?:makkabilaiskirja|Ks(?:ieg[ai][\s\xa0]*Machabejska|\.[\s\xa0]*Machabejska|[\s\xa0]*Machabejska)|Wamakabayo|M(?:ga[\s\xa0]*Macabeo|a(?:c(?:hab(?:aeorum|ejcov)|ab(?:aeorum|b(?:be(?:e[es]?|s)?|e(?:e(?:[eo]s?|s)?|os?|s)?)|e(?:aid|us|e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be[es]?|e(?:e(?:[es]|os?)?|os?|s)?)|e(?:e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?)?|k(?:abe(?:j(?:cov|ska))?|k(?:abe(?:usok|een))?)?)))))|D(?:euxieme(?:s[\s\xa0]*Maccabees|[\s\xa0]*Maccabees)|ru(?:g(?:a[\s\xa0]*(?:knjiga[\s\xa0]*o[\s\xa0]*Makabejcima|Ks(?:ieg[ai][\s\xa0]*Machabejska|\.[\s\xa0]*Machabejska|[\s\xa0]*Machabejska))|i[\s\xa0]*Ks(?:ieg[ai][\s\xa0]*Machabejska|\.[\s\xa0]*Machabejska|[\s\xa0]*Machabejska))|h(?:a[\s\xa0]*(?:kniha[\s\xa0]*Ma(?:chabejcov|kabejcov)|Ma(?:chabejcov|k(?:abej(?:cov|ska))?))|y[\s\xa0]*(?:list[\s\xa0]*Ma(?:chabejcov|kabejcov)|Ma(?:chabejcov|k(?:abej(?:cov|ska))?)))))|Onnur[\s\xa0]*Makkabeabok|T(?:oinen[\s\xa0]*makkabilaiskirja|weede[\s\xa0]*Mak(?:kabeeen)?)|Kitabu[\s\xa0]*cha[\s\xa0]*Wamakabayo[\s\xa0]*II|Liber[\s\xa0]*(?:II[\s\xa0]*Maccabaeorum|Maccabaeorum[\s\xa0]*II)|Zweite[\s\xa0]*Makkabaer|And(?:en[\s\xa0]*Makk|r(?:a[\s\xa0]*Mackabeerboken|e[\s\xa0]*Makk(?:abeerbok)?))|Pili[\s\xa0]*(?:Wamakabayo|Mak)|Se(?:gund(?:a[\s\xa0]*Macabeus|o[\s\xa0]*Mac(?:cab(?:be(?:eos?|os?)|e(?:eos?|os?))|ab(?:be(?:eos?|os?)|e(?:eos?|us|os?))))|cond(?:a[\s\xa0]*Maccabei|o[\s\xa0]*(?:libro[\s\xa0]*dei[\s\xa0]*Maccabei|Maccabei)|[\s\xa0]*Mac(?:ab(?:b(?:be(?:e[es]?|s)?|e(?:e(?:es?|s)?|s)?)|e(?:e(?:es?|s)?|s)?)|c(?:ab(?:b(?:be[es]?|e(?:e[es]?|s)?)|e(?:e(?:es?|s)?|s)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?)?))|Ma(?:chabaeorum[\s\xa0]*II|kkabeusok[\s\xa0]*II|sodik[\s\xa0]*Mak(?:kabeusok)?)|2(?:d(?:\.[\s\xa0]*Maccabees|e(?:\.[\s\xa0]*Maccabees|[\s\xa0]*Maccabees)|[\s\xa0]*Maccabees)|a(?:\.[\s\xa0]*Macabeus|[\s\xa0]*Macabeus)|o(?:\.[\s\xa0]*Mac(?:cab(?:be(?:eos?|os?)|e(?:eos?|os?))|ab(?:be(?:eos?|os?)|e(?:eos?|us|os?)))|[\s\xa0]*Mac(?:cab(?:be(?:eos?|os?)|e(?:eos?|os?))|ab(?:be(?:eos?|os?)|e(?:eos?|us|os?))))|nd(?:\.[\s\xa0]*Mac(?:ab(?:b(?:be(?:e[es]?|s)?|e(?:e(?:es?|s)?|s)?)|e(?:e(?:es?|s)?|s)?)|c(?:ab(?:b(?:be[es]?|e(?:e[es]?|s)?)|e(?:e(?:es?|s)?|s)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?)?|[\s\xa0]*Mac(?:ab(?:b(?:be(?:e[es]?|s)?|e(?:e(?:es?|s)?|s)?)|e(?:e(?:es?|s)?|s)?)|c(?:ab(?:b(?:be[es]?|e(?:e[es]?|s)?)|e(?:e(?:es?|s)?|s)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?)?)|\.(?:o(?:\.[\s\xa0]*Mac(?:cab(?:be(?:eos?|os?)|e(?:eos?|os?))|ab(?:be(?:eos?|os?)|e(?:eos?|os?)))|[\s\xa0]*Mac(?:cab(?:be(?:eos?|os?)|e(?:eos?|os?))|ab(?:be(?:eos?|os?)|e(?:eos?|os?))))|[\s\xa0]*(?:makkabilaiskirja|Ks(?:ieg[ai][\s\xa0]*Machabejska|\.[\s\xa0]*Machabejska|[\s\xa0]*Machabejska)|Wamakabayo|M(?:ga[\s\xa0]*Macabeo|a(?:c(?:kabeerboken|hab(?:aeorum|ejcov)|ab(?:aeorum|b(?:be(?:e[es]?|s)?|e(?:e(?:[eo]s?|s)?|os?|s)?)|e(?:aid|us|e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be[es]?|e(?:e(?:[es]|os?)?|os?|s)?)|e(?:e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?)?|k(?:abe(?:j(?:cov|ska))?|k(?:ab(?:e(?:usok|e(?:rbok|en))|aer))?)?))))|e(?:me(?:\.[\s\xa0]*Maccabees|[\s\xa0]*Maccabees)|\.[\s\xa0]*Ma(?:ccabees|k(?:kabeeen)?)|[\s\xa0]*Ma(?:ccabees|k(?:kabeeen)?))|Macc|[\s\xa0]*(?:makkabilaiskirja|Ks(?:ieg[ai][\s\xa0]*Machabejska|\.[\s\xa0]*Machabejska|[\s\xa0]*Machabejska)|k(?:\.[\s\xa0]*Ma(?:chabejcov|kabejcov)|[\s\xa0]*Ma(?:chabejcov|kabejcov))|Wamakabayo|M(?:ga[\s\xa0]*Macabeo|a(?:c(?:ab(?:aeorum|b(?:be(?:e[es]?|s)?|e(?:e(?:[eo]s?|s)?|os?|s)?)|e(?:aid|us|e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be[es]?|e(?:e(?:[es]|os?)?|os?|s)?)|e(?:e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?|h(?:ab(?:aeorum|ejcov))?|k(?:abeerboken)?)?|k(?:abe(?:j(?:cov|ska))?|k(?:ab(?:e(?:usok|e(?:rbok|en))|aer))?)?)?|c[bh]?)?)))|(?:Wamakabayo[\s\xa0]*II|2[\s\xa0]*makk))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["3Macc"],
        apocrypha: true,
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])((?:K(?:itabu[\s\xa0]*cha[\s\xa0]*Wamakabayo[\s\xa0]*III|olmas[\s\xa0]*makkabilaiskirja)|Liber[\s\xa0]*(?:III[\s\xa0]*Maccabaeorum|Maccabaeorum[\s\xa0]*III)|Ma(?:chabaeorum[\s\xa0]*III|kkabeusok[\s\xa0]*III)|Harmadik[\s\xa0]*Mak(?:kabeusok)?|D(?:ritte[\s\xa0]*Makkabaer|erde[\s\xa0]*Mak(?:kabeeen)?)|T(?:er(?:ce(?:ir[ao][\s\xa0]*Macabeus|r(?:o[\s\xa0]*Mac(?:cab(?:be(?:eos?|os?)|e(?:eos?|os?))|ab(?:be(?:eos?|os?)|e(?:eos?|os?)))|[\s\xa0]*Mac(?:cab(?:be(?:eos?|os?)|e(?:eos?|os?))|ab(?:be(?:eos?|os?)|e(?:eos?|os?)))))|z(?:a[\s\xa0]*Maccabei|o[\s\xa0]*(?:libro[\s\xa0]*dei[\s\xa0]*Maccabei|Maccabei)))|hird[\s\xa0]*Mac(?:ab(?:b(?:be(?:e[es]?|s)?|e(?:e(?:es?|s)?|s)?)|e(?:e(?:es?|s)?|s)?)|c(?:ab(?:b(?:be[es]?|e(?:e[es]?|s)?)|e(?:e(?:es?|s)?|s)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?)?|r(?:zeci(?:a[\s\xa0]*Ks(?:ieg[ai][\s\xa0]*Machabejska|\.[\s\xa0]*Machabejska|[\s\xa0]*Machabejska)|[\s\xa0]*Ks(?:ieg[ai][\s\xa0]*Machabejska|\.[\s\xa0]*Machabejska|[\s\xa0]*Machabejska))|oisieme(?:s[\s\xa0]*Maccabees|[\s\xa0]*Maccabees)|e(?:ca[\s\xa0]*knjiga[\s\xa0]*o[\s\xa0]*Makabejcima|dje[\s\xa0]*Ma(?:ckabeerboken|kk(?:abeerbok)?)|ti(?:a[\s\xa0]*(?:kniha[\s\xa0]*Machabejcov|Machabejcov)|[\s\xa0]*Ma(?:chabejcov|k(?:abejska)?))))|atu[\s\xa0]*(?:Wamakabayo|Mak))|I(?:katlong[\s\xa0]*M(?:ga[\s\xa0]*Macabeo|acabeos?)|II(?:\.[\s\xa0]*(?:makkabilaiskirja|Ks(?:ieg[ai][\s\xa0]*Machabejska|\.[\s\xa0]*Machabejska|[\s\xa0]*Machabejska)|Wamakabayo|M(?:ga[\s\xa0]*Macabeo|a(?:c(?:hab(?:aeorum|ejcov)|ab(?:aeorum|b(?:be(?:e[es]?|s)?|e(?:e(?:[eo]s?|s)?|os?|s)?)|e(?:aid|us|e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be[es]?|e(?:e(?:[es]|os?)?|os?|s)?)|e(?:e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?)?|k(?:abe(?:jska)?|k(?:abe(?:usok|een))?)?)))|[\s\xa0]*(?:makkabilaiskirja|Ks(?:ieg[ai][\s\xa0]*Machabejska|\.[\s\xa0]*Machabejska|[\s\xa0]*Machabejska)|Wamakabayo|M(?:ga[\s\xa0]*Macabeo|a(?:c(?:hab(?:aeorum|ejcov)|ab(?:aeorum|b(?:be(?:e[es]?|s)?|e(?:e(?:[eo]s?|s)?|os?|s)?)|e(?:aid|us|e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be[es]?|e(?:e(?:[es]|os?)?|os?|s)?)|e(?:e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?)?|k(?:abe(?:jska)?|k(?:abe(?:usok|een))?)?)))))|3(?:a(?:\.[\s\xa0]*Macabeus|[\s\xa0]*Macabeus)|o(?:\.[\s\xa0]*Mac(?:cab(?:be(?:eos?|os?)|e(?:eos?|os?))|ab(?:be(?:eos?|os?)|e(?:eos?|us|os?)))|[\s\xa0]*Mac(?:cab(?:be(?:eos?|os?)|e(?:eos?|os?))|ab(?:be(?:eos?|os?)|e(?:eos?|us|os?))))|rd(?:\.[\s\xa0]*Mac(?:ab(?:b(?:be(?:e[es]?|s)?|e(?:e(?:es?|s)?|s)?)|e(?:e(?:es?|s)?|s)?)|c(?:ab(?:b(?:be[es]?|e(?:e[es]?|s)?)|e(?:e(?:es?|s)?|s)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?)?|[\s\xa0]*Mac(?:ab(?:b(?:be(?:e[es]?|s)?|e(?:e(?:es?|s)?|s)?)|e(?:e(?:es?|s)?|s)?)|c(?:ab(?:b(?:be[es]?|e(?:e[es]?|s)?)|e(?:e(?:es?|s)?|s)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?)?)|\.(?:o(?:\.[\s\xa0]*Mac(?:cab(?:be(?:eos?|os?)|e(?:eos?|os?))|ab(?:be(?:eos?|os?)|e(?:eos?|os?)))|[\s\xa0]*Mac(?:cab(?:be(?:eos?|os?)|e(?:eos?|os?))|ab(?:be(?:eos?|os?)|e(?:eos?|os?))))|[\s\xa0]*(?:makkabilaiskirja|Ks(?:ieg[ai][\s\xa0]*Machabejska|\.[\s\xa0]*Machabejska|[\s\xa0]*Machabejska)|Wamakabayo|M(?:ga[\s\xa0]*Macabeo|a(?:c(?:kabeerboken|hab(?:aeorum|ejcov)|ab(?:aeorum|b(?:be(?:e[es]?|s)?|e(?:e(?:[eo]s?|s)?|os?|s)?)|e(?:aid|us|e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be[es]?|e(?:e(?:[es]|os?)?|os?|s)?)|e(?:e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?)?|k(?:abe(?:jska)?|k(?:ab(?:e(?:usok|e(?:rbok|en))|aer))?)?))))|e(?:me(?:\.[\s\xa0]*Maccabees|[\s\xa0]*Maccabees)|\.[\s\xa0]*Ma(?:c(?:kabeerboken|cabees)|k(?:kabeeen)?)|[\s\xa0]*Ma(?:c(?:kabeerboken|cabees)|k(?:kabeeen)?))|Macc|[\s\xa0]*(?:makkabilaiskirja|Ks(?:ieg[ai][\s\xa0]*Machabejska|\.[\s\xa0]*Machabejska|[\s\xa0]*Machabejska)|k(?:\.[\s\xa0]*Machabejcov|[\s\xa0]*Machabejcov)|Wamakabayo|M(?:ga[\s\xa0]*Macabeo|a(?:c(?:ab(?:aeorum|b(?:be(?:e[es]?|s)?|e(?:e(?:[eo]s?|s)?|os?|s)?)|e(?:aid|us|e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be[es]?|e(?:e(?:[es]|os?)?|os?|s)?)|e(?:e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?|h(?:ab(?:aeorum|ejcov))?|k(?:abeerboken)?)?|k(?:abe(?:jska)?|k(?:ab(?:e(?:usok|e(?:rbok|en))|aer))?)?)|c[bh]?)?)))|(?:Wamakabayo[\s\xa0]*III|3[\s\xa0]*makk))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["4Macc"],
        apocrypha: true,
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])((?:C(?:zwarta[\s\xa0]*Ks(?:ieg[ai][\s\xa0]*Machabejska|\.[\s\xa0]*Machabejska|[\s\xa0]*Machabejska)|uarto[\s\xa0]*Mac(?:cab(?:be(?:eos?|os?)|e(?:eos?|os?))|ab(?:be(?:eos?|os?)|e(?:eos?|os?)))|tvrta[\s\xa0]*Mak(?:abejska)?)|N(?:eljas[\s\xa0]*makkabilaiskirja|ne[\s\xa0]*(?:Wamakabayo|Mak))|4(?:e(?:me(?:\.[\s\xa0]*Maccabees|[\s\xa0]*Maccabees)|\.[\s\xa0]*Maccabees|[\s\xa0]*Maccabees)|a(?:\.[\s\xa0]*Macabeus|[\s\xa0]*Macabeus)|o(?:\.[\s\xa0]*Mac(?:cab(?:be(?:eos?|os?)|e(?:eos?|os?))|ab(?:be(?:eos?|os?)|e(?:eos?|us|os?)))|[\s\xa0]*Mac(?:cab(?:be(?:eos?|os?)|e(?:eos?|os?))|ab(?:be(?:eos?|os?)|e(?:eos?|us|os?))))|th(?:\.[\s\xa0]*Mac(?:ab(?:b(?:be(?:e[es]?|s)?|e(?:e(?:es?|s)?|s)?)|e(?:e(?:es?|s)?|s)?)|c(?:ab(?:b(?:be[es]?|e(?:e[es]?|s)?)|e(?:e(?:es?|s)?|s)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?)?|[\s\xa0]*Mac(?:ab(?:b(?:be(?:e[es]?|s)?|e(?:e(?:es?|s)?|s)?)|e(?:e(?:es?|s)?|s)?)|c(?:ab(?:b(?:be[es]?|e(?:e[es]?|s)?)|e(?:e(?:es?|s)?|s)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?)?)|\.(?:o(?:\.[\s\xa0]*Mac(?:cab(?:be(?:eos?|os?)|e(?:eos?|os?))|ab(?:be(?:eos?|os?)|e(?:eos?|os?)))|[\s\xa0]*Mac(?:cab(?:be(?:eos?|os?)|e(?:eos?|os?))|ab(?:be(?:eos?|os?)|e(?:eos?|os?))))|[\s\xa0]*(?:makkabilaiskirja|Ks(?:ieg[ai][\s\xa0]*Machabejska|\.[\s\xa0]*Machabejska|[\s\xa0]*Machabejska)|Wamakabayo|M(?:ga[\s\xa0]*Macabeo|a(?:c(?:kabeerboken|hab(?:aeorum|ejcov)|ab(?:aeorum|b(?:be(?:e[es]?|s)?|e(?:e(?:[eo]s?|s)?|os?|s)?)|e(?:aid|us|e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be[es]?|e(?:e(?:[es]|os?)?|os?|s)?)|e(?:e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?)?|k(?:abe(?:jska)?|k(?:ab(?:e(?:usok|e(?:rbok|en))|aer))?)?))))|Macc|[\s\xa0]*(?:makkabilaiskirja|Ks(?:ieg[ai][\s\xa0]*Machabejska|\.[\s\xa0]*Machabejska|[\s\xa0]*Machabejska)|k(?:\.[\s\xa0]*Machabejcov|[\s\xa0]*Machabejcov)|Wamakabayo|M(?:ga[\s\xa0]*Macabeo|a(?:c(?:ab(?:aeorum|b(?:be(?:e[es]?|s)?|e(?:e(?:[eo]s?|s)?|os?|s)?)|e(?:aid|us|e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be[es]?|e(?:e(?:[es]|os?)?|os?|s)?)|e(?:e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?|h(?:ab(?:aeorum|ejcov))?|k(?:abeerboken)?)?|k(?:abe(?:jska)?|k(?:ab(?:e(?:usok|e(?:rbok|en))|aer))?)?)|c[bh]?)?))|Vier(?:te[\s\xa0]*Makkabaer|de[\s\xa0]*Mak(?:kabeeen)?)|Liber[\s\xa0]*(?:IV[\s\xa0]*Maccabaeorum|Maccabaeorum[\s\xa0]*IV)|Kitabu[\s\xa0]*cha[\s\xa0]*Wamakabayo[\s\xa0]*IV|Ma(?:chabaeorum[\s\xa0]*IV|kkabeusok[\s\xa0]*IV)|Stvrta[\s\xa0]*(?:kniha[\s\xa0]*Machabejcov|Machabejcov)|Qua(?:trieme(?:s[\s\xa0]*Maccabees|[\s\xa0]*Maccabees)|rt(?:a[\s\xa0]*Mac(?:abeus|cabei)|o[\s\xa0]*(?:libro[\s\xa0]*dei[\s\xa0]*Maccabei|Mac(?:abeus|cabei))))|F(?:j(?:arde[\s\xa0]*Mackabeerboken|erde[\s\xa0]*Makk(?:abeerbok)?)|ourth[\s\xa0]*Mac(?:ab(?:b(?:be(?:e[es]?|s)?|e(?:e(?:es?|s)?|s)?)|e(?:e(?:es?|s)?|s)?)|c(?:ab(?:b(?:be[es]?|e(?:e[es]?|s)?)|e(?:e(?:es?|s)?|s)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?)?)|I(?:kaapat[\s\xa0]*M(?:ga[\s\xa0]*Macabeo|acabeos?)|V(?:\.[\s\xa0]*(?:makkabilaiskirja|Ks(?:ieg[ai][\s\xa0]*Machabejska|\.[\s\xa0]*Machabejska|[\s\xa0]*Machabejska)|Wamakabayo|M(?:ga[\s\xa0]*Macabeo|a(?:c(?:hab(?:aeorum|ejcov)|ab(?:aeorum|b(?:be(?:e[es]?|s)?|e(?:e(?:[eo]s?|s)?|os?|s)?)|e(?:aid|us|e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be[es]?|e(?:e(?:[es]|os?)?|os?|s)?)|e(?:e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?)?|k(?:abe(?:jska)?|k(?:abe(?:usok|een))?)?)))|[\s\xa0]*(?:makkabilaiskirja|Ks(?:ieg[ai][\s\xa0]*Machabejska|\.[\s\xa0]*Machabejska|[\s\xa0]*Machabejska)|Wamakabayo|M(?:ga[\s\xa0]*Macabeo|a(?:c(?:hab(?:aeorum|ejcov)|ab(?:aeorum|b(?:be(?:e[es]?|s)?|e(?:e(?:[eo]s?|s)?|os?|s)?)|e(?:aid|us|e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be[es]?|e(?:e(?:[es]|os?)?|os?|s)?)|e(?:e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?)?|k(?:abe(?:jska)?|k(?:abe(?:usok|een))?)?))))))|(?:Wamakabayo[\s\xa0]*IV|4[\s\xa0]*makk))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["1Macc"],
        apocrypha: true,
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])((?:E(?:nsimmainen[\s\xa0]*makkabilaiskirja|rste[\s\xa0]*Makkabaer|erste[\s\xa0]*Mak(?:kabeeen)?|lso[\s\xa0]*Mak(?:kabeusok)?)|I(?:\.[\s\xa0]*(?:makkabilaiskirja|Ks(?:ieg[ai][\s\xa0]*Machabejska|\.[\s\xa0]*Machabejska|[\s\xa0]*Machabejska)|Wamakabayo|M(?:ga[\s\xa0]*Macabeo|a(?:c(?:hab(?:aeorum|ejcov)|ab(?:aeorum|b(?:be(?:e[es]?|s)?|e(?:e(?:[eo]s?|s)?|os?|s)?)|e(?:aid|us|e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be[es]?|e(?:e(?:[es]|os?)?|os?|s)?)|e(?:e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?)?|k(?:abe(?:jska)?|k(?:abe(?:usok|een))?)?)))|[\s\xa0]*(?:makkabilaiskirja|Ks(?:ieg[ai][\s\xa0]*Machabejska|\.[\s\xa0]*Machabejska|[\s\xa0]*Machabejska)|Wamakabayo|M(?:ga[\s\xa0]*Macabeo|a(?:c(?:hab(?:aeorum|ejcov)|ab(?:aeorum|b(?:be(?:e[es]?|s)?|e(?:e(?:[eo]s?|s)?|os?|s)?)|e(?:aid|us|e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be[es]?|e(?:e(?:[es]|os?)?|os?|s)?)|e(?:e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?)?|k(?:abe(?:jska)?|k(?:abe(?:usok|een))?)?))))|Liber[\s\xa0]*(?:I[\s\xa0]*Maccabaeorum|Maccabaeorum[\s\xa0]*I)|Ma(?:chabaeorum[\s\xa0]*I|kkabeusok[\s\xa0]*I)|Una(?:ng[\s\xa0]*M(?:ga[\s\xa0]*Macabeo|acabeos?)|[\s\xa0]*M(?:ga[\s\xa0]*Macabeo|acabeos?))|1(?:re(?:\.[\s\xa0]*Maccabees|[\s\xa0]*Maccabees)|a(?:\.[\s\xa0]*Macabeus|[\s\xa0]*Macabeus)|o(?:\.[\s\xa0]*Mac(?:cab(?:be(?:eos?|os?)|e(?:eos?|os?))|ab(?:be(?:eos?|os?)|e(?:eos?|us|os?)))|[\s\xa0]*Mac(?:cab(?:be(?:eos?|os?)|e(?:eos?|os?))|ab(?:be(?:eos?|os?)|e(?:eos?|us|os?))))|st(?:\.[\s\xa0]*Mac(?:ab(?:b(?:be(?:e[es]?|s)?|e(?:e(?:es?|s)?|s)?)|e(?:e(?:es?|s)?|s)?)|c(?:ab(?:b(?:be[es]?|e(?:e[es]?|s)?)|e(?:e(?:es?|s)?|s)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?)?|[\s\xa0]*Mac(?:ab(?:b(?:be(?:e[es]?|s)?|e(?:e(?:es?|s)?|s)?)|e(?:e(?:es?|s)?|s)?)|c(?:ab(?:b(?:be[es]?|e(?:e[es]?|s)?)|e(?:e(?:es?|s)?|s)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?)?)|\.(?:o(?:\.[\s\xa0]*Mac(?:cab(?:be(?:eos?|os?)|e(?:eos?|os?))|ab(?:be(?:eos?|os?)|e(?:eos?|os?)))|[\s\xa0]*Mac(?:cab(?:be(?:eos?|os?)|e(?:eos?|os?))|ab(?:be(?:eos?|os?)|e(?:eos?|os?))))|[\s\xa0]*(?:makkabilaiskirja|Ks(?:ieg[ai][\s\xa0]*Machabejska|\.[\s\xa0]*Machabejska|[\s\xa0]*Machabejska)|Wamakabayo|M(?:ga[\s\xa0]*Macabeo|a(?:c(?:kabeerboken|hab(?:aeorum|ejcov)|ab(?:aeorum|b(?:be(?:e[es]?|s)?|e(?:e(?:[eo]s?|s)?|os?|s)?)|e(?:aid|us|e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be[es]?|e(?:e(?:[es]|os?)?|os?|s)?)|e(?:e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?)?|k(?:abe(?:jska)?|k(?:ab(?:e(?:usok|e(?:rbok|en))|aer))?)?))))|e(?:r(?:\.[\s\xa0]*Maccabees|e(?:\.[\s\xa0]*Maccabees|[\s\xa0]*Maccabees)|[\s\xa0]*Maccabees)|\.[\s\xa0]*Mak(?:kabeeen)?|[\s\xa0]*Mak(?:kabeeen)?)|Macc|[\s\xa0]*(?:makkabilaiskirja|Ks(?:ieg[ai][\s\xa0]*Machabejska|\.[\s\xa0]*Machabejska|[\s\xa0]*Machabejska)|k(?:\.[\s\xa0]*Machabejcov|[\s\xa0]*Machabejcov)|Wamakabayo|M(?:ga[\s\xa0]*Macabeo|a(?:c(?:ab(?:aeorum|b(?:be(?:e[es]?|s)?|e(?:e(?:[eo]s?|s)?|os?|s)?)|e(?:aid|us|e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be[es]?|e(?:e(?:[es]|os?)?|os?|s)?)|e(?:e(?:[eo]s?|s)?|[is]|os?)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?|h(?:ab(?:aeorum|ejcov))?|k(?:abeerboken)?)?|k(?:abe(?:jska)?|k(?:ab(?:e(?:usok|e(?:rbok|en))|aer))?)?)?|c[bh]?)?))|P(?:ierwsz[aey][\s\xa0]*Ks(?:ieg(?:[ai][\s\xa0]*Machabejska|\.[\s\xa0]*Machabejska|[\s\xa0]*Machabejska))|r(?:emier(?:e(?:s[\s\xa0]*Maccabees|[\s\xa0]*Maccabees)|s[\s\xa0]*Maccabees|[\s\xa0]*Maccabees)|im(?:a[\s\xa0]*Maccabei|e(?:ir[ao][\s\xa0]*Macabeus|r(?:o[\s\xa0]*Mac(?:cab(?:be(?:eos?|os?)|e(?:eos?|os?))|ab(?:be(?:eos?|os?)|e(?:eos?|os?)))|[\s\xa0]*Mac(?:cab(?:be(?:eos?|os?)|e(?:eos?|os?))|ab(?:be(?:eos?|os?)|e(?:eos?|os?)))))|o[\s\xa0]*(?:libro[\s\xa0]*dei[\s\xa0]*Maccabei|Maccabei))|v(?:y[\s\xa0]*(?:list[\s\xa0]*Machabejcov|Machabejcov)|a[\s\xa0]*(?:kn(?:jiga[\s\xa0]*o[\s\xa0]*Makabejcima|iha[\s\xa0]*Machabejcov)|Ma(?:chabejcov|kabejcov))|ni[\s\xa0]*Mak(?:abejska)?)))|F(?:orsta[\s\xa0]*Mackabeerboken|yrsta[\s\xa0]*Makkabeabok|irst[\s\xa0]*Mac(?:ab(?:b(?:be(?:e[es]?|s)?|e(?:e(?:es?|s)?|s)?)|e(?:e(?:es?|s)?|s)?)|c(?:ab(?:b(?:be[es]?|e(?:e[es]?|s)?)|e(?:e(?:es?|s)?|s)?)|c(?:ab(?:b(?:be|e[es]?)|e(?:e[es]?|s)?))?)?)?)|K(?:itabu[\s\xa0]*cha[\s\xa0]*Wamakabayo[\s\xa0]*I|wanza[\s\xa0]*(?:Wamakabayo|Mak)))|Pierwsz(?:[aey][\s\xa0]*Ks(?:\.[\s\xa0]*Machabejska|[\s\xa0]*Machabejska))|(?:Wamakabayo[\s\xa0]*I|Maccabees|1[\s\xa0]*makk))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["Mark"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Jevanhelije[\\s\\xa0]*vid[\\s\\xa0]*Marka|Vangelo[\\s\\xa0]*di[\\s\\xa0]*(?:San[\\s\\xa0]*Marco|Marco)|E(?:l[\\s\\xa0]*Evangelio[\\s\\xa0]*de[\\s\\xa0]*Marcos|van(?:keliumi[\\s\\xa0]*Markuksen[\\s\\xa0]*mukaan|geli(?:e(?:[\\s\\xa0]*volgens[\\s\\xa0]*Mar[ck]us|t[\\s\\xa0]*etter[\\s\\xa0]*Markus)|um[\\s\\xa0]*(?:secundum[\\s\\xa0]*Marcum|podle[\\s\\xa0]*Marka))|jelium[\\s\\xa0]*Podla[\\s\\xa0]*Marka)|banghelyo[\\s\\xa0]*(?:ayon[\\s\\xa0]*kay[\\s\\xa0]*Marcos|ni[\\s\\xa0]*(?:San[\\s\\xa0]*Mar[ck]os|Mar[ck]os))|w(?:angelia[\\s\\xa0]*(?:wg[\\s\\xa0]*sw(?:\\.[\\s\\xa0]*Marka|[\\s\\xa0]*Marka)|Marka)|\\.[\\s\\xa0]*Marka|[\\s\\xa0]*Mar(?:ka)?))|M(?:a(?:buting[\\s\\xa0]*Balita[\\s\\xa0]*ayon[\\s\\xa0]*kay[\\s\\xa0]*(?:San[\\s\\xa0]*Mar[ck]os|Mar[ck]os)|r(?:k(?:ovo[\\s\\xa0]*evangelium|u(?:ksen[\\s\\xa0]*evankeliumi|s(?:[\\s\\xa0]*evangelium|evangeliet)|[\\s\\xa0]*Narceyti))|akus|ek|cu?|q(?:qoosa)?))|rc(?:os)?|c)|Injil(?:i[\\s\\xa0]*ya[\\s\\xa0]*Marko|[\\s\\xa0]*Markus)|Sulat[\\s\\xa0]*ni[\\s\\xa0]*San[\\s\\xa0]*Marcos|mark(?:usle|ane)|The[\\s\\xa0]*Gospel[\\s\\xa0]*(?:according[\\s\\xa0]*to[\\s\\xa0]*(?:S(?:aint[\\s\\xa0]*M(?:ark?|k|rk?)|t(?:\\.[\\s\\xa0]*M(?:ark?|k|rk?)|[\\s\\xa0]*M(?:ark?|k|rk?)))|M(?:ark?|k|rk?))|of[\\s\\xa0]*(?:S(?:aint[\\s\\xa0]*M(?:ark?|k|rk?)|t(?:\\.[\\s\\xa0]*M(?:ark?|k|rk?)|[\\s\\xa0]*M(?:ark?|k|rk?)))|M(?:ark?|k|rk?)))|Ungjilli[\\s\\xa0]*i[\\s\\xa0]*Markut)|(?:Evangelio[\\s\\xa0]*de[\\s\\xa0]*Marcos|Gospel[\\s\\xa0]*(?:according[\\s\\xa0]*to[\\s\\xa0]*(?:S(?:aint[\\s\\xa0]*M(?:ark?|k|rk?)|t(?:\\.[\\s\\xa0]*M(?:ark?|k|rk?)|[\\s\\xa0]*M(?:ark?|k|rk?)))|M(?:ark?|k|rk?))|of[\\s\\xa0]*(?:S(?:aint[\\s\\xa0]*M(?:ark?|rk?|k)|t(?:\\.[\\s\\xa0]*M(?:ark?|k|rk?)|[\\s\\xa0]*M(?:ark?|rk?|k)))|M(?:ark?|rk?|k)))|markus|S(?:a(?:n[\\s\\xa0]*Marcos|int[\\s\\xa0]*M(?:ark?|rk?|k))|t(?:\\.[\\s\\xa0]*M(?:ark?|k|rk?)|[\\s\\xa0]*M(?:ark?|rk?|k)))|M(?:ar(?:c(?:us|os?)|k(?:os?|a|u(?:ksen|s)?)?)?|k|rk?)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Jas"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(yak(?:obacem[\\s\\xa0]*patra|ubko[\\s\\xa0]*patra)|(?:T(?:iago|g)|J(?:a(?:ques|ak(?:obin[\\s\\xa0]*kirje)?|c(?:obo|q(?:ues)?)?|k(?:ab|o(?:vljeva[\\s\\xa0]*poslanica|b(?:s(?:brevet|[\\s\\xa0]*(?:epistel|Brev))|us(?:brief)?|it?)?)|ub(?:ov[\\s\\xa0]*List)?)?|m(?:es?)?|s)?|k|ms?)|Epistula[\\s\\xa0]*Iacobi|Waraka[\\s\\xa0]*wa[\\s\\xa0]*Yakobo|Barua[\\s\\xa0]*ya[\\s\\xa0]*Yakobo|Ya(?:aqooba|c(?:q(?:uub)?)?|k(?:kopu[\\s\\xa0]*Elutiya[\\s\\xa0]*Nirupam|oob)?|q)|L(?:ettera[\\s\\xa0]*di[\\s\\xa0]*Giacomo|ayang[\\s\\xa0]*Yakobus|ist[\\s\\xa0]*(?:sw(?:\\.[\\s\\xa0]*Jakuba|[\\s\\xa0]*Jakuba)|Jakub(?:uv|a)))|Ia(?:c(?:o[bv])?|go?)|G[cm]|Poslannja[\\s\\xa0]*apostola[\\s\\xa0]*Jakova|S(?:an(?:t(?:iago)?)?|tg?))|(?:yak(?:obacem|ubko)|Giacomo|Yak(?:kopu|ob(?:us|o))|Ja(?:akobin|k(?:ub(?:ov|a)|o(?:vljeva|bs(?:[\\s\\xa0]*brev)?)))|Iacobi))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Amos"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Prophetia[\\s\\xa0]*Amos|Liv[\\s\\xa0]*Amos[\\s\\xa0]*la|Ks(?:ieg[ai][\\s\\xa0]*Amosa|\\.[\\s\\xa0]*Amosa|[\\s\\xa0]*Amosa)|Caam(?:oos)?|A(?:am(?:oksen[\\s\\xa0]*kirja)?|m(?:o(?:s(?:(?:['’][\\s\\xa0]*(?:Bog|bok))|[iz])|xa?)?|s)?))|Amosa|(?:amos|A(?:amoksen|mos)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Tob"],
        apocrypha: true,
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Cartea[\\s\\xa0]*lui[\\s\\xa0]*Tobit|Liber[\\s\\xa0]*T(?:hobis|obiae)|Ks(?:ieg(?:[ai][\\s\\xa0]*Tobi(?:asza|ta))|\\.[\\s\\xa0]*Tobi(?:asza|ta)|[\\s\\xa0]*Tobi(?:asza|ta))|T(?:ho|ob(?:i(?:olo|jas?|t(?:s(?:[\\s\\xa0]*(?:Bog|bok)|bok)|i(?:n[\\s\\xa0]*kirja)?)|a(?:an[\\s\\xa0]*kirja|n[\\s\\xa0]*kirja|s['’][\\s\\xa0]*bok)?|e)?|t)?|b))|Tobi(?:a(?:an|[sen])|t(?:in)?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Jdt"],
        apocrypha: true,
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Liber[\\s\\xa0]*Iudith|K(?:niha[\\s\\xa0]*Juditina|\\.[\\s\\xa0]*Juditina|itab[\\s\\xa0]*Yudit|[\\s\\xa0]*Juditina|s(?:ieg[ai][\\s\\xa0]*Judyty|\\.[\\s\\xa0]*Judyty|[\\s\\xa0]*Judyty))|Yud(?:it(?:hi?|i)|t)|G(?:iuditta|dt)|I(?:udita|dt)|J(?:ud(?:it(?:in[\\s\\xa0]*kirja|s[\\s\\xa0]*(?:Bog|bok)|a(?:rbok)?|[eh])?|th?)|d(?:ith?|th?)))|(?:Jud(?:itin|yty)|Iudith|Yudit))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Bar"],
        apocrypha: true,
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Proroctvo[\\s\\xa0]*Baruchovo|Liber[\\s\\xa0]*Baruch|K(?:niha[\\s\\xa0]*Baru(?:chova|kova)|itab[\\s\\xa0]*Barukh|s(?:ieg[ai][\\s\\xa0]*Barucha|\\.[\\s\\xa0]*Barucha|[\\s\\xa0]*Barucha))|B(?:a(?:arukin[\\s\\xa0]*kirja|r(?:u(?:que|[ch]|k(?:in[\\s\\xa0]*kirja|s(?:[\\s\\xa0]*(?:Bog|bok)|bok)|u)?))?)?|r))|Ba(?:arukin|ru(?:cha?|k(?:in|h))))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["1Kgs"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])((?:1(?:\.[\s\xa0]*(?:Ks|Re)|[\s\xa0]*(?:Ks|Re))|I(?:\.[\s\xa0]*K[is]|[\s\xa0]*K[is])))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["2Kgs"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧ֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚؠ-ٟٮ-ۓە-ۜ۟-۪ۨ-ۯۺ-ۼۿݐ-ݿࢠࢢ-ࢬࣤ-ࣾऀ-ंऄ-ऺ़-ऽु-ै्ॐ-ॣॱ-ॷॹ-ॿਁ-ਂਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ੁ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼ੰ-ੵଁଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ଽିୁ-ୄ୍ୖଡ଼-ଢ଼ୟ-ୣୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹீ்ௐก-ฺเ-๎᷀-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ⃐-⃿Ⱡ-Ɀⷠ-ⷿ々-〆〪-〭〱-〵〻-〼㐀-䶵一-鿌Ꙁ-꙯ꙴ-꙽ꙿ-ꚗꚟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ꣠-ꣷꣻ가-힯豈-舘並-龎ﭐ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ])((?:II(?:\.[\s\xa0]*Ks|[\s\xa0]*Ks)|2(?:\.[\s\xa0]*(?:Ks|Re)|[\s\xa0]*(?:Ks|Re))))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["Ezek", "Ezra"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Ez)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Hab", "Hag"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Ha)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Heb", "Hab"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Hb)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["John"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Jan)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["John", "Jonah"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Yn)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["John", "Jonah", "Job", "Josh", "Joel"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Jo)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Jonah", "Joel"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Yoo)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Jude", "Judg"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(J(?:d|ud?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Judg"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Bir)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Lam"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(La)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Matt", "Mark", "Mal"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Ma)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Mic"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Mi)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Phil", "Phlm"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Fil|Phl?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Rev"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Re)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Song"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Songs)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Zeph", "Zech"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Ze)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }
    ];
    if (include_apocrypha === true && case_sensitive === "none") {
      return books;
    }
    out = [];
    for (k = 0, len = books.length; k < len; k++) {
      book = books[k];
      if (include_apocrypha === false && (book.apocrypha != null) && book.apocrypha === true) {
        continue;
      }
      if (case_sensitive === "books") {
        book.regexp = new RegExp(book.regexp.source, "g");
      }
      out.push(book);
    }
    return out;
  };

  bcv_parser.prototype.regexps.books = bcv_parser.prototype.regexps.get_books(false, "none");
var grammar = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = function(val_1, val_2) { val_2.unshift([val_1]); return {"type": "sequence", "value": val_2, "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c1 = "(",
        peg$c2 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c3 = ")",
        peg$c4 = { type: "literal", value: ")", description: "\")\"" },
        peg$c5 = function(val_1, val_2) { if (typeof(val_2) === "undefined") val_2 = []; val_2.unshift([val_1]); return {"type": "sequence_post_enclosed", "value": val_2, "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c6 = function(val_1, val_2) { if (val_1.length && val_1.length === 2) val_1 = val_1[0]; // for `b`, which returns [object, undefined]
              return {"type": "range", "value": [val_1, val_2], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c7 = "\x1F",
        peg$c8 = { type: "literal", value: "\x1F", description: "\"\\x1F\"" },
        peg$c9 = "/",
        peg$c10 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c11 = /^[1-8]/,
        peg$c12 = { type: "class", value: "[1-8]", description: "[1-8]" },
        peg$c13 = function(val) { return {"type": "b", "value": val.value, "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c14 = function(val_1, val_2) { return {"type": "bc", "value": [val_1, val_2], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c15 = ",",
        peg$c16 = { type: "literal", value: ",", description: "\",\"" },
        peg$c17 = function(val_1, val_2) { return {"type": "bc_title", "value": [val_1, val_2], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c18 = ".",
        peg$c19 = { type: "literal", value: ".", description: "\".\"" },
        peg$c20 = function(val_1, val_2) { return {"type": "bcv", "value": [val_1, val_2], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c21 = "-",
        peg$c22 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c23 = function(val_1, val_2, val_3, val_4) { return {"type": "range", "value": [{"type": "bcv", "value": [{"type": "bc", "value": [val_1, val_2], "indices": [val_1.indices[0], val_2.indices[1]]}, val_3], "indices": [val_1.indices[0], val_3.indices[1]]}, val_4], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c24 = function(val_1, val_2) { return {"type": "bv", "value": [val_1, val_2], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c25 = function(val_1, val_2) { return {"type": "bc", "value": [val_2, val_1], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c26 = function(val_1, val_2, val_3) { return {"type": "cb_range", "value": [val_3, val_1, val_2], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c27 = "th",
        peg$c28 = { type: "literal", value: "th", description: "\"th\"" },
        peg$c29 = "nd",
        peg$c30 = { type: "literal", value: "nd", description: "\"nd\"" },
        peg$c31 = "st",
        peg$c32 = { type: "literal", value: "st", description: "\"st\"" },
        peg$c33 = "/1\x1F",
        peg$c34 = { type: "literal", value: "/1\x1F", description: "\"/1\\x1F\"" },
        peg$c35 = function(val) { return {"type": "c_psalm", "value": val.value, "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c36 = function(val_1, val_2) { return {"type": "cv_psalm", "value": [val_1, val_2], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c37 = function(val_1, val_2) { return {"type": "c_title", "value": [val_1, val_2], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c38 = function(val_1, val_2) { return {"type": "cv", "value": [val_1, val_2], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c39 = function(val) { return {"type": "c", "value": [val], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c40 = "ff",
        peg$c41 = { type: "literal", value: "ff", description: "\"ff\"" },
        peg$c42 = /^[a-z0-9]/,
        peg$c43 = { type: "class", value: "[a-z0-9]", description: "[a-z0-9]" },
        peg$c44 = "f",
        peg$c45 = { type: "literal", value: "f", description: "\"f\"" },
        peg$c46 = /^[a-z]/,
        peg$c47 = { type: "class", value: "[a-z]", description: "[a-z]" },
        peg$c48 = function(val_1) { return {"type": "ff", "value": [val_1], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c49 = "title",
        peg$c50 = { type: "literal", value: "title", description: "\"title\"" },
        peg$c51 = function(val_1) { return {"type": "integer_title", "value": [val_1], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c52 = "/9\x1F",
        peg$c53 = { type: "literal", value: "/9\x1F", description: "\"/9\\x1F\"" },
        peg$c54 = function(val) { return {"type": "context", "value": val.value, "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c55 = "/2\x1F",
        peg$c56 = { type: "literal", value: "/2\x1F", description: "\"/2\\x1F\"" },
        peg$c57 = ".1",
        peg$c58 = { type: "literal", value: ".1", description: "\".1\"" },
        peg$c59 = /^[0-9]/,
        peg$c60 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c61 = function(val) { return {"type": "bc", "value": [val, {"type": "c", "value": [{"type": "integer", "value": 151, "indices": [peg$currPos - 2, peg$currPos - 1]}], "indices": [peg$currPos - 2, peg$currPos - 1]}], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c62 = function(val_1, val_2) { return {"type": "bcv", "value": [val_1, {"type": "v", "value": [val_2], "indices": [val_2.indices[0], val_2.indices[1]]}], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c63 = /^[a-e]/,
        peg$c64 = { type: "class", value: "[a-e]", description: "[a-e]" },
        peg$c65 = function(val) { return {"type": "v", "value": [val], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c66 = "ch",
        peg$c67 = { type: "literal", value: "ch", description: "\"ch\"" },
        peg$c68 = "apters",
        peg$c69 = { type: "literal", value: "apters", description: "\"apters\"" },
        peg$c70 = "apter",
        peg$c71 = { type: "literal", value: "apter", description: "\"apter\"" },
        peg$c72 = "apts",
        peg$c73 = { type: "literal", value: "apts", description: "\"apts\"" },
        peg$c74 = "pts",
        peg$c75 = { type: "literal", value: "pts", description: "\"pts\"" },
        peg$c76 = "apt",
        peg$c77 = { type: "literal", value: "apt", description: "\"apt\"" },
        peg$c78 = "aps",
        peg$c79 = { type: "literal", value: "aps", description: "\"aps\"" },
        peg$c80 = "ap",
        peg$c81 = { type: "literal", value: "ap", description: "\"ap\"" },
        peg$c82 = "p",
        peg$c83 = { type: "literal", value: "p", description: "\"p\"" },
        peg$c84 = "s",
        peg$c85 = { type: "literal", value: "s", description: "\"s\"" },
        peg$c86 = "a",
        peg$c87 = { type: "literal", value: "a", description: "\"a\"" },
        peg$c88 = function() { return {"type": "c_explicit"} },
        peg$c89 = "v",
        peg$c90 = { type: "literal", value: "v", description: "\"v\"" },
        peg$c91 = "erses",
        peg$c92 = { type: "literal", value: "erses", description: "\"erses\"" },
        peg$c93 = "erse",
        peg$c94 = { type: "literal", value: "erse", description: "\"erse\"" },
        peg$c95 = "er",
        peg$c96 = { type: "literal", value: "er", description: "\"er\"" },
        peg$c97 = "ss",
        peg$c98 = { type: "literal", value: "ss", description: "\"ss\"" },
        peg$c99 = function() { return {"type": "v_explicit"} },
        peg$c100 = ":",
        peg$c101 = { type: "literal", value: ":", description: "\":\"" },
        peg$c102 = /^["']/,
        peg$c103 = { type: "class", value: "[\"']", description: "[\"']" },
        peg$c104 = /^[,;\/:&\-\u2013\u2014~]/,
        peg$c105 = { type: "class", value: "[,;/:&\\-\\u2013\\u2014~]", description: "[,;/:&\\-\\u2013\\u2014~]" },
        peg$c106 = "and",
        peg$c107 = { type: "literal", value: "and", description: "\"and\"" },
        peg$c108 = "compare",
        peg$c109 = { type: "literal", value: "compare", description: "\"compare\"" },
        peg$c110 = "cf",
        peg$c111 = { type: "literal", value: "cf", description: "\"cf\"" },
        peg$c112 = "see",
        peg$c113 = { type: "literal", value: "see", description: "\"see\"" },
        peg$c114 = "also",
        peg$c115 = { type: "literal", value: "also", description: "\"also\"" },
        peg$c116 = function() { return "" },
        peg$c117 = /^[\-\u2013\u2014]/,
        peg$c118 = { type: "class", value: "[\\-\\u2013\\u2014]", description: "[\\-\\u2013\\u2014]" },
        peg$c119 = "through",
        peg$c120 = { type: "literal", value: "through", description: "\"through\"" },
        peg$c121 = "thru",
        peg$c122 = { type: "literal", value: "thru", description: "\"thru\"" },
        peg$c123 = "to",
        peg$c124 = { type: "literal", value: "to", description: "\"to\"" },
        peg$c125 = function(val) { return {type:"title", value: [val], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c126 = "from",
        peg$c127 = { type: "literal", value: "from", description: "\"from\"" },
        peg$c128 = "of",
        peg$c129 = { type: "literal", value: "of", description: "\"of\"" },
        peg$c130 = "in",
        peg$c131 = { type: "literal", value: "in", description: "\"in\"" },
        peg$c132 = "the",
        peg$c133 = { type: "literal", value: "the", description: "\"the\"" },
        peg$c134 = "book",
        peg$c135 = { type: "literal", value: "book", description: "\"book\"" },
        peg$c136 = /^[([]/,
        peg$c137 = { type: "class", value: "[\\(\\[]", description: "[\\(\\[]" },
        peg$c138 = /^[)\]]/,
        peg$c139 = { type: "class", value: "[\\)\\]]", description: "[\\)\\]]" },
        peg$c140 = function(val) { return {"type": "translation_sequence", "value": val, "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c141 = "\x1E",
        peg$c142 = { type: "literal", value: "\x1E", description: "\"\\x1E\"" },
        peg$c143 = function(val) { return {"type": "translation", "value": val.value, "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c144 = ",000",
        peg$c145 = { type: "literal", value: ",000", description: "\",000\"" },
        peg$c146 = function(val) { return {"type": "integer", "value": parseInt(val.join(""), 10), "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c147 = /^[^\x1F\x1E([]/,
        peg$c148 = { type: "class", value: "[^\\x1f\\x1e\\(\\[]", description: "[^\\x1f\\x1e\\(\\[]" },
        peg$c149 = function(val) { return {"type": "word", "value": val.join(""), "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c150 = function(val) { return {"type": "stop", "value": val, "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c151 = /^[\s\xa0*]/,
        peg$c152 = { type: "class", value: "[\\s\\xa0\\*]", description: "[\\s\\xa0\\*]" },

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    if ("punctuation_strategy" in options && options.punctuation_strategy === "eu") {
        peg$parsecv_sep = peg$parseeu_cv_sep;
        peg$c104 = /^[;\/:&\-\u2013\u2014~]/;
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parsestart() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsebcv_hyphen_range();
      if (s1 === peg$FAILED) {
        s1 = peg$parsesequence();
        if (s1 === peg$FAILED) {
          s1 = peg$parsecb_range();
          if (s1 === peg$FAILED) {
            s1 = peg$parserange();
            if (s1 === peg$FAILED) {
              s1 = peg$parseff();
              if (s1 === peg$FAILED) {
                s1 = peg$parsebcv_comma();
                if (s1 === peg$FAILED) {
                  s1 = peg$parsebc_title();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseps151_bcv();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parsebcv();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parsebcv_weak();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseps151_bc();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parsebc();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parsecv_psalm();
                              if (s1 === peg$FAILED) {
                                s1 = peg$parsebv();
                                if (s1 === peg$FAILED) {
                                  s1 = peg$parsec_psalm();
                                  if (s1 === peg$FAILED) {
                                    s1 = peg$parseb();
                                    if (s1 === peg$FAILED) {
                                      s1 = peg$parsecbv();
                                      if (s1 === peg$FAILED) {
                                        s1 = peg$parsecbv_ordinal();
                                        if (s1 === peg$FAILED) {
                                          s1 = peg$parsecb();
                                          if (s1 === peg$FAILED) {
                                            s1 = peg$parsecb_ordinal();
                                            if (s1 === peg$FAILED) {
                                              s1 = peg$parsetranslation_sequence_enclosed();
                                              if (s1 === peg$FAILED) {
                                                s1 = peg$parsetranslation_sequence();
                                                if (s1 === peg$FAILED) {
                                                  s1 = peg$parsesequence_sep();
                                                  if (s1 === peg$FAILED) {
                                                    s1 = peg$parsec_title();
                                                    if (s1 === peg$FAILED) {
                                                      s1 = peg$parseinteger_title();
                                                      if (s1 === peg$FAILED) {
                                                        s1 = peg$parsecv();
                                                        if (s1 === peg$FAILED) {
                                                          s1 = peg$parsecv_weak();
                                                          if (s1 === peg$FAILED) {
                                                            s1 = peg$parsev_letter();
                                                            if (s1 === peg$FAILED) {
                                                              s1 = peg$parseinteger();
                                                              if (s1 === peg$FAILED) {
                                                                s1 = peg$parsec();
                                                                if (s1 === peg$FAILED) {
                                                                  s1 = peg$parsev();
                                                                  if (s1 === peg$FAILED) {
                                                                    s1 = peg$parseword();
                                                                    if (s1 === peg$FAILED) {
                                                                      s1 = peg$parseword_parenthesis();
                                                                      if (s1 === peg$FAILED) {
                                                                        s1 = peg$parsecontext();
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsebcv_hyphen_range();
          if (s1 === peg$FAILED) {
            s1 = peg$parsesequence();
            if (s1 === peg$FAILED) {
              s1 = peg$parsecb_range();
              if (s1 === peg$FAILED) {
                s1 = peg$parserange();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseff();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parsebcv_comma();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parsebc_title();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseps151_bcv();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parsebcv();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parsebcv_weak();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parseps151_bc();
                              if (s1 === peg$FAILED) {
                                s1 = peg$parsebc();
                                if (s1 === peg$FAILED) {
                                  s1 = peg$parsecv_psalm();
                                  if (s1 === peg$FAILED) {
                                    s1 = peg$parsebv();
                                    if (s1 === peg$FAILED) {
                                      s1 = peg$parsec_psalm();
                                      if (s1 === peg$FAILED) {
                                        s1 = peg$parseb();
                                        if (s1 === peg$FAILED) {
                                          s1 = peg$parsecbv();
                                          if (s1 === peg$FAILED) {
                                            s1 = peg$parsecbv_ordinal();
                                            if (s1 === peg$FAILED) {
                                              s1 = peg$parsecb();
                                              if (s1 === peg$FAILED) {
                                                s1 = peg$parsecb_ordinal();
                                                if (s1 === peg$FAILED) {
                                                  s1 = peg$parsetranslation_sequence_enclosed();
                                                  if (s1 === peg$FAILED) {
                                                    s1 = peg$parsetranslation_sequence();
                                                    if (s1 === peg$FAILED) {
                                                      s1 = peg$parsesequence_sep();
                                                      if (s1 === peg$FAILED) {
                                                        s1 = peg$parsec_title();
                                                        if (s1 === peg$FAILED) {
                                                          s1 = peg$parseinteger_title();
                                                          if (s1 === peg$FAILED) {
                                                            s1 = peg$parsecv();
                                                            if (s1 === peg$FAILED) {
                                                              s1 = peg$parsecv_weak();
                                                              if (s1 === peg$FAILED) {
                                                                s1 = peg$parsev_letter();
                                                                if (s1 === peg$FAILED) {
                                                                  s1 = peg$parseinteger();
                                                                  if (s1 === peg$FAILED) {
                                                                    s1 = peg$parsec();
                                                                    if (s1 === peg$FAILED) {
                                                                      s1 = peg$parsev();
                                                                      if (s1 === peg$FAILED) {
                                                                        s1 = peg$parseword();
                                                                        if (s1 === peg$FAILED) {
                                                                          s1 = peg$parseword_parenthesis();
                                                                          if (s1 === peg$FAILED) {
                                                                            s1 = peg$parsecontext();
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesequence() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsecb_range();
      if (s1 === peg$FAILED) {
        s1 = peg$parsebcv_hyphen_range();
        if (s1 === peg$FAILED) {
          s1 = peg$parserange();
          if (s1 === peg$FAILED) {
            s1 = peg$parseff();
            if (s1 === peg$FAILED) {
              s1 = peg$parsebcv_comma();
              if (s1 === peg$FAILED) {
                s1 = peg$parsebc_title();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseps151_bcv();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parsebcv();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parsebcv_weak();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseps151_bc();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parsebc();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parsecv_psalm();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parsebv();
                              if (s1 === peg$FAILED) {
                                s1 = peg$parsec_psalm();
                                if (s1 === peg$FAILED) {
                                  s1 = peg$parseb();
                                  if (s1 === peg$FAILED) {
                                    s1 = peg$parsecbv();
                                    if (s1 === peg$FAILED) {
                                      s1 = peg$parsecbv_ordinal();
                                      if (s1 === peg$FAILED) {
                                        s1 = peg$parsecb();
                                        if (s1 === peg$FAILED) {
                                          s1 = peg$parsecb_ordinal();
                                          if (s1 === peg$FAILED) {
                                            s1 = peg$parsecontext();
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsesequence_sep();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsesequence_post();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parsesequence_sep();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsesequence_post();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c0(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesequence_post_enclosed() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c1;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c2); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesp();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesequence_sep();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesequence_post();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$currPos;
              s7 = peg$parsesequence_sep();
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsesequence_post();
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$currPos;
                s7 = peg$parsesequence_sep();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsesequence_post();
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsesp();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c3;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c4); }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c5(s4, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesequence_post() {
      var s0;

      s0 = peg$parsesequence_post_enclosed();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecb_range();
        if (s0 === peg$FAILED) {
          s0 = peg$parsebcv_hyphen_range();
          if (s0 === peg$FAILED) {
            s0 = peg$parserange();
            if (s0 === peg$FAILED) {
              s0 = peg$parseff();
              if (s0 === peg$FAILED) {
                s0 = peg$parsebcv_comma();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsebc_title();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseps151_bcv();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsebcv();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsebcv_weak();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseps151_bc();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsebc();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsecv_psalm();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parsebv();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parsec_psalm();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseb();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parsecbv();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parsecbv_ordinal();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parsecb();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parsecb_ordinal();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parsec_title();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseinteger_title();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parsecv();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parsecv_weak();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parsev_letter();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseinteger();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parsec();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parsev();
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parserange() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsebcv_comma();
      if (s1 === peg$FAILED) {
        s1 = peg$parsebc_title();
        if (s1 === peg$FAILED) {
          s1 = peg$parseps151_bcv();
          if (s1 === peg$FAILED) {
            s1 = peg$parsebcv();
            if (s1 === peg$FAILED) {
              s1 = peg$parsebcv_weak();
              if (s1 === peg$FAILED) {
                s1 = peg$parseps151_bc();
                if (s1 === peg$FAILED) {
                  s1 = peg$parsebc();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parsecv_psalm();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parsebv();
                      if (s1 === peg$FAILED) {
                        s1 = peg$currPos;
                        s2 = peg$parseb();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$currPos;
                          peg$silentFails++;
                          s4 = peg$currPos;
                          s5 = peg$parserange_sep();
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parsebcv_comma();
                            if (s6 === peg$FAILED) {
                              s6 = peg$parsebc_title();
                              if (s6 === peg$FAILED) {
                                s6 = peg$parseps151_bcv();
                                if (s6 === peg$FAILED) {
                                  s6 = peg$parsebcv();
                                  if (s6 === peg$FAILED) {
                                    s6 = peg$parsebcv_weak();
                                    if (s6 === peg$FAILED) {
                                      s6 = peg$parseps151_bc();
                                      if (s6 === peg$FAILED) {
                                        s6 = peg$parsebc();
                                        if (s6 === peg$FAILED) {
                                          s6 = peg$parsebv();
                                          if (s6 === peg$FAILED) {
                                            s6 = peg$parseb();
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            if (s6 !== peg$FAILED) {
                              s5 = [s5, s6];
                              s4 = s5;
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                          peg$silentFails--;
                          if (s4 !== peg$FAILED) {
                            peg$currPos = s3;
                            s3 = void 0;
                          } else {
                            s3 = peg$FAILED;
                          }
                          if (s3 !== peg$FAILED) {
                            s2 = [s2, s3];
                            s1 = s2;
                          } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s1;
                          s1 = peg$FAILED;
                        }
                        if (s1 === peg$FAILED) {
                          s1 = peg$parsecbv();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parsecbv_ordinal();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parsec_psalm();
                              if (s1 === peg$FAILED) {
                                s1 = peg$parsecb();
                                if (s1 === peg$FAILED) {
                                  s1 = peg$parsecb_ordinal();
                                  if (s1 === peg$FAILED) {
                                    s1 = peg$parsec_title();
                                    if (s1 === peg$FAILED) {
                                      s1 = peg$parseinteger_title();
                                      if (s1 === peg$FAILED) {
                                        s1 = peg$parsecv();
                                        if (s1 === peg$FAILED) {
                                          s1 = peg$parsecv_weak();
                                          if (s1 === peg$FAILED) {
                                            s1 = peg$parsev_letter();
                                            if (s1 === peg$FAILED) {
                                              s1 = peg$parseinteger();
                                              if (s1 === peg$FAILED) {
                                                s1 = peg$parsec();
                                                if (s1 === peg$FAILED) {
                                                  s1 = peg$parsev();
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parserange_sep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseff();
          if (s3 === peg$FAILED) {
            s3 = peg$parsebcv_comma();
            if (s3 === peg$FAILED) {
              s3 = peg$parsebc_title();
              if (s3 === peg$FAILED) {
                s3 = peg$parseps151_bcv();
                if (s3 === peg$FAILED) {
                  s3 = peg$parsebcv();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parsebcv_weak();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseps151_bc();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parsebc();
                        if (s3 === peg$FAILED) {
                          s3 = peg$parsecv_psalm();
                          if (s3 === peg$FAILED) {
                            s3 = peg$parsebv();
                            if (s3 === peg$FAILED) {
                              s3 = peg$parseb();
                              if (s3 === peg$FAILED) {
                                s3 = peg$parsecbv();
                                if (s3 === peg$FAILED) {
                                  s3 = peg$parsecbv_ordinal();
                                  if (s3 === peg$FAILED) {
                                    s3 = peg$parsec_psalm();
                                    if (s3 === peg$FAILED) {
                                      s3 = peg$parsecb();
                                      if (s3 === peg$FAILED) {
                                        s3 = peg$parsecb_ordinal();
                                        if (s3 === peg$FAILED) {
                                          s3 = peg$parsec_title();
                                          if (s3 === peg$FAILED) {
                                            s3 = peg$parseinteger_title();
                                            if (s3 === peg$FAILED) {
                                              s3 = peg$parsecv();
                                              if (s3 === peg$FAILED) {
                                                s3 = peg$parsev_letter();
                                                if (s3 === peg$FAILED) {
                                                  s3 = peg$parseinteger();
                                                  if (s3 === peg$FAILED) {
                                                    s3 = peg$parsecv_weak();
                                                    if (s3 === peg$FAILED) {
                                                      s3 = peg$parsec();
                                                      if (s3 === peg$FAILED) {
                                                        s3 = peg$parsev();
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c6(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseb() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 31) {
        s1 = peg$c7;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseany_integer();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 47) {
            s4 = peg$c9;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c10); }
          }
          if (s4 !== peg$FAILED) {
            if (peg$c11.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c12); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 31) {
              s4 = peg$c7;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c8); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c13(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebc() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseb();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsev_explicit();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$currPos;
          s6 = peg$parsec();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsecv_sep();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsev();
              if (s8 !== peg$FAILED) {
                s6 = [s6, s7, s8];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          peg$silentFails--;
          if (s5 !== peg$FAILED) {
            peg$currPos = s4;
            s4 = void 0;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = [];
          s3 = peg$parsecv_sep();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsecv_sep();
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = [];
            s3 = peg$parsecv_sep_weak();
            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsecv_sep_weak();
              }
            } else {
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = [];
              s3 = peg$parserange_sep();
              if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parserange_sep();
                }
              } else {
                s2 = peg$FAILED;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$parsesp();
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsec();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c14(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebc_comma() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseb();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesp();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c15;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c16); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesp();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsec();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c14(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebc_title() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseps151_bc();
      if (s1 === peg$FAILED) {
        s1 = peg$parsebc();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetitle();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c17(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebcv() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseps151_bc();
      if (s1 === peg$FAILED) {
        s1 = peg$parsebc();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c18;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c19); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsev_explicit();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsev();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsesequence_sep();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsev_explicit();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsecv();
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsecv_sep();
          if (s4 === peg$FAILED) {
            s4 = peg$parsesequence_sep();
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsev_explicit();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$parsecv_sep();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsev_letter();
            if (s4 === peg$FAILED) {
              s4 = peg$parsev();
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c20(s1, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebcv_weak() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseps151_bc();
      if (s1 === peg$FAILED) {
        s1 = peg$parsebc();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecv_sep_weak();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsev_letter();
          if (s3 === peg$FAILED) {
            s3 = peg$parsev();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$currPos;
            s6 = peg$parsecv_sep();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsev();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c20(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebcv_comma() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsebc_comma();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesp();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c15;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c16); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesp();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsev_letter();
              if (s5 === peg$FAILED) {
                s5 = peg$parsev();
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                peg$silentFails++;
                s7 = peg$currPos;
                s8 = peg$parsecv_sep();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsev();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                peg$silentFails--;
                if (s7 === peg$FAILED) {
                  s6 = void 0;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c20(s1, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebcv_hyphen_range() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseb();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c21;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c22); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parsespace();
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsec();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s4 = peg$c21;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c22); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsev();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 45) {
                  s6 = peg$c21;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsev();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c23(s1, s3, s5, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebv() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseb();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsecv_sep();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsecv_sep();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = [];
          s3 = peg$parsecv_sep_weak();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsecv_sep_weak();
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = [];
            s3 = peg$parserange_sep();
            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parserange_sep();
              }
            } else {
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = [];
              s4 = peg$parsesequence_sep();
              if (s4 !== peg$FAILED) {
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parsesequence_sep();
                }
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$currPos;
                peg$silentFails++;
                s5 = peg$parsev_explicit();
                peg$silentFails--;
                if (s5 !== peg$FAILED) {
                  peg$currPos = s4;
                  s4 = void 0;
                } else {
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$parsesp();
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsev_letter();
          if (s3 === peg$FAILED) {
            s3 = peg$parsev();
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c24(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecb() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsec_explicit();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsec();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsein_book_of();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseb();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c25(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecb_range() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsec_explicit();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsec();
        if (s2 !== peg$FAILED) {
          s3 = peg$parserange_sep();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsec();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsein_book_of();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseb();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c26(s2, s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecbv() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsecb();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesequence_sep();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsev_explicit();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsev();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c20(s1, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecb_ordinal() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsec();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c27) {
          s2 = peg$c27;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c28); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c29) {
            s2 = peg$c29;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c30); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c31) {
              s2 = peg$c31;
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c32); }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsec_explicit();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsein_book_of();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseb();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c25(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecbv_ordinal() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsecb_ordinal();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesequence_sep();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsev_explicit();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsev();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c20(s1, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsec_psalm() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 31) {
        s1 = peg$c7;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseany_integer();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c33) {
            s3 = peg$c33;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c35(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecv_psalm() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsec_psalm();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesequence_sep();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsev_explicit();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsev();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c36(s1, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsec_title() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsec_explicit();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsec();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetitle();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c37(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecv() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsev_explicit();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsec();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s5 = peg$c18;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c19); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsev_explicit();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsev();
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parsecv_sep();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsev_explicit();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$parsecv_sep();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsev_letter();
              if (s5 === peg$FAILED) {
                s5 = peg$parsev();
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c38(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecv_weak() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsec();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecv_sep_weak();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsev_letter();
          if (s3 === peg$FAILED) {
            s3 = peg$parsev();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$currPos;
            s6 = peg$parsecv_sep();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsev();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c38(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsec() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsec_explicit();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinteger();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c39(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseff() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsebcv();
      if (s1 === peg$FAILED) {
        s1 = peg$parsebcv_weak();
        if (s1 === peg$FAILED) {
          s1 = peg$parsebc();
          if (s1 === peg$FAILED) {
            s1 = peg$parsebv();
            if (s1 === peg$FAILED) {
              s1 = peg$parsecv();
              if (s1 === peg$FAILED) {
                s1 = peg$parsecv_weak();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseinteger();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parsec();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parsev();
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesp();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c40) {
            s4 = peg$c40;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c41); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            peg$silentFails++;
            if (peg$c42.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c43); }
            }
            peg$silentFails--;
            if (s6 === peg$FAILED) {
              s5 = void 0;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 102) {
              s4 = peg$c44;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c45); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              peg$silentFails++;
              if (peg$c42.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c43); }
              }
              peg$silentFails--;
              if (s6 === peg$FAILED) {
                s5 = void 0;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseabbrev();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              peg$silentFails++;
              if (peg$c46.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c47); }
              }
              peg$silentFails--;
              if (s6 === peg$FAILED) {
                s5 = void 0;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c48(s1);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseinteger_title() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseinteger();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecv_sep();
        if (s2 === peg$FAILED) {
          s2 = peg$parsesequence_sep();
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c49) {
            s3 = peg$c49;
            peg$currPos += 5;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c50); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c51(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecontext() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 31) {
        s1 = peg$c7;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseany_integer();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c52) {
            s3 = peg$c52;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c53); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c54(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseps151_b() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 31) {
        s1 = peg$c7;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseany_integer();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c55) {
            s3 = peg$c55;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c56); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c13(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseps151_bc() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseps151_b();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c57) {
          s2 = peg$c57;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c58); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          if (peg$c59.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c60); }
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c61(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseps151_bcv() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseps151_bc();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c18;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c19); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseinteger();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c62(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsev_letter() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsev_explicit();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinteger();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesp();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c40) {
              s6 = peg$c40;
              peg$currPos += 2;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c41); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              peg$silentFails++;
              if (peg$c42.test(input.charAt(peg$currPos))) {
                s8 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c43); }
              }
              peg$silentFails--;
              if (s8 === peg$FAILED) {
                s7 = void 0;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 102) {
                s6 = peg$c44;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c45); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                peg$silentFails++;
                if (peg$c42.test(input.charAt(peg$currPos))) {
                  s8 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c43); }
                }
                peg$silentFails--;
                if (s8 === peg$FAILED) {
                  s7 = void 0;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              if (peg$c63.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c64); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                peg$silentFails++;
                if (peg$c46.test(input.charAt(peg$currPos))) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c47); }
                }
                peg$silentFails--;
                if (s7 === peg$FAILED) {
                  s6 = void 0;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c65(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsev() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsev_explicit();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinteger();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c65(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsec_explicit() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsesp();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c66) {
          s3 = peg$c66;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c67); }
        }
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c68) {
            s4 = peg$c68;
            peg$currPos += 6;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c69); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c70) {
              s4 = peg$c70;
              peg$currPos += 5;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c71); }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              if (input.substr(peg$currPos, 4) === peg$c72) {
                s5 = peg$c72;
                peg$currPos += 4;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c73); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseabbrev();
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 === peg$FAILED) {
                s4 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c74) {
                  s5 = peg$c74;
                  peg$currPos += 3;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c75); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseabbrev();
                  if (s6 === peg$FAILED) {
                    s6 = null;
                  }
                  if (s6 !== peg$FAILED) {
                    s5 = [s5, s6];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 === peg$FAILED) {
                  s4 = peg$currPos;
                  if (input.substr(peg$currPos, 3) === peg$c76) {
                    s5 = peg$c76;
                    peg$currPos += 3;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c77); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseabbrev();
                    if (s6 === peg$FAILED) {
                      s6 = null;
                    }
                    if (s6 !== peg$FAILED) {
                      s5 = [s5, s6];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                  if (s4 === peg$FAILED) {
                    s4 = peg$currPos;
                    if (input.substr(peg$currPos, 3) === peg$c78) {
                      s5 = peg$c78;
                      peg$currPos += 3;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c79); }
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parseabbrev();
                      if (s6 === peg$FAILED) {
                        s6 = null;
                      }
                      if (s6 !== peg$FAILED) {
                        s5 = [s5, s6];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                    if (s4 === peg$FAILED) {
                      s4 = peg$currPos;
                      if (input.substr(peg$currPos, 2) === peg$c80) {
                        s5 = peg$c80;
                        peg$currPos += 2;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c81); }
                      }
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parseabbrev();
                        if (s6 === peg$FAILED) {
                          s6 = null;
                        }
                        if (s6 !== peg$FAILED) {
                          s5 = [s5, s6];
                          s4 = s5;
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                      if (s4 === peg$FAILED) {
                        s4 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 112) {
                          s5 = peg$c82;
                          peg$currPos++;
                        } else {
                          s5 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c83); }
                        }
                        if (s5 !== peg$FAILED) {
                          s6 = peg$parseabbrev();
                          if (s6 === peg$FAILED) {
                            s6 = null;
                          }
                          if (s6 !== peg$FAILED) {
                            s5 = [s5, s6];
                            s4 = s5;
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                        if (s4 === peg$FAILED) {
                          s4 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 115) {
                            s5 = peg$c84;
                            peg$currPos++;
                          } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c85); }
                          }
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parseabbrev();
                            if (s6 === peg$FAILED) {
                              s6 = null;
                            }
                            if (s6 !== peg$FAILED) {
                              s5 = [s5, s6];
                              s4 = s5;
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                          if (s4 === peg$FAILED) {
                            s4 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 97) {
                              s5 = peg$c86;
                              peg$currPos++;
                            } else {
                              s5 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c87); }
                            }
                            if (s5 !== peg$FAILED) {
                              s6 = peg$parseabbrev();
                              if (s6 === peg$FAILED) {
                                s6 = null;
                              }
                              if (s6 !== peg$FAILED) {
                                s5 = [s5, s6];
                                s4 = s5;
                              } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                            if (s4 === peg$FAILED) {
                              s4 = peg$parseabbrev();
                              if (s4 === peg$FAILED) {
                                s4 = null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesp();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c88();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsev_explicit() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsesp();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 118) {
          s3 = peg$c89;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c90); }
        }
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c91) {
            s4 = peg$c91;
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c92); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c93) {
              s4 = peg$c93;
              peg$currPos += 4;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c94); }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c95) {
                s5 = peg$c95;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c96); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseabbrev();
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 === peg$FAILED) {
                s4 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c97) {
                  s5 = peg$c97;
                  peg$currPos += 2;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c98); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseabbrev();
                  if (s6 === peg$FAILED) {
                    s6 = null;
                  }
                  if (s6 !== peg$FAILED) {
                    s5 = [s5, s6];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 === peg$FAILED) {
                  s4 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 115) {
                    s5 = peg$c84;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c85); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseabbrev();
                    if (s6 === peg$FAILED) {
                      s6 = null;
                    }
                    if (s6 !== peg$FAILED) {
                      s5 = [s5, s6];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                  if (s4 === peg$FAILED) {
                    s4 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 118) {
                      s5 = peg$c89;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c90); }
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parseabbrev();
                      if (s6 === peg$FAILED) {
                        s6 = null;
                      }
                      if (s6 !== peg$FAILED) {
                        s5 = [s5, s6];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                    if (s4 === peg$FAILED) {
                      s4 = peg$parseabbrev();
                      if (s4 === peg$FAILED) {
                        s4 = null;
                      }
                    }
                  }
                }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          if (peg$c46.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c47); }
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesp();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c99();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecv_sep() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsesp();
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c100;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c101); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (input.charCodeAt(peg$currPos) === 58) {
              s3 = peg$c100;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c101); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$currPos;
            s6 = peg$parsesp();
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s7 = peg$c18;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c19); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsesp();
                if (s8 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 46) {
                    s9 = peg$c18;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c19); }
                  }
                  if (s9 !== peg$FAILED) {
                    s6 = [s6, s7, s8, s9];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesp();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecv_sep_weak() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesp();
      if (s1 !== peg$FAILED) {
        if (peg$c102.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c103); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesp();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsespace();
      }

      return s0;
    }

    function peg$parsesequence_sep() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c104.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c105); }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c18;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c19); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$currPos;
          s6 = peg$parsesp();
          if (s6 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s7 = peg$c18;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c19); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsesp();
              if (s8 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s9 = peg$c18;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c19); }
                }
                if (s9 !== peg$FAILED) {
                  s6 = [s6, s7, s8, s9];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c106) {
            s2 = peg$c106;
            peg$currPos += 3;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c107); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c108) {
              s2 = peg$c108;
              peg$currPos += 7;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c109); }
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c110) {
                s3 = peg$c110;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c111); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseabbrev();
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c112) {
                  s3 = peg$c112;
                  peg$currPos += 3;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c113); }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsespace();
                  if (s4 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c114) {
                      s5 = peg$c114;
                      peg$currPos += 4;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c115); }
                    }
                    if (s5 !== peg$FAILED) {
                      s3 = [s3, s4, s5];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
                if (s2 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c114) {
                    s2 = peg$c114;
                    peg$currPos += 4;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c115); }
                  }
                  if (s2 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c112) {
                      s2 = peg$c112;
                      peg$currPos += 3;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c113); }
                    }
                    if (s2 === peg$FAILED) {
                      s2 = peg$parsespace();
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c104.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c105); }
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
              s3 = peg$c18;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c19); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$currPos;
              peg$silentFails++;
              s5 = peg$currPos;
              s6 = peg$parsesp();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s7 = peg$c18;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c19); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsesp();
                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 46) {
                      s9 = peg$c18;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c19); }
                    }
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              peg$silentFails--;
              if (s5 === peg$FAILED) {
                s4 = void 0;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c106) {
                s2 = peg$c106;
                peg$currPos += 3;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c107); }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c108) {
                  s2 = peg$c108;
                  peg$currPos += 7;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c109); }
                }
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c110) {
                    s3 = peg$c110;
                    peg$currPos += 2;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c111); }
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseabbrev();
                    if (s4 === peg$FAILED) {
                      s4 = null;
                    }
                    if (s4 !== peg$FAILED) {
                      s3 = [s3, s4];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    if (input.substr(peg$currPos, 3) === peg$c112) {
                      s3 = peg$c112;
                      peg$currPos += 3;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c113); }
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parsespace();
                      if (s4 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c114) {
                          s5 = peg$c114;
                          peg$currPos += 4;
                        } else {
                          s5 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c115); }
                        }
                        if (s5 !== peg$FAILED) {
                          s3 = [s3, s4, s5];
                          s2 = s3;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                    if (s2 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c114) {
                        s2 = peg$c114;
                        peg$currPos += 4;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c115); }
                      }
                      if (s2 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c112) {
                          s2 = peg$c112;
                          peg$currPos += 3;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c113); }
                        }
                        if (s2 === peg$FAILED) {
                          s2 = peg$parsespace();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c116();
      }
      s0 = s1;

      return s0;
    }

    function peg$parserange_sep() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsesp();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (peg$c117.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c118); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsesp();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 7) === peg$c119) {
            s4 = peg$c119;
            peg$currPos += 7;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c120); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesp();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c121) {
              s4 = peg$c121;
              peg$currPos += 4;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c122); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsesp();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c123) {
                s4 = peg$c123;
                peg$currPos += 2;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c124); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsesp();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            if (peg$c117.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c118); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsesp();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              if (input.substr(peg$currPos, 7) === peg$c119) {
                s4 = peg$c119;
                peg$currPos += 7;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c120); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsesp();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                if (input.substr(peg$currPos, 4) === peg$c121) {
                  s4 = peg$c121;
                  peg$currPos += 4;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c122); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsesp();
                  if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 === peg$FAILED) {
                  s3 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c123) {
                    s4 = peg$c123;
                    peg$currPos += 2;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c124); }
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsesp();
                    if (s5 !== peg$FAILED) {
                      s4 = [s4, s5];
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                }
              }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetitle() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsecv_sep();
      if (s1 === peg$FAILED) {
        s1 = peg$parsesequence_sep();
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c49) {
          s2 = peg$c49;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c50); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c125(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsein_book_of() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parsesp();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c126) {
          s2 = peg$c126;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c127); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c128) {
            s2 = peg$c128;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c129); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c130) {
              s2 = peg$c130;
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c131); }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesp();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c132) {
              s5 = peg$c132;
              peg$currPos += 3;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c133); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsesp();
              if (s6 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c134) {
                  s7 = peg$c134;
                  peg$currPos += 4;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c135); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsesp();
                  if (s8 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c128) {
                      s9 = peg$c128;
                      peg$currPos += 2;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c129); }
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsesp();
                      if (s10 !== peg$FAILED) {
                        s5 = [s5, s6, s7, s8, s9, s10];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseabbrev() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsesp();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c18;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c19); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$currPos;
          s5 = peg$parsesp();
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s6 = peg$c18;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c19); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsesp();
              if (s7 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s8 = peg$c18;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c19); }
                }
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetranslation_sequence_enclosed() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsesp();
      if (s1 !== peg$FAILED) {
        if (peg$c136.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c137); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesp();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parsetranslation();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$currPos;
              s8 = peg$parsesequence_sep();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsetranslation();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                s8 = peg$parsesequence_sep();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsetranslation();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsesp();
              if (s5 !== peg$FAILED) {
                if (peg$c138.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c139); }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c140(s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetranslation_sequence() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsesp();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s3 = peg$c15;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsesp();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsetranslation();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = peg$parsesequence_sep();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsetranslation();
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$parsesequence_sep();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsetranslation();
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c140(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetranslation() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 30) {
        s1 = peg$c141;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c142); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseany_integer();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 30) {
            s3 = peg$c141;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c142); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c143(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseinteger() {
      var res;
      if (res = /^[0-9]{1,3}(?!\d|,000)/.exec(input.substr(peg$currPos))) {
      	peg$savedPos = peg$currPos;
        peg$currPos += res[0].length;
        return {"type": "integer", "value": parseInt(res[0], 10), "indices": [peg$savedPos, peg$currPos - 1]}
      } else {
        return peg$FAILED;
      }
    }

    function peg$parseany_integer() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c59.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c59.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c60); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c146(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseword() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c147.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c148); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c147.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c148); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c149(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseword_parenthesis() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c136.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c137); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c150(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsesp() {
      var s0;

      s0 = peg$parsespace();
      if (s0 === peg$FAILED) {
        s0 = null;
      }

      return s0;
    }

    function peg$parsespace() {
      var res;
      if (res = /^[\s\xa0*]+/.exec(input.substr(peg$currPos))) {
        peg$currPos += res[0].length;
        return [];
      }
      return peg$FAILED;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();


}).call(this);
